{"version":3,"file":"static/js/710.5991afa2.chunk.js","mappings":"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","sources":["components/GlassButton.js","hooks/useKeyPress.js","hooks/useScroll.js","hooks/useResize.js","gmaes/spaceInvaders/spaceInvaders.js","gmaes/spaceInvaders/assets/MobileButtons.js","gmaes/spaceInvaders/assets/Header.js","gmaes/spaceInvaders/assets/Nav.js","gmaes/spaceInvaders/index.js","three/LightMap.js","shaders/RainShader.js","shaders/squaresShader.js","shaders/squaresPatternShader.js","shaders/CloudyTunnelShaderMaterial.js","three/Ufo.js","gmaes/spaceInvadersCanvas.js","pages/abduction.js","three/planet.js"],"sourcesContent":["export default function GlassButton({ children, ...props }) {\r\n  return (\r\n    <button className=\"btn_glass_purple_parent\" {...props}>\r\n      <span className=\"btn_glass_purple gradient_purple_text\">{children}</span>\r\n    </button>\r\n  );\r\n}\r\n","import { useState, useEffect } from 'react';\r\n\r\nconst useKeyPress = targetKey=>{\r\n\r\n    const [keyPressed, setKeyPressed] = useState(false);\r\n\r\n// If pressed key is our target key then set to true\r\nconst downHandler = ({ key })=> {\r\n    if (key === targetKey) {\r\n      setKeyPressed(true);\r\n    }\r\n  }\r\n\r\n  // If released key is our target key then set to false\r\n  const upHandler = ({ key }) => {\r\n    if (key === targetKey) {\r\n      setKeyPressed(false);\r\n    }\r\n  };\r\n\r\n     // Add event listeners\r\n  useEffect(() => {\r\n    window.addEventListener('keydown', downHandler);\r\n    window.addEventListener('keyup', upHandler);\r\n    // Remove event listeners on cleanup\r\n    return () => {\r\n      window.removeEventListener('keydown', downHandler);\r\n      window.removeEventListener('keyup', upHandler);\r\n    };\r\n  }, []);\r\n\r\n  return keyPressed;\r\n}\r\n\r\nexport default useKeyPress","import { useEffect } from \"react\";\r\n\r\nconst useScroll = (callback) => {\r\n  const resizeHandler = (event) => \r\n    callback(event);\r\n  \r\n  // Add event listeners\r\n  useEffect(() => {\r\n    window.addEventListener(\"wheel\", resizeHandler);\r\n    // Remove event listeners on cleanup\r\n    return () => {\r\n      window.removeEventListener(\"wheel\", resizeHandler);\r\n    };\r\n  });\r\n};\r\n\r\nexport default useScroll;\r\n","import { useState, useEffect } from \"react\";\r\n\r\nexport default function useResize(){\r\n  const [windowSize, setWindowSize] = useState({\r\n    width: window.innerWidth,\r\n    height: window.innerHeight,\r\n  });\r\n\r\n  const resizeHandler = () => {\r\n    setWindowSize({\r\n      width: window.innerWidth,\r\n      height: window.innerHeight,\r\n    });\r\n  };\r\n\r\n  // Add event listeners\r\n  useEffect(() => {\r\n    window.addEventListener(\"resize\", resizeHandler);\r\n    // Remove event listeners on cleanup\r\n    return () => {\r\n      window.removeEventListener(\"resize\", resizeHandler);\r\n    };\r\n  }, []);\r\n\r\n  return windowSize;\r\n};\r\n","import React, { useEffect, useMemo, useCallback, useRef } from \"react\";\r\nimport { returnArray } from \"../../utils\";\r\nimport state from \"../../store\";\r\nimport { useSnapshot } from \"valtio\";\r\nimport { useKeyPress } from \"../../hooks\";\r\nimport {\r\n  GiDeathStar,\r\n  GiFlamingSheet,\r\n  GiFission,\r\n  GiSpaceship,\r\n} from \"react-icons/gi\";\r\nexport default function SpaceInvaders() {\r\n  const snap = useSnapshot(state);\r\n  const width = snap.spaceInvasion.width;\r\n  let alienIntervalId = useRef(),\r\n    dir = useRef(1),\r\n    gameTime = useRef(75),\r\n    squares = returnArray(snap.spaceInvasion.gridSize);\r\n  const mapAssets = (num) => {\r\n    if (snap.spaceInvasion.hits.includes(num)) {\r\n      return (\r\n        <div\r\n          className=\"inline-flex items-center justify-center w-[20px] h-[20px]\"\r\n          key={num}\r\n        >\r\n          <div className=\"boom w-[10px] h-[10px] text-amber-500 z-20\">\r\n            <GiFission />\r\n          </div>\r\n        </div>\r\n      );\r\n    }\r\n\r\n    if (snap.spaceInvasion.aliens.includes(snap.spaceInvasion.player)) {\r\n      return (\r\n        <div className=\"bg-gray-400 rounded-full w-[20px] h-[20px]\" key={num} />\r\n      );\r\n    }\r\n    if (snap.spaceInvasion.aliens.includes(num)) {\r\n      return (\r\n        <div\r\n          className=\"text-purple-600 rounded-full w-[20px] h-[20px]\"\r\n          key={num}\r\n        >\r\n          <GiDeathStar />\r\n        </div>\r\n      );\r\n    }\r\n    if (\r\n      snap.spaceInvasion.shots.includes(num) &&\r\n      snap.spaceInvasion.player === num\r\n    ) {\r\n      return (\r\n        <div\r\n          className=\"inline-flex items-center justify-center  text-gradO w-[20px] h-[20px] relative\"\r\n          key={num}\r\n        >\r\n          {\" \"}\r\n          <GiSpaceship />\r\n          <div className=\"rounder-full w-[10px] h-[10px] text-amber-400 rotate-[225deg] absolute bottom-full\">\r\n            <GiFlamingSheet className=\"w-full h-full\" />\r\n          </div>\r\n        </div>\r\n      );\r\n    }\r\n    if (snap.spaceInvasion.shots.includes(num)) {\r\n      return (\r\n        <div\r\n          className=\"inline-flex items-center justify-center w-[20px] h-[20px]\"\r\n          key={num}\r\n        >\r\n          <div className=\"rounder-full w-[10px] h-[10px] text-amber-500 rotate-[225deg]\">\r\n            <GiFlamingSheet className=\"w-full h-full\" />\r\n          </div>\r\n        </div>\r\n      );\r\n    }\r\n    if (snap.spaceInvasion.player === num) {\r\n      return (\r\n        <div className=\"w-[20px] h-[20px] text-gradO\" key={num}>\r\n          <GiSpaceship />\r\n        </div>\r\n      );\r\n    }\r\n    return <div className=\"w-[20px] h-[20px] \" key={num}></div>;\r\n  };\r\n  const leftArrow = useKeyPress(\"ArrowLeft\");\r\n  const rightArrow = useKeyPress(\"ArrowRight\");\r\n  const upArrow = useKeyPress(\"ArrowUp\");\r\n  const gameOver = useCallback(() => {\r\n    snap.spaceInvasion.aliens.length > 0\r\n      ? (state.spaceInvasion.status = false)\r\n      : (state.spaceInvasion.status = true);\r\n    state.spaceInvasion.gameOver = true;\r\n  }, [snap]);\r\n  useMemo(() => {\r\n    if (!snap.spaceInvasion.pause) {\r\n      leftArrow &&\r\n        (() => {\r\n          if (snap.spaceInvasion.player % width !== 0)\r\n            state.spaceInvasion.player = snap.spaceInvasion.player - 1;\r\n        })();\r\n      rightArrow &&\r\n        (() => {\r\n          if (snap.spaceInvasion.player % width < width - 1)\r\n            state.spaceInvasion.player = snap.spaceInvasion.player + 1;\r\n        })();\r\n      upArrow &&\r\n        (() => {\r\n          state.spaceInvasion.shots.push(snap.spaceInvasion.player);\r\n        })();\r\n    }\r\n\r\n    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n  }, [leftArrow, rightArrow, upArrow]);\r\n\r\n  const moveInvaders = useCallback(() => {\r\n    const leftBoundry = snap.spaceInvasion.aliens[0] % width === 0,\r\n      rightBoundry =\r\n        snap.spaceInvasion.aliens[snap.spaceInvasion.aliens.length - 1] %\r\n          width ===\r\n        width - 1;\r\n    if (!snap.spaceInvasion.pause) {\r\n      if (snap.spaceInvasion.aliens.length === 0) gameOver();\r\n      for (let i = 0; i < snap.spaceInvasion.aliens.length; i++) {\r\n        if (snap.spaceInvasion.aliens[i] > squares.length - width) {\r\n          console.log({ i }, snap.spaceInvasion.aliens[i], squares.length);\r\n          gameOver();\r\n          return;\r\n        }\r\n      }\r\n      if (rightBoundry && dir.current > 0) {\r\n        for (let i = 0; i < snap.spaceInvasion.aliens.length; i++) {\r\n          state.spaceInvasion.aliens[i] += width + 1;\r\n        }\r\n        dir.current = -1;\r\n      }\r\n      if (leftBoundry && dir.current < 0) {\r\n        for (let i = 0; i < snap.spaceInvasion.aliens.length; i++) {\r\n          state.spaceInvasion.aliens[i] += width - 1;\r\n        }\r\n        dir.current = 1;\r\n      }\r\n      for (let i = 0; i < snap.spaceInvasion.aliens.length; i++) {\r\n        state.spaceInvasion.aliens[i] += dir.current;\r\n      }\r\n      if (snap.spaceInvasion.aliens.includes(snap.spaceInvasion.player)) {\r\n        gameOver();\r\n        return;\r\n      }\r\n    }\r\n  }, [snap, dir, squares, gameOver, width]);\r\n  const moverShots = useCallback(() => {\r\n    if (!snap.spaceInvasion.pause) {\r\n      if (snap.spaceInvasion.shots.length > 0) {\r\n        for (let w = 0; w < snap.spaceInvasion.shots.length; w++) {\r\n          state.spaceInvasion.shots[w] -= width;\r\n          let position = snap.spaceInvasion.shots[w];\r\n          if (position < -width || isNaN(position)) {\r\n            state.spaceInvasion.shots = snap.spaceInvasion.shots.filter(\r\n              (num) => num > 0 && !isNaN(num) && num\r\n            );\r\n          }\r\n          if (snap.spaceInvasion.aliens.includes(position)) {\r\n            // state.spaceInvasion.pause = true;\r\n            state.spaceInvasion.hits.push(position);\r\n            state.spaceInvasion.aliens = snap.spaceInvasion.aliens.filter(\r\n              (num) => num !== position && num\r\n            );\r\n            state.spaceInvasion.shots = snap.spaceInvasion.shots.filter(\r\n              (num) => num !== position && num\r\n            );\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }, [snap, width]);\r\n\r\n  const playgame = useCallback(() => {\r\n    moveInvaders();\r\n    moverShots();\r\n  }, [moveInvaders, moverShots]);\r\n  useEffect(() => {\r\n    let loaded = true;\r\n    if (loaded && !snap.spaceInvasion.gameOver && !snap.spaceInvasion.pause) {\r\n      alienIntervalId.current = setInterval(playgame, gameTime.current);\r\n    }\r\n    return () => {\r\n      loaded = false;\r\n      clearInterval(alienIntervalId.current);\r\n    };\r\n  }, [playgame, gameTime, alienIntervalId, snap]);\r\n\r\n  return (\r\n    <div className=\"my-5 w-[300px] flex flex-wrap border-black relative\">\r\n      {squares.map(mapAssets)}\r\n    </div>\r\n  );\r\n}\r\n","import state from \"../../../store\";\r\nimport { useSnapshot } from \"valtio\";\r\nimport GlassButton from \"../../../components/GlassButton\";\r\nimport { ImArrowLeft, ImArrowRight } from \"react-icons/im\";\r\nimport { GiFlamingSheet } from \"react-icons/gi\";\r\nexport default function MobileButtons() {\r\n  const snap = useSnapshot(state);\r\n  return (\r\n    <section className=\"bg-white/5 rounded-xl relative flex\">\r\n      <GlassButton\r\n        onClick={() => {\r\n          if (snap.spaceInvasion.player % snap.spaceInvasion.width !== 0)\r\n            state.spaceInvasion.player = snap.spaceInvasion.player - 1;\r\n        }}\r\n      >\r\n        <span className=\"mobile_btn\">\r\n          <ImArrowLeft className=\"mobile_btn_icon\" />\r\n        </span>\r\n      </GlassButton>\r\n      <GlassButton\r\n        onClick={() => {\r\n          state.spaceInvasion.shots.push(snap.spaceInvasion.player);\r\n        }}\r\n      >\r\n        <span className=\"mobile_btn\">\r\n          <GiFlamingSheet className=\"mobile_btn_icon rotate-[225deg]\" />\r\n        </span>\r\n      </GlassButton>\r\n      <GlassButton\r\n        onClick={() => {\r\n          if (\r\n            snap.spaceInvasion.player % snap.spaceInvasion.width <\r\n            snap.spaceInvasion.width - 1\r\n          )\r\n            state.spaceInvasion.player = snap.spaceInvasion.player + 1;\r\n        }}\r\n      >\r\n        <span className=\"mobile_btn\">\r\n          <ImArrowRight className=\"mobile_btn_icon\" />\r\n        </span>\r\n      </GlassButton>\r\n    </section>\r\n  );\r\n}\r\n","export default function Header() {\r\n  return (\r\n    <h1 className=\"text-3xl lg:text-7xl Anuphan text-gradB relative\">\r\n      <span className=\"absolute -rotate-12 scale-150 bottom-full right-full translate-x-full\">\r\n        <span className=\"absolute inline-block -rotate-45 right-full top-5 lg:top-10\">\r\n          Spa\r\n        </span>\r\n        ce\r\n      </span>{\" \"}\r\n      <span className=\"Alfa\">Invaders</span>\r\n    </h1>\r\n  );\r\n}\r\n","import state from \"../../../store\";\r\nimport { useSnapshot } from \"valtio\";\r\nimport GlassButton from \"../../../components/GlassButton\";\r\nimport { transitionViewIfSupported } from \"../../../utils\";\r\nimport { useNavigate } from \"react-router-dom\";\r\nexport default function Nav() {\r\n  const snap = useSnapshot(state);\r\n  const navigate = useNavigate();\r\n  return (\r\n    \r\n    <section className=\"flex gap-2 justify-between w-full\">\r\n    <GlassButton\r\n      onClick={() => {\r\n        state.thought = !snap.thought;\r\n        state.spaceInvasion.pause = !snap.spaceInvasion.pause;\r\n      }}\r\n    >\r\n      {snap.spaceInvasion.pause ? \"Play\" : \"Pause\"}\r\n    </GlassButton>\r\n    <GlassButton\r\n      onClick={() => {\r\n        state.spaceInvasion.aliens = [...snap.spaceInvasion.aliens_start];\r\n        state.spaceInvasion.gameOver = false;\r\n        state.spaceInvasion.pause = true;\r\n        state.spaceInvasion.status = null;\r\n        state.spaceInvasion.hits = [];\r\n        state.spaceInvasion.shots = [];\r\n        state.spaceInvasion.player = state.spaceInvasion.player_start;\r\n      }}\r\n    >\r\n      Restart\r\n    </GlassButton>\r\n    <GlassButton\r\n      className=\"btn_glass_purple_parent\"\r\n      onClick={() => {\r\n        transitionViewIfSupported(navigate(-1));\r\n      }}\r\n    >\r\n      Back\r\n    </GlassButton>\r\n  </section>\r\n  );\r\n}\r\n","import React from \"react\";\r\nimport SpaceInvaders from \"./spaceInvaders\";\r\nimport MobileButtons from \"./assets/MobileButtons\";\r\nimport Header from \"./assets/Header\";\r\nimport Nav from \"./assets/Nav\";\r\nexport default function SpaceInvadersContainer() {\r\n  return (\r\n    <div className=\"space_invaders_container\">\r\n      <Header />\r\n      <Nav />\r\n      <SpaceInvaders />\r\n      <MobileButtons />\r\n    </div>\r\n  );\r\n}\r\n","import * as THREE from \"three\";\r\nimport React, { useLayoutEffect, useRef, useMemo } from \"react\";\r\nimport { extend, useFrame, useThree } from \"@react-three/fiber\";\r\nimport { ProgressiveLightMap } from \"three/examples/jsm/misc/ProgressiveLightMap\";\r\n\r\nextend({ ProgressiveLightMap });\r\n\r\nexport function LightMap({\r\n  children,\r\n  position = [60, 150, 100],\r\n  resolution = 1024,\r\n  intensity = 1,\r\n  ambient = 0.5,\r\n  radius = 40,\r\n  blend = 40,\r\n  lights = 10,\r\n}) {\r\n  const rGroup = useRef();\r\n  const rLightmap = useRef();\r\n  const gl = useThree((state) => state.gl);\r\n  const camera = useThree((state) => state.camera);\r\n  const dirLights = useMemo(\r\n    () =>\r\n      [...Array(lights)].map((_, i) => {\r\n        let dirLight = new THREE.DirectionalLight(0xffffff, intensity / lights);\r\n        dirLight.castShadow = true;\r\n        dirLight.shadow.camera.near = 100;\r\n        dirLight.shadow.camera.far = 5000;\r\n        dirLight.shadow.camera.right = dirLight.shadow.camera.top = 150;\r\n        dirLight.shadow.camera.left = dirLight.shadow.camera.bottom = -150;\r\n        dirLight.shadow.mapSize.width = dirLight.shadow.mapSize.height =\r\n          resolution / 2;\r\n        return dirLight;\r\n      }),\r\n    [intensity, lights, resolution]\r\n  );\r\n\r\n  useLayoutEffect(() => {\r\n    const lightmap = rLightmap.current;\r\n    const objects = [...dirLights];\r\n    rGroup.current.traverse((child) => child.isMesh && objects.push(child));\r\n    lightmap.addObjectsToLightMap(objects);\r\n    return () => {\r\n      lightmap.blurringPlane = null;\r\n      lightmap.lightMapContainers = [];\r\n      lightmap.compiled = false;\r\n      lightmap.scene.clear();\r\n    };\r\n  }, [children]);\r\n\r\n  useFrame(() => {\r\n    rLightmap.current.update(camera, blend, true);\r\n    for (let l = 0; l < dirLights.length; l++) {\r\n      if (Math.random() > ambient)\r\n        dirLights[l].position.set(\r\n          position[0] + Math.random() * radius,\r\n          position[1] + Math.random() * radius,\r\n          position[2] + Math.random() * radius\r\n        );\r\n      else {\r\n        let lambda = Math.acos(2 * Math.random() - 1) - Math.PI / 2.0;\r\n        let phi = 2 * Math.PI * Math.random();\r\n        dirLights[l].position.set(\r\n          Math.cos(lambda) * Math.cos(phi) * 300,\r\n          Math.abs(Math.cos(lambda) * Math.sin(phi) * 300),\r\n          Math.sin(lambda) * 300\r\n        );\r\n      }\r\n    }\r\n  });\r\n\r\n  return (\r\n    <>\r\n      <progressiveLightMap ref={rLightmap} args={[gl, resolution]} />\r\n      <group ref={rGroup}>{children}</group>\r\n    </>\r\n  );\r\n}\r\n","import * as THREE from \"three\";\r\nimport { extend } from \"@react-three/fiber\";\r\n\r\nclass RainMaterial extends THREE.ShaderMaterial {\r\n  constructor(texture) {\r\n    super({\r\n      vertexShader: `varying vec2 vUv;\r\n      void main() {\r\n        vUv = uv;\r\n        gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\r\n      }`,\r\n      fragmentShader: `\r\n      uniform vec3 u_resolution;\r\n      uniform float u_time;\r\n\r\n      #define TAU 6.28318530718\r\n      #define MAX_ITER 5\r\n\r\n      void mainImage( out vec4 fragColor, in vec2 fragCoord ) \r\n      {\r\n        float time = u_time * .5+23.0;\r\n        // uv should be the 0-1 uv of texture...\r\n      vec2 uv = fragCoord.xy / u_resolution.xy;\r\n        \r\n    #ifdef SHOW_TILING\r\n      vec2 p = mod(uv*TAU*2.0, TAU)-250.0;\r\n    #else\r\n        vec2 p = mod(uv*TAU, TAU)-250.0;\r\n    #endif\r\n      vec2 i = vec2(p);\r\n      float c = 1.0;\r\n      float inten = .005;\r\n    \r\n      for (int n = 0; n < MAX_ITER; n++) \r\n      {\r\n        float t = time * (1.0 - (3.5 / float(n+1)));\r\n        i = p + vec2(cos(t - i.x) + sin(t + i.y), sin(t - i.y) + cos(t + i.x));\r\n        c += 1.0/length(vec2(p.x / (sin(i.x+t)/inten),p.y / (cos(i.y+t)/inten)));\r\n      }\r\n      c /= float(MAX_ITER);\r\n      c = 1.17-pow(c, 1.4);\r\n      vec3 colour = vec3(pow(abs(c), 8.0));\r\n        colour = clamp(colour + vec3(0.0, 0.35, 0.5), 0.0, 1.0);\r\n    \r\n      #ifdef SHOW_TILING\r\n      // Flash tile borders...\r\n      vec2 pixel = 2.0 / u_resolution.xy;\r\n      uv *= 2.0;\r\n      float f = floor(mod(u_time*.5, 2.0)); \t// Flash value.\r\n      vec2 first = step(pixel, uv) * f;\t\t   \t// Rule out first screen pixels and flash.\r\n      uv  = step(fract(uv), pixel);\t\t\t\t// Add one line of pixels per tile.\r\n      colour = mix(colour, vec3(1.0, 1.0, 0.0), (uv.x + uv.y) * first.x * first.y); // Yellow line\r\n      #endif\r\n        \r\n      fragColor = vec4(colour, 1.0);\r\n      }\r\n    varying vec2 vUv;\r\n            void main() {\r\n                mainImage(gl_FragColor, vUv * u_resolution.xy);\r\n              }\r\n    \r\n        `,\r\n      uniforms: {\r\n        iChannel0: { value: texture },\r\n        u_time: { type: \"f\", value: 0.05 },\r\n        u_speed: { type: \"f\", value: performance.now() },\r\n        u_mouse: { type: \"f\", value: { x: 0, y: 0 } },\r\n        u_resolution: {\r\n          type: \"v2\",\r\n          value: new THREE.Vector2(window.innerWidth, window.innerWidth),\r\n        },\r\n      },\r\n      transparent: true,\r\n      blending: THREE.NormalBlending,\r\n      depthWrite: false,\r\n    });\r\n  }\r\n}\r\n\r\nextend({ RainMaterial });\r\n","import * as THREE from \"three\";\r\nimport { extend } from \"@react-three/fiber\";\r\n\r\nclass SquareShaderMaterial extends THREE.ShaderMaterial {\r\n  constructor(texture) {\r\n    super({\r\n      vertexShader: `varying vec2 vUv;\r\n      void main() {\r\n        vUv = uv;\r\n        gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\r\n      }`,\r\n      fragmentShader: `#include <common>\r\n\r\n      uniform vec3 u_resolution;\r\n      uniform float u_time;\r\n      uniform sampler2D iChannel0;\r\n    \r\n      // By Daedelus: https://www.shadertoy.com/user/Daedelus\r\n      // license: Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License.\r\n      #define TIMESCALE 0.25 \r\n      #define TILES 8\r\n      #define COLOR 0.7, 1.6, 2.8\r\n    \r\n      void mainImage( out vec4 fragColor, in vec2 fragCoord )\r\n      {\r\n        float aspect_ratio = u_resolution.y/u_resolution.x;\r\n        vec2 uv = fragCoord.xy / u_resolution.x;\r\n        uv -= vec2(0.5, 0.5 * aspect_ratio);\r\n        float rot = radians(-30. -u_time); // radians(45.0*sin(u_time));\r\n        mat2 rotation_matrix = mat2(cos(rot), -sin(rot), sin(rot), cos(rot));\r\n        uv = rotation_matrix * uv;\r\n        vec2 scaled_uv = 20.0 * uv; \r\n        vec2 tile = fract(scaled_uv);\r\n        float tile_dist = min(min(tile.x, 1.0-tile.x), min(tile.y, 1.0-tile.y));\r\n        float square_dist = length(floor(scaled_uv));\r\n        \r\n        float edge = sin(u_time-square_dist*20.);\r\n        edge = mod(edge * edge, edge / edge);\r\n\r\n        float value = mix(tile_dist, 1.0-tile_dist, step(1.0, edge));\r\n        edge = pow(abs(1.0-edge), 2.2) * 0.5;\r\n        \r\n        value = smoothstep( edge-0.05, edge, 0.95*value);\r\n        \r\n        \r\n        value += square_dist*.1;\r\n        value *= 0.8 - 0.2;\r\n        fragColor = vec4(pow(value, 2.), pow(value, 1.5), pow(value, 1.2), 1.);\r\n      }\r\n    \r\n      varying vec2 vUv;\r\n    \r\n      void main() {\r\n        mainImage(gl_FragColor, vUv * u_resolution.xy);\r\n      }\r\n      `,\r\n      uniforms: {\r\n        iChannel0: { value: texture },\r\n        u_time: { type: \"f\", value: 0.05 },\r\n        u_speed: { type: \"f\", value: performance.now() },\r\n        u_mouse: { type: \"f\", value: { x: 0, y: 0 } },\r\n        u_resolution: {\r\n          type: \"v2\",\r\n          value: new THREE.Vector2(window.innerWidth, window.innerWidth),\r\n        },\r\n      },\r\n      transparent: true,\r\n      blending: THREE.NormalBlending,\r\n      depthWrite: false,\r\n    });\r\n  }\r\n}\r\n\r\nextend({  SquareShaderMaterial });\r\n","import * as THREE from \"three\";\r\nimport { extend } from \"@react-three/fiber\";\r\n\r\nclass SquarePatternShaderMaterial extends THREE.ShaderMaterial {\r\n  constructor(texture) {\r\n    super({\r\n      vertexShader: `varying vec2 vUv;\r\n      void main() {\r\n        vUv = uv;\r\n        gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\r\n      }`,\r\n      fragmentShader: `#include <common>\r\n\r\n      uniform vec3 u_resolution;\r\n      uniform float u_time;\r\n      uniform sampler2D iChannel0;\r\n    \r\n      // By Daedelus: https://www.shadertoy.com/user/Daedelus\r\n      // license: Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License.\r\n      #define TIMESCALE 0.25 \r\n      #define TILES 8\r\n      #define COLOR 0.7, 1.6, 2.8\r\n    \r\n      void mainImage( out vec4 fragColor, in vec2 fragCoord )\r\n      {\r\n        float aspect = u_resolution.y/u_resolution.x;\r\n    float value;\r\n\tvec2 uv = fragCoord.xy / u_resolution.x;\r\n    uv -= vec2(0.5, 0.5*aspect);\r\n    float rot = radians(45.0); // radians(45.0*sin(u_time));\r\n    mat2 m = mat2(cos(rot), -sin(rot), sin(rot), cos(rot));\r\n   \tuv  = m * uv;\r\n    uv += vec2(0.5, 0.5*aspect);\r\n    uv.y+=0.5*(1.0-aspect);\r\n    vec2 pos = 10.0*uv;\r\n    vec2 rep = fract(pos);\r\n    float dist = 2.0*min(min(rep.x, 1.0-rep.x), min(rep.y, 1.0-rep.y));\r\n    float squareDist = length((floor(pos)+vec2(0.5)) - vec2(5.0) );\r\n    \r\n    float edge = sin(u_time-squareDist*0.5)*0.5+0.5;\r\n    \r\n    edge = (u_time-squareDist*0.5)*0.5;\r\n    edge = 2.0*fract(edge*0.5);\r\n    //value = 2.0*abs(dist-0.5);\r\n    //value = pow(dist, 2.0);\r\n    value = fract (dist*2.0);\r\n    value = mix(value, 1.0-value, step(1.0, edge));\r\n    //value *= 1.0-0.5*edge;\r\n    edge = pow(abs(1.0-edge), 2.0);\r\n    \r\n    //edge = abs(1.0-edge);\r\n    value = smoothstep( edge-0.05, edge, 0.95*value);\r\n    \r\n    \r\n    value += squareDist*.1;\r\n    //fragColor = vec4(value);\r\n    fragColor = mix(vec4(1.0,1.0,1.0,1.0),vec4(1.0,0.25,0.25,1.0), value);\r\n    fragColor.a = 0.25*clamp(value, 0.0, 1.0);\r\n      }\r\n    \r\n      varying vec2 vUv;\r\n    \r\n      void main() {\r\n        mainImage(gl_FragColor, vUv * u_resolution.xy);\r\n      }\r\n      `,\r\n      uniforms: {\r\n        iChannel0: { value: texture },\r\n        u_time: { type: \"f\", value: 0.05 },\r\n        u_speed: { type: \"f\", value: performance.now() },\r\n        u_mouse: { type: \"f\", value: { x: 0, y: 0 } },\r\n        u_resolution: {\r\n          type: \"v2\",\r\n          value: new THREE.Vector2(window.innerWidth, window.innerWidth),\r\n        },\r\n      },\r\n      transparent: true,\r\n      blending: THREE.NormalBlending,\r\n      depthWrite: false,\r\n    });\r\n  }\r\n}\r\n\r\nextend({ SquarePatternShaderMaterial });\r\n","\r\nimport * as THREE from \"three\";\r\nimport { extend } from \"@react-three/fiber\";\r\nimport { SimpleShader } from \"./FireShader\";\r\nclass CloudShaderMaterial extends THREE.ShaderMaterial {\r\n  constructor(texture) {\r\n    super({\r\n\t\t...SimpleShader\r\n      ,\r\n      uniforms: {\r\n        iChannel0: { value: texture },\r\n        iChannel1: { value: texture },\r\n        u_time: { type: \"f\", value: 0.05 },\r\n        u_speed: { type: \"f\", value: performance.now() },\r\n        u_mouse: { type: \"f\", value: { x: 0, y: 0 } },\r\n        u_resolution: {\r\n          type: \"v2\",\r\n          value: new THREE.Vector2(window.innerWidth, window.innerWidth),\r\n        },\r\n      },\r\n      transparent: true,\r\n      blending: THREE.NormalBlending,\r\n      depthWrite: false,\r\n    });\r\n  }\r\n}\r\n\r\nextend({  CloudShaderMaterial });\r\n","/*\r\nAuto-generated by: https://github.com/pmndrs/gltfjsx\r\n*/\r\n\r\nimport React, { useRef, useMemo } from \"react\";\r\nimport { useFrame } from \"@react-three/fiber\";\r\nimport { useGLTF } from \"@react-three/drei\";\r\nimport FormatTexture from \"../hooks/FormatTexture\";\r\nimport \"../shaders/RainShader\";\r\nimport \"../shaders/squaresShader\";\r\nimport \"../shaders/squaresPatternShader\";\r\nimport \"../shaders/CloudyTunnelShaderMaterial\";\r\n\r\nconst URL = `/assets/obj/ufo.gltf?${Math.random() * 100}`;\r\n\r\nexport default function Ufo({ animate, ...props }) {\r\n  const group = useRef();\r\n  const animateRefs = [useRef()];\r\n  const simRef = [useRef(), useRef(), useRef(), useRef()];\r\n  const { nodes } = useGLTF(URL);\r\n  const imageTexture = FormatTexture(\"/assets/img/c_space.jpg\");\r\n  const AnimateFrame = ({ meshRef }) => {\r\n    useFrame(({ clock }, delta) => {\r\n      if (meshRef?.current) {\r\n        animate({ meshRef, clock, delta });\r\n      }\r\n\r\n      if (simRef.length > 0) {\r\n        simRef.forEach(\r\n          (ref) =>\r\n            ref.current &&\r\n            (ref.current.uniforms.u_time.value = clock.elapsedTime)\r\n        );\r\n      }\r\n      if (animateRefs.length > 0) {\r\n        animateRefs.forEach((ref) => {\r\n          if (ref.current) {\r\n            ref.current.rotation.y -= 0.01351;\r\n            // console.log(ref)\r\n          }\r\n        });\r\n      }\r\n    });\r\n    return null;\r\n  };\r\n  return (\r\n    <group ref={group} {...props} dispose={null}>\r\n      {animate && <AnimateFrame meshRef={group} />}\r\n      <mesh\r\n        castShadow\r\n        receiveShadow\r\n        geometry={nodes.dome.geometry}\r\n        material={nodes.dome.material}\r\n      >\r\n        <rainMaterial\r\n          ref={simRef[0]}\r\n          texture={imageTexture}\r\n          attach=\"material\"\r\n        />\r\n      </mesh>\r\n      <mesh\r\n        castShadow\r\n        receiveShadow\r\n        geometry={nodes.ring.geometry}\r\n        material={nodes.ring.material}\r\n      >\r\n        <squareShaderMaterial\r\n          ref={simRef[1]}\r\n          texture={imageTexture}\r\n          attach=\"material\"\r\n        />\r\n      </mesh>\r\n      <mesh\r\n        ref={animateRefs[0]}\r\n        castShadow\r\n        receiveShadow\r\n        geometry={nodes.lights.geometry}\r\n        material={nodes.lights.material}\r\n      >\r\n        <rainMaterial\r\n          ref={simRef[2]}\r\n          texture={imageTexture}\r\n          attach=\"material\"\r\n        />\r\n      </mesh>\r\n      <mesh\r\n        castShadow\r\n        receiveShadow\r\n        geometry={nodes.base.geometry}\r\n        material={nodes.base.material}\r\n      >\r\n        <squareShaderMaterial\r\n          ref={simRef[3]}\r\n          texture={imageTexture}\r\n          attach=\"material\"\r\n        />\r\n      </mesh>\r\n    </group>\r\n  );\r\n}\r\n\r\nuseGLTF.preload(URL);\r\n","import React, { Suspense, useMemo } from \"react\";\r\nimport { Loader, CameraShake, Stars } from \"@react-three/drei\";\r\nimport { useSpring, animated } from \"@react-spring/three\";\r\nimport { Canvas } from \"@react-three/fiber\";\r\nimport { space } from \"../utils\";\r\nimport { TextureOptions } from \"../hooks\";\r\nimport { LightMap } from \"../three/LightMap\";\r\nimport * as THREE from \"three\";\r\nimport Ufo from \"../three/Ufo\";\r\nimport state from \"../store\";\r\nimport { useSnapshot } from \"valtio\";\r\nimport Planet from \"../three/planet\";\r\nimport CreateText from \"../three/CreateText\";\r\nimport { useResize } from \"../hooks\";\r\nexport default function SpaceInvadersCanvas() {\r\n  const snap = useSnapshot(state);\r\n  const props = {\r\n    intensity: 5,\r\n    ambient: 3,\r\n    radius: 0,\r\n    blend: 200,\r\n  };\r\n  const { width } = useResize();\r\n  const isMobile = useMemo(() => width > \"1440\", [width]);\r\n  const springs = useSpring({\r\n    won:\r\n      snap.spaceInvasion.status && snap.spaceInvasion.gameOver\r\n        ? [space(-1.5), space(0.5), 0]\r\n        : [-space(0.5), space(10), space(1)],\r\n    lost:\r\n      !snap.spaceInvasion.status && snap.spaceInvasion.gameOver\r\n        ? [space(-1.5), space(0.5), 0]\r\n        : [-space(0.5), -space(10), space(1)],\r\n    ufo: isMobile\r\n      ? [-space(2), space(0.05), space(-0)]\r\n      : [-space(0), -space(0), space(0)],\r\n  });\r\n  const textOptions = {\r\n    fontSize: !isMobile ? 0.2 : 1,\r\n    fontHeight: !isMobile ? 0.1 : 0.3,\r\n    position:!isMobile ?[space(1.2), space(.4), 0] : [space(3), 0, space(-2.8)],\r\n    rotation:!isMobile ? [0, 0, 0]: [space(0), space(-.4), 0],\r\n    color: \"#fff\",\r\n  };\r\n  return (\r\n      <Suspense fallback={<Loader />}>\r\n        <Canvas\r\n          className=\"relative z-20 moon\"\r\n          performance={{ min: 0.5 }}\r\n          onCreated={({ gl }) => {\r\n            gl.toneMapping = THREE.CineonToneMapping;\r\n            gl.setClearColor(new THREE.Color(\"#020207\"));\r\n          }}\r\n          dpr={[1, 1.5]}\r\n          gl={{ alpha: true }}\r\n          flat\r\n          linear\r\n          shadows\r\n        >\r\n          <fog color=\"lightgray\" attach=\"fog\" near={4} far={800} />\r\n          <LightMap {...props}>\r\n            <Stars />\r\n            <animated.group position={springs.ufo}>\r\n              <Ufo\r\n                position={[0, 0, 0]}\r\n                rotation={[space(-0.3), space(0), space(0)]}\r\n                animate={({ meshRef, clock, delta }) => {\r\n                  meshRef.current.rotation.y += 0.01351;\r\n                  meshRef.current.rotation.x =\r\n                    Math.sin(performance.now() * 0.00045) * 0.1;\r\n                  meshRef.current.rotation.z =\r\n                    Math.cos(performance.now() * 0.00045) * 0.1;\r\n                }}\r\n              />\r\n            </animated.group>\r\n\r\n            <Planet\r\n              bumpScale={0.3}\r\n              args={[10, 10, 96]}\r\n              position={[0, space(8), space(-20)]}\r\n              {...TextureOptions(\"textures/earth\")}\r\n              animate={({ meshRef, delta, clock }) => {\r\n                if (meshRef?.current) {\r\n                  meshRef.current.rotation.set(\r\n                    0,\r\n                    space(clock.oldTime / 90000),\r\n                    0\r\n                  );\r\n                }\r\n              }}\r\n            />\r\n            {snap.spaceInvasion.status && snap.spaceInvasion.gameOver && (\r\n              <animated.group position={springs.won}>\r\n                <CreateText textstring=\"You Won\" {...textOptions} />\r\n              </animated.group>\r\n            )}\r\n            {!snap.spaceInvasion.status && snap.spaceInvasion.gameOver && (\r\n              <animated.group position={springs.lost}>\r\n                <CreateText textstring=\"You Lose\" {...textOptions} />\r\n              </animated.group>\r\n            )}\r\n            {!snap.thought && (\r\n              <CameraShake\r\n                maxYaw={0.01}\r\n                maxPitch={0.1}\r\n                maxRoll={0.1}\r\n                yawFrequency={0.05}\r\n                pitchFrequency={0.05}\r\n                rollFrequency={0.04}\r\n              />\r\n            )}\r\n          </LightMap>\r\n        </Canvas>\r\n      </Suspense>\r\n  );\r\n}\r\n","import SpaceInvadersContainer from \"../gmaes/spaceInvaders\";\r\nimport SpaceInvadersCanvas from \"../gmaes/spaceInvadersCanvas\";\r\nexport default function Abduction() {\r\n  return (\r\n    <div className=\"moon bg-white fixed flex items-center justify-center w-screen h-screen top-0 left-0 z-20\">\r\n      <SpaceInvadersContainer />\r\n      <SpaceInvadersCanvas />\r\n    </div>\r\n  );\r\n}\r\n","import React, { useRef } from \"react\";\r\nimport { useFrame } from \"@react-three/fiber\";\r\nimport { DoubleSide } from \"three\";\r\nimport FormatTexture from \"../hooks/FormatTexture\";\r\nconst Planet = ({\r\n  heightMapSrc,\r\n  AO,\r\n  bumpScale,\r\n  smokeScale,\r\n  textureMapSrc,\r\n  normalMapSrc,\r\n  smoothMapSrc,\r\n  metallicMapSrc,\r\n  edgeMapSrc,\r\n  args,\r\n  animate,\r\n  ...props\r\n}) => {\r\n  // not sure where to add this map will do rnd\r\n  // const smoothMap = FormatTexture(smoothMapSrc);\r\n\r\n  const heightMap = FormatTexture(heightMapSrc);\r\n  const AoTextureMap = FormatTexture(AO);\r\n  const textureMap = FormatTexture(textureMapSrc);\r\n  const normalMap = FormatTexture(normalMapSrc);\r\n  const metallicMap = FormatTexture(metallicMapSrc);\r\n  const edgeMap = FormatTexture(edgeMapSrc);\r\n  const TerrainMaterialRef = useRef();\r\n  const AnimateFrame = ({ meshRef }) => {\r\n    useFrame(({ clock }, delta) => {\r\n      animate({ meshRef, clock, delta });\r\n    });\r\n  };\r\n  return (\r\n    <group {...props}>\r\n      {animate && <AnimateFrame meshRef={TerrainMaterialRef} />}\r\n      <mesh ref={TerrainMaterialRef} transparent={true}>\r\n        <sphereGeometry\r\n          attach=\"geometry\"\r\n          args={args}\r\n          receiveShadow\r\n          transparent={true}\r\n        />\r\n        <meshPhongMaterial\r\n          bumpScale={bumpScale}\r\n          attach=\"material\"\r\n          map={textureMap}\r\n          aoMap={AoTextureMap}\r\n          bumpMap={heightMap}\r\n          lightMap={edgeMap}\r\n          metalnessMap={metallicMap}\r\n          normalMap={normalMap}\r\n          side={DoubleSide}\r\n        />\r\n      </mesh>\r\n    </group>\r\n  );\r\n};\r\nexport default Planet\r\n;\r\n"],"names":["GlassButton","_ref","children","props","_objectWithoutProperties","_excluded","_jsx","_objectSpread","className","targetKey","_useState","useState","_useState2","_slicedToArray","keyPressed","setKeyPressed","downHandler","key","upHandler","_ref2","useEffect","window","addEventListener","removeEventListener","callback","resizeHandler","event","useResize","width","innerWidth","height","innerHeight","windowSize","setWindowSize","SpaceInvaders","snap","useSnapshot","state","spaceInvasion","alienIntervalId","useRef","dir","gameTime","squares","returnArray","gridSize","leftArrow","useKeyPress","rightArrow","upArrow","gameOver","useCallback","aliens","length","useMemo","pause","player","moveInvaders","leftBoundry","rightBoundry","i","console","log","current","includes","moverShots","shots","_loop","w","position","isNaN","filter","num","playgame","loaded","setInterval","clearInterval","map","hits","GiFission","GiDeathStar","_jsxs","GiSpaceship","GiFlamingSheet","MobileButtons","onClick","ImArrowLeft","ImArrowRight","Header","Nav","navigate","useNavigate","thought","_toConsumableArray","aliens_start","transitionViewIfSupported","SpaceInvadersContainer","LightMap","_ref$position","_ref$resolution","resolution","_ref$intensity","intensity","_ref$ambient","ambient","_ref$radius","radius","_ref$blend","blend","_ref$lights","lights","rGroup","rLightmap","gl","useThree","camera","dirLights","Array","_","dirLight","THREE","castShadow","shadow","near","far","right","top","left","bottom","mapSize","useLayoutEffect","lightmap","objects","traverse","child","isMesh","push","addObjectsToLightMap","blurringPlane","lightMapContainers","compiled","scene","clear","useFrame","update","l","Math","random","set","lambda","acos","PI","phi","cos","abs","sin","_Fragment","ref","args","extend","ProgressiveLightMap","RainMaterial","_THREE$ShaderMaterial","_inherits","_super","_createSuper","texture","_classCallCheck","call","vertexShader","fragmentShader","uniforms","iChannel0","value","u_time","type","u_speed","performance","now","u_mouse","x","y","u_resolution","transparent","blending","depthWrite","_createClass","SquareShaderMaterial","SquarePatternShaderMaterial","CloudShaderMaterial","SimpleShader","iChannel1","URL","concat","Ufo","animate","group","animateRefs","simRef","nodes","useGLTF","imageTexture","FormatTexture","AnimateFrame","meshRef","_ref3","delta","clock","forEach","elapsedTime","rotation","dispose","receiveShadow","geometry","dome","material","attach","ring","base","SpaceInvadersCanvas","isMobile","springs","useSpring","won","status","space","lost","ufo","textOptions","fontSize","fontHeight","color","Suspense","fallback","Loader","Canvas","min","onCreated","toneMapping","setClearColor","dpr","alpha","flat","linear","shadows","Stars","animated","z","Planet","bumpScale","TextureOptions","oldTime","CreateText","textstring","CameraShake","maxYaw","maxPitch","maxRoll","yawFrequency","pitchFrequency","rollFrequency","Abduction","heightMapSrc","AO","textureMapSrc","smokeScale","normalMapSrc","metallicMapSrc","smoothMapSrc","edgeMapSrc","heightMap","AoTextureMap","textureMap","normalMap","metallicMap","edgeMap","TerrainMaterialRef","aoMap","bumpMap","lightMap","metalnessMap","side","DoubleSide"],"sourceRoot":""}