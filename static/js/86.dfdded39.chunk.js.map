{"version":3,"file":"static/js/86.dfdded39.chunk.js","mappings":"kKAEe,SAASA,IACtB,IAAAC,GAAoCC,EAAAA,EAAAA,UAAS,CAC3CC,MAAOC,OAAOC,WACdC,OAAQF,OAAOG,cACfC,GAAAC,EAAAA,EAAAA,GAAAR,EAAA,GAHKS,EAAUF,EAAA,GAAEG,EAAaH,EAAA,GAK1BI,EAAgB,WACpBD,EAAc,CACZR,MAAOC,OAAOC,WACdC,OAAQF,OAAOG,aAEnB,EAWA,OARAM,EAAAA,EAAAA,YAAU,WAGR,OAFAT,OAAOU,iBAAiB,SAAUF,GAE3B,WACLR,OAAOW,oBAAoB,SAAUH,EACvC,CACF,GAAG,IAEIF,CACT,C,uHCvBaM,EAAe,CACxBC,eAAe,2rNAkOfC,aAAa,6J,iDC1NF,SAASC,IACtB,IAAAC,GAA0BpB,EAAAA,EAAAA,KAAlBG,EAAKiB,EAALjB,MAAOG,EAAMc,EAANd,OAEf,OACEe,EAAAA,EAAAA,KAACC,EAAAA,SAAQ,CAACC,UAAUF,EAAAA,EAAAA,KAACG,EAAAA,EAAM,IAAIC,UAC7BJ,EAAAA,EAAAA,KAACK,EAAAA,EAAa,CAACC,SAAU,IAAKF,UAC5BJ,EAAAA,EAAAA,KAACO,EAAAA,GAAM,CAACC,YAAa,CAAEC,IAAK,IAAOC,IAAE,EAACC,MAAI,EAACC,QAAM,EAACC,SAAO,EAAAT,UACvDJ,EAAAA,EAAAA,KAACc,EAAAA,GAAcC,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAA,CACbC,SAAU,CAAC,GAAGC,EAAAA,EAAAA,IAAM,IAAIA,EAAAA,EAAAA,KAAO,KAC/BC,SAAU,CAAC,EAAG,EAAG,GACjBC,WAAY,CAACrC,EAAOG,GACpBmC,KAAM,CAACtC,EAAOG,EAAQ,GAAI,IAC1BoC,MAAO,QACPC,OAXa3B,IAYT4B,EAAAA,EAAAA,GAAe,mBAAiB,IACpCC,YAAU,UAMtB,C","sources":["hooks/useResize.js","shaders/HeartfeltShader.js","pages/checker_background.js"],"sourcesContent":["import { useState, useEffect } from \"react\";\r\n\r\nexport default function useResize(){\r\n  const [windowSize, setWindowSize] = useState({\r\n    width: window.innerWidth,\r\n    height: window.innerHeight,\r\n  });\r\n\r\n  const resizeHandler = () => {\r\n    setWindowSize({\r\n      width: window.innerWidth,\r\n      height: window.innerHeight,\r\n    });\r\n  };\r\n\r\n  // Add event listeners\r\n  useEffect(() => {\r\n    window.addEventListener(\"resize\", resizeHandler);\r\n    // Remove event listeners on cleanup\r\n    return () => {\r\n      window.removeEventListener(\"resize\", resizeHandler);\r\n    };\r\n  }, []);\r\n\r\n  return windowSize;\r\n};\r\n","\r\n\r\nexport const SimpleShader = {\r\n    fragmentShader: `\r\n    #include <common>\r\n\r\n  uniform vec3 u_resolution;\r\n  uniform float u_time;\r\n  uniform vec3 u_mouse;\r\n  uniform sampler2D iChannel0;\r\n        // Heartfelt - by Martijn Steinrucken aka BigWings - 2017\r\n// Email:countfrolic@gmail.com Twitter:@The_ArtOfCode\r\n// License Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License.\r\n\r\n// I revisited the rain effect I did for another shader. This one is better in multiple ways:\r\n// 1. The glass gets foggy.\r\n// 2. Drops cut trails in the fog on the glass.\r\n// 3. The amount of rain is adjustable (with Mouse.y)\r\n\r\n// To have full control over the rain, uncomment the HAS_HEART define \r\n\r\n// A video of the effect can be found here:\r\n// https://www.youtube.com/watch?v=uiF5Tlw22PI&feature=youtu.be\r\n\r\n// Music - Alone In The Dark - Vadim Kiselev\r\n// https://soundcloud.com/ahmed-gado-1/sad-piano-alone-in-the-dark\r\n// Rain sounds:\r\n// https://soundcloud.com/elirtmusic/sleeping-sound-rain-and-thunder-1-hours\r\n\r\n#define S(a, b, t) smoothstep(a, b, t)\r\n#define CHEAP_NORMALS\r\n#define HAS_HEART\r\n#define USE_POST_PROCESSING\r\n\r\nvec3 N13(float p) {\r\n    //  from DAVE HOSKINS\r\n   vec3 p3 = fract(vec3(p) * vec3(.1031,.11369,.13787));\r\n   p3 += dot(p3, p3.yzx + 19.19);\r\n   return fract(vec3((p3.x + p3.y)*p3.z, (p3.x+p3.z)*p3.y, (p3.y+p3.z)*p3.x));\r\n}\r\n\r\nvec4 N14(float t) {\r\n\treturn fract(sin(t*vec4(123., 1024., 1456., 264.))*vec4(6547., 345., 8799., 1564.));\r\n}\r\nfloat N(float t) {\r\n    return fract(sin(t*12345.564)*7658.76);\r\n}\r\n\r\nfloat Saw(float b, float t) {\r\n\treturn S(0., b, t)*S(1., b, t);\r\n}\r\n\r\n\r\nvec2 DropLayer2(vec2 uv, float t) {\r\n    vec2 UV = uv;\r\n    \r\n    uv.y += t*0.75;\r\n    vec2 a = vec2(6., 1.);\r\n    vec2 grid = a*2.;\r\n    vec2 id = floor(uv*grid);\r\n    \r\n    float colShift = N(id.x); \r\n    uv.y += colShift;\r\n    \r\n    id = floor(uv*grid);\r\n    vec3 n = N13(id.x*35.2+id.y*2376.1);\r\n    vec2 st = fract(uv*grid)-vec2(.5, 0);\r\n    \r\n    float x = n.x-.5;\r\n    \r\n    float y = UV.y*20.;\r\n    float wiggle = sin(y+sin(y));\r\n    x += wiggle*(.5-abs(x))*(n.z-.5);\r\n    x *= .7;\r\n    float ti = fract(t+n.z);\r\n    y = (Saw(.85, ti)-.5)*.9+.5;\r\n    vec2 p = vec2(x, y);\r\n    \r\n    float d = length((st-p)*a.yx);\r\n    \r\n    float mainDrop = S(.4, .0, d);\r\n    \r\n    float r = sqrt(S(1., y, st.y));\r\n    float cd = abs(st.x-x);\r\n    float trail = S(.23*r, .15*r*r, cd);\r\n    float trailFront = S(-.02, .02, st.y-y);\r\n    trail *= trailFront*r*r;\r\n    \r\n    y = UV.y;\r\n    float trail2 = S(.2*r, .0, cd);\r\n    float droplets = max(0., (sin(y*(1.-y)*120.)-st.y))*trail2*trailFront*n.z;\r\n    y = fract(y*10.)+(st.y-.5);\r\n    float dd = length(st-vec2(x, y));\r\n    droplets = S(.3, 0., dd);\r\n    float m = mainDrop+droplets*r*trailFront;\r\n    \r\n    //m += st.x>a.y*.45 || st.y>a.x*.165 ? 1.2 : 0.;\r\n    return vec2(m, trail);\r\n}\r\n\r\nfloat StaticDrops(vec2 uv, float t) {\r\n\tuv *= 40.;\r\n    \r\n    vec2 id = floor(uv);\r\n    uv = fract(uv)-.5;\r\n    vec3 n = N13(id.x*107.45+id.y*3543.654);\r\n    vec2 p = (n.xy-.5)*.7;\r\n    float d = length(uv-p);\r\n    \r\n    float fade = Saw(.025, fract(t+n.z));\r\n    float c = S(.3, 0., d)*fract(n.z*10.)*fade;\r\n    return c;\r\n}\r\n\r\nvec2 Drops(vec2 uv, float t, float l0, float l1, float l2) {\r\n    float s = StaticDrops(uv, t)*l0; \r\n    vec2 m1 = DropLayer2(uv, t)*l1;\r\n    vec2 m2 = DropLayer2(uv*1.85, t)*l2;\r\n    \r\n    float c = s+m1.x+m2.x;\r\n    c = S(.3, 1., c);\r\n    \r\n    return vec2(c, max(m1.y*l0, m2.y*l1));\r\n}\r\n\r\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\r\n{\r\n\tvec2 uv = (fragCoord.xy-.5*u_resolution.xy) / u_resolution.y;\r\n    vec2 UV = fragCoord.xy/u_resolution.xy;\r\n    vec3 M = u_mouse.xyz/u_resolution.xyz;\r\n    float T = u_time+M.x*2.;\r\n    \r\n    #ifdef HAS_HEART\r\n    T = mod(u_time, 102.);\r\n    T = mix(T, M.x*102., M.z>0.?1.:0.);\r\n    #endif\r\n    \r\n    \r\n    float t = T*.2;\r\n    \r\n    float rainAmount = u_mouse.z>0. ? M.y : sin(T*.05)*.3+.7;\r\n    \r\n    float maxBlur = mix(3., 6., rainAmount);\r\n    float minBlur = 2.;\r\n    \r\n    float story = 0.;\r\n    float heart = 0.;\r\n    \r\n    #ifdef HAS_HEART\r\n    story = S(0., 70., T);\r\n    \r\n    t = min(1., T/70.);\t\t\t\t\t\t// remap drop time so it goes slower when it freezes\r\n    t = 1.-t;\r\n    t = (1.-t*t)*70.;\r\n    \r\n    float zoom= mix(.3, 1.2, story);\t\t// slowly zoom out\r\n    uv *=zoom;\r\n    minBlur = 4.+S(.5, 1., story)*3.;\t\t// more opaque glass towards the end\r\n    maxBlur = 6.+S(.5, 1., story)*1.5;\r\n    \r\n    vec2 hv = uv-vec2(.0, -.1);\t\t\t\t// build heart\r\n    hv.x *= .5;\r\n    float s = S(110., 70., T);\t\t\t\t// heart gets smaller and fades towards the end\r\n    hv.y-=sqrt(abs(hv.x))*.5*s;\r\n    heart = length(hv);\r\n    heart = S(.4*s, .2*s, heart)*s;\r\n    rainAmount = heart;\t\t\t\t\t\t// the rain is where the heart is\r\n    \r\n    maxBlur-=heart;\t\t\t\t\t\t\t// inside the heart slighly less foggy\r\n    uv *= 1.5;\t\t\t\t\t\t\t\t// zoom out a bit more\r\n    t *= .25;\r\n    #else\r\n    float zoom = -cos(T*.2);\r\n    uv *= .7+zoom*.3;\r\n    #endif\r\n    UV = (UV-.5)*(.9+zoom*.1)+.5;\r\n    \r\n    float staticDrops = S(-.5, 1., rainAmount)*2.;\r\n    float layer1 = S(.25, .75, rainAmount);\r\n    float layer2 = S(.0, .5, rainAmount);\r\n    \r\n    \r\n    vec2 c = Drops(uv, t, staticDrops, layer1, layer2);\r\n   #ifdef CHEAP_NORMALS\r\n    \tvec2 n = vec2(dFdx(c.x), dFdy(c.x));// cheap normals (3x cheaper, but 2 times shittier ;))\r\n    #else\r\n    \tvec2 e = vec2(.001, 0.);\r\n    \tfloat cx = Drops(uv+e, t, staticDrops, layer1, layer2).x;\r\n    \tfloat cy = Drops(uv+e.yx, t, staticDrops, layer1, layer2).x;\r\n    \tvec2 n = vec2(cx-c.x, cy-c.x);\t\t// expensive normals\r\n    #endif\r\n    \r\n    \r\n    #ifdef HAS_HEART\r\n    n *= 1.-S(60., 85., T);\r\n    c.y *= 1.-S(80., 100., T)*.8;\r\n    #endif\r\n    \r\n    float focus = mix(maxBlur-c.y, minBlur, S(.1, .2, c.x));\r\n    vec3 col = textureLod(iChannel0, UV+n, focus).rgb;\r\n    \r\n    \r\n    #ifdef USE_POST_PROCESSING\r\n    t = (T+3.)*.5;\t\t\t\t\t\t\t\t\t\t// make time sync with first lightnoing\r\n    float colFade = sin(t*.2)*.5+.5+story;\r\n    col *= mix(vec3(1.), vec3(.8, .9, 1.3), colFade);\t// subtle color shift\r\n    float fade = S(0., 10., T);\t\t\t\t\t\t\t// fade in at the start\r\n    // float lightning = sin(t*sin(t*10.));\t\t\t\t// lighting flicker\r\n    // lightning *= pow(max(0., sin(t+sin(t))), 10.);\t\t// lightning flash\r\n    // col *= 1.+lightning*fade*mix(1., .1, story*story);\t// composite lightning\r\n    col *= 1.-dot(UV-=.5, UV);\t\t\t\t\t\t\t// vignette\r\n    \t\t\t\t\t\t\t\t\t\t\t\r\n    #ifdef HAS_HEART\r\n    \tcol = mix(pow(col, vec3(1.2)), col, heart);\r\n    \tfade *= S(102., 97., T);\r\n    #endif\r\n    \r\n    col *= fade;\t\t\t\t\t\t\t\t\t\t// composite start and end fade\r\n    #endif\r\n    \r\n    //col = vec3(heart);\r\n    fragColor = vec4(col, 1.);\r\n}\r\nvarying vec2 vUv;\r\n        void main() {\r\n            mainImage(gl_FragColor, vUv * u_resolution.xy);\r\n          }\r\n\r\n    `,\r\n    vertexShader: `\r\n    varying vec2 vUv;\r\n    void main() {\r\n      vUv = uv;\r\n      gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\r\n    }\r\n    `\r\n}","import React, { Suspense, useMemo } from \"react\";\r\nimport { Loader } from \"@react-three/drei\";\r\nimport { Canvas } from \"@react-three/fiber\";\r\nimport { space } from \"../utils/\";\r\nimport { SimpleShader } from \"../shaders/HeartfeltShader\";\r\nimport TextureOptions from \"../hooks/TextureOptioins\";\r\nimport GeoPlaneShader from \"../three/GeoPlaneShader\";\r\nimport useResize from \"../hooks/useResize\";\r\nimport { MouseParallax } from \"react-just-parallax\";\r\nimport { useLocation } from \"react-router-dom\";\r\n\r\nexport default function CanvasBackground() {\r\n  const { width, height } = useResize();\r\n  const shaderMemo = ()=>SimpleShader\r\n  return (\r\n    <Suspense fallback={<Loader />}>\r\n      <MouseParallax strength={0.01}>\r\n        <Canvas performance={{ min: 0.5 }} gl flat linear shadows>\r\n          <GeoPlaneShader\r\n            position={[0, space(0), space(-90)]}\r\n            rotation={[0, 0, 0]}\r\n            smokeScale={[width, height]}\r\n            args={[width, height, 10, 10]}\r\n            speed={0.001265}\r\n            shader={shaderMemo()}\r\n            {...TextureOptions(\"textures/earth\")}\r\n            castShadow\r\n          />\r\n        </Canvas>\r\n      </MouseParallax>\r\n    </Suspense>\r\n  );\r\n}\r\n"],"names":["useResize","_useState","useState","width","window","innerWidth","height","innerHeight","_useState2","_slicedToArray","windowSize","setWindowSize","resizeHandler","useEffect","addEventListener","removeEventListener","SimpleShader","fragmentShader","vertexShader","CanvasBackground","_useResize","_jsx","Suspense","fallback","Loader","children","MouseParallax","strength","Canvas","performance","min","gl","flat","linear","shadows","GeoPlaneShader","_objectSpread","position","space","rotation","smokeScale","args","speed","shader","TextureOptions","castShadow"],"sourceRoot":""}