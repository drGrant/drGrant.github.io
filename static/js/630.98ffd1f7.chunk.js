"use strict";(self.webpackChunkprotfolio=self.webpackChunkprotfolio||[]).push([[630,457],{9217:function(e,n,t){t.d(n,{TT:function(){return d.Z},b_:function(){return a.Z},Kr:function(){return o},mY:function(){return u},aB:function(){return l.Z},vO:function(){return c}});var i=t(9439),r=t(2791),o=function(e){var n=(0,r.useState)(!1),t=(0,i.Z)(n,2),o=t[0],a=t[1],u=function(n){n.key===e&&a(!0)},l=function(n){n.key===e&&a(!1)};return(0,r.useEffect)((function(){return window.addEventListener("keydown",u),window.addEventListener("keyup",l),function(){window.removeEventListener("keydown",u),window.removeEventListener("keyup",l)}}),[]),o},a=t(3653);function u(){var e=(0,r.useState)({x:0,y:0}),n=(0,i.Z)(e,2),t=n[0],o=n[1],a=function(e){o({x:e.clientX,y:e.clientY})};return(0,r.useEffect)((function(){return window.addEventListener("mousemove",a),function(){window.removeEventListener("mousemove",a)}}),[]),t}var l=t(4054),c=function(e){var n=function(n){return e(n)};(0,r.useEffect)((function(){return window.addEventListener("wheel",n),function(){window.removeEventListener("wheel",n)}}))},d=t(9917)},4054:function(e,n,t){t.d(n,{Z:function(){return o}});var i=t(9439),r=t(2791);function o(){var e=(0,r.useState)({width:window.innerWidth,height:window.innerHeight}),n=(0,i.Z)(e,2),t=n[0],o=n[1],a=function(){o({width:window.innerWidth,height:window.innerHeight})};return(0,r.useEffect)((function(){return window.addEventListener("resize",a),function(){window.removeEventListener("resize",a)}}),[]),t}},1630:function(e,n,t){t.r(n),t.d(n,{default:function(){return y}});var i=t(2791),r=t(338),o=t(5892),a=t(2703),u=t(4054),l=(t(8502),t(3144)),c=t(5671),d=t(136),s=t(9388),v=t(7760),f=t(6944),m=function(e){(0,d.Z)(t,e);var n=(0,s.Z)(t);function t(e){return(0,c.Z)(this,t),n.call(this,{vertexShader:"varying vec2 vUv;\n      void main() {\n        vUv = uv;\n        gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\n      }",fragmentShader:"#include <common>\n\n      uniform vec2 u_resolution;\n      uniform vec2 u_mouse;\n      uniform float u_time;\n      uniform sampler2D iChannel0;\n    \n      // By Daedelus: https://www.shadertoy.com/user/Daedelus\n      // license: Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License.\n      #define TIMESCALE 0.25 \n      #define TILES 8\n      #define COLOR 0.7, 1.6, 2.8\n\n      varying vec2 vUv;\n    \n      vec3 palette( float t, vec3 a, vec3 b, vec3 c, vec3 d){\n        return a + b * cos(6.28318*(c * t + d));\n        }\n        \n        vec3 myPalette(float t){\n        vec3 a = vec3(0.5, 0.5, 0.5);\n        vec3 b = vec3(0.25,0.25, .52);\n        vec3 c = vec3(.5, .5, 1.);\n        vec3 d = vec3(0.2, 0.2, 3.885);\n        \n        return palette(t,a,b,c,d);\n        \n        }\n        \n        void mainImage( out vec4 fragColor, in vec2 fragCoord )\n        {\n        \n            vec2 uv = (fragCoord * 2.0 -  u_resolution.xy) / u_resolution.y;\n            vec2 uv0 = uv;\n            vec3 finalColor = vec3(0.0);\n            for(float i=0.0; i< 1.5 ;i++){\n            \n                uv = fract(uv * 2.5) - 0.5;\n        \n                float d = length(uv) * exp(-length(uv0));\n        \n                vec3 col = myPalette(length(uv0) * i*.4 + u_time * .9);\n        \n                d = sin(d*8.+ u_time) / 8.;\n                d = abs(d);\n               // d = smoothstep(0.0,1.,d);\n                d = pow(0.01 / d,1.2);\n        \n                finalColor += col * d;\n            }\n            \n            fragColor = vec4(finalColor,1.0);\n        }\n    \n      void main() {\n        mainImage(gl_FragColor, vUv * u_resolution.xy);\n      }\n      ",uniforms:{iChannel0:{value:e},u_time:{type:"f",value:.05},u_speed:{type:"f",value:performance.now()},u_mouse:{type:"v2",value:{x:0,y:0}},u_resolution:{type:"v2",value:new v.Vector2(window.innerWidth,window.innerWidth)}},transparent:!0,blending:v.NormalBlending,depthWrite:!1})}return(0,l.Z)(t)}(v.ShaderMaterial);(0,f.e)({CirclePatternShaderMaterial:m});t(846);var h=t(1413),w=t(5987),p=t(9217),g=t(184),x=["animate","children"];function _(e){var n=e.animate,t=e.children,r=(0,w.Z)(e,x),o=(0,i.useRef)(),a=(0,p.mY)(),u=(a.x,a.y,function(e){var t=e.meshRef;return(0,f.A)((function(e,i){var r=e.clock;(null===t||void 0===t?void 0:t.current)&&n({meshRef:t,clock:r,delta:i})})),null});return(0,g.jsxs)("mesh",(0,h.Z)((0,h.Z)({},r),{},{ref:o,transparent:!0,children:[o&&n&&(0,g.jsx)(u,{meshRef:o}),t]}))}t(9457);function y(){var e=(0,u.Z)(),n=e.width,t=(e.height,(0,p.mY)()),l=t.x,c=t.y;return(0,g.jsx)("div",{className:"moon bg-white fixed flex items-center justify-center w-screen h-screen top-0 left-0 z-20 flex-col",children:(0,g.jsx)(i.Suspense,{fallback:(0,g.jsx)(r.a,{}),children:(0,g.jsx)(o.Xz,{performance:{min:100,max:10},gl:!0,flat:!0,linear:!0,shadows:!0,children:(0,g.jsxs)(_,{position:[(0,a.Dh)(0),(0,a.Dh)(0),-(0,a.Dh)(250)],animate:function(e){var n=e.meshRef;e.cloxk,e.delta;null!==n&&void 0!==n&&n.current&&(n.current.material.uniforms.u_time.value=8e-4*performance.now(),n.current.material.uniforms.u_mouse.value=new v.Vector2(l,c),n.current.material.uniforms.u_time.needsUpdate=!0,n.current.material.uniforms.u_mouse.needsUpdate=!0,n.current.uniformsNeedUpdate=!0)},receiveShadow:!0,children:[(0,g.jsx)("planeGeometry",{args:[n,n]}),(0,g.jsx)("circlePatternShaderMaterial",{attach:"material"})]})})})})}},9457:function(e,n,t){t.r(n);var i=t(6459),r=(t(2791),t(7399)),o=t(184);n.default=function(e){Object.assign({},((0,i.Z)(e),e));return(0,o.jsx)("ul",{className:"text-xl text-black max-w-5xl xl:max-w-3xl Anuphan ",children:r.dM.map((function(e,n){return(0,o.jsx)("li",{className:"mb-4",children:e},n)}))})}},846:function(e,n,t){var i=t(3144),r=t(5671),o=t(136),a=t(9388),u=t(7760),l=t(6944),c=function(e){(0,o.Z)(t,e);var n=(0,a.Z)(t);function t(e){return(0,r.Z)(this,t),n.call(this,{vertexShader:"varying vec2 vUv;\n      void main() {\n        vUv = uv;\n        gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\n      }",fragmentShader:"#include <common>\n\n      uniform vec3 u_resolution;\n      uniform float u_time;\n      uniform sampler2D iChannel0;\n    \n      // By Daedelus: https://www.shadertoy.com/user/Daedelus\n      // license: Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License.\n      #define TIMESCALE 0.25 \n      #define TILES 8\n      #define COLOR 0.7, 1.6, 2.8\n    \n      void mainImage( out vec4 fragColor, in vec2 fragCoord )\n      {\n        float aspect_ratio = u_resolution.y/u_resolution.x;\n        vec2 uv = fragCoord.xy / u_resolution.x;\n        uv -= vec2(0.5, 0.5 * aspect_ratio);\n        float rot = radians(-30. -u_time); // radians(45.0*sin(u_time));\n        mat2 rotation_matrix = mat2(cos(rot), -sin(rot), sin(rot), cos(rot));\n        uv = rotation_matrix * uv;\n        vec2 scaled_uv = 20.0 * uv; \n        vec2 tile = fract(scaled_uv);\n        float tile_dist = min(min(tile.x, 1.0-tile.x), min(tile.y, 1.0-tile.y));\n        float square_dist = length(floor(scaled_uv));\n        \n        float edge = sin(u_time-square_dist*20.);\n        edge = mod(edge * edge, edge / edge);\n\n        float value = mix(tile_dist, 1.0-tile_dist, step(1.0, edge));\n        edge = pow(abs(1.0-edge), 2.2) * 0.5;\n        \n        value = smoothstep( edge-0.05, edge, 0.95*value);\n        \n        \n        value += square_dist*.1;\n        value *= 0.8 - 0.2;\n        fragColor = vec4(pow(value, 2.), pow(value, 1.5), pow(value, 1.2), 1.);\n      }\n    \n      varying vec2 vUv;\n    \n      void main() {\n        mainImage(gl_FragColor, vUv * u_resolution.xy);\n      }\n      ",uniforms:{iChannel0:{value:e},u_time:{type:"f",value:.05},u_speed:{type:"f",value:performance.now()},u_mouse:{type:"f",value:{x:0,y:0}},u_resolution:{type:"v2",value:new u.Vector2(window.innerWidth,window.innerWidth)}},transparent:!0,blending:u.NormalBlending,depthWrite:!1})}return(0,i.Z)(t)}(u.ShaderMaterial);(0,l.e)({SquareShaderMaterial:c})}}]);
//# sourceMappingURL=630.98ffd1f7.chunk.js.map