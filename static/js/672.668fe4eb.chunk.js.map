{"version":3,"file":"static/js/672.668fe4eb.chunk.js","mappings":"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","sources":["hooks/useKeyPress.js","hooks/useScroll.js","hooks/useResize.js","three/LightMap.js","shaders/RainShader.js","shaders/squaresShader.js","shaders/squaresPatternShader.js","shaders/CloudyTunnelShaderMaterial.js","three/Ufo.js","gmaes/spaceInvaders/spaceInvaders.js","gmaes/spaceInvaders/index.js","pages/abduction.js","three/planet.js"],"sourcesContent":["import { useState, useEffect } from 'react';\r\n\r\nconst useKeyPress = targetKey=>{\r\n\r\n    const [keyPressed, setKeyPressed] = useState(false);\r\n\r\n// If pressed key is our target key then set to true\r\nconst downHandler = ({ key })=> {\r\n    if (key === targetKey) {\r\n      setKeyPressed(true);\r\n    }\r\n  }\r\n\r\n  // If released key is our target key then set to false\r\n  const upHandler = ({ key }) => {\r\n    if (key === targetKey) {\r\n      setKeyPressed(false);\r\n    }\r\n  };\r\n\r\n     // Add event listeners\r\n  useEffect(() => {\r\n    window.addEventListener('keydown', downHandler);\r\n    window.addEventListener('keyup', upHandler);\r\n    // Remove event listeners on cleanup\r\n    return () => {\r\n      window.removeEventListener('keydown', downHandler);\r\n      window.removeEventListener('keyup', upHandler);\r\n    };\r\n  }, []);\r\n\r\n  return keyPressed;\r\n}\r\n\r\nexport default useKeyPress","import { useEffect } from \"react\";\r\n\r\nconst useScroll = (callback) => {\r\n  const resizeHandler = (event) => \r\n    callback(event);\r\n  \r\n  // Add event listeners\r\n  useEffect(() => {\r\n    window.addEventListener(\"wheel\", resizeHandler);\r\n    // Remove event listeners on cleanup\r\n    return () => {\r\n      window.removeEventListener(\"wheel\", resizeHandler);\r\n    };\r\n  });\r\n};\r\n\r\nexport default useScroll;\r\n","import { useState, useEffect } from \"react\";\r\n\r\nexport default function useResize(){\r\n  const [windowSize, setWindowSize] = useState({\r\n    width: window.innerWidth,\r\n    height: window.innerHeight,\r\n  });\r\n\r\n  const resizeHandler = () => {\r\n    setWindowSize({\r\n      width: window.innerWidth,\r\n      height: window.innerHeight,\r\n    });\r\n  };\r\n\r\n  // Add event listeners\r\n  useEffect(() => {\r\n    window.addEventListener(\"resize\", resizeHandler);\r\n    // Remove event listeners on cleanup\r\n    return () => {\r\n      window.removeEventListener(\"resize\", resizeHandler);\r\n    };\r\n  }, []);\r\n\r\n  return windowSize;\r\n};\r\n","import * as THREE from \"three\";\r\nimport React, { useLayoutEffect, useRef, useMemo } from \"react\";\r\nimport { extend, useFrame, useThree } from \"@react-three/fiber\";\r\nimport { ProgressiveLightMap } from \"three/examples/jsm/misc/ProgressiveLightMap\";\r\n\r\nextend({ ProgressiveLightMap });\r\n\r\nexport function LightMap({\r\n  children,\r\n  position = [60, 150, 100],\r\n  resolution = 1024,\r\n  intensity = 1,\r\n  ambient = 0.5,\r\n  radius = 40,\r\n  blend = 40,\r\n  lights = 10,\r\n}) {\r\n  const rGroup = useRef();\r\n  const rLightmap = useRef();\r\n  const gl = useThree((state) => state.gl);\r\n  const camera = useThree((state) => state.camera);\r\n  const dirLights = useMemo(\r\n    () =>\r\n      [...Array(lights)].map((_, i) => {\r\n        let dirLight = new THREE.DirectionalLight(0xffffff, intensity / lights);\r\n        dirLight.castShadow = true;\r\n        dirLight.shadow.camera.near = 100;\r\n        dirLight.shadow.camera.far = 5000;\r\n        dirLight.shadow.camera.right = dirLight.shadow.camera.top = 150;\r\n        dirLight.shadow.camera.left = dirLight.shadow.camera.bottom = -150;\r\n        dirLight.shadow.mapSize.width = dirLight.shadow.mapSize.height =\r\n          resolution / 2;\r\n        return dirLight;\r\n      }),\r\n    [intensity, lights, resolution]\r\n  );\r\n\r\n  useLayoutEffect(() => {\r\n    const lightmap = rLightmap.current;\r\n    const objects = [...dirLights];\r\n    rGroup.current.traverse((child) => child.isMesh && objects.push(child));\r\n    lightmap.addObjectsToLightMap(objects);\r\n    return () => {\r\n      lightmap.blurringPlane = null;\r\n      lightmap.lightMapContainers = [];\r\n      lightmap.compiled = false;\r\n      lightmap.scene.clear();\r\n    };\r\n  }, [children]);\r\n\r\n  useFrame(() => {\r\n    rLightmap.current.update(camera, blend, true);\r\n    for (let l = 0; l < dirLights.length; l++) {\r\n      if (Math.random() > ambient)\r\n        dirLights[l].position.set(\r\n          position[0] + Math.random() * radius,\r\n          position[1] + Math.random() * radius,\r\n          position[2] + Math.random() * radius\r\n        );\r\n      else {\r\n        let lambda = Math.acos(2 * Math.random() - 1) - Math.PI / 2.0;\r\n        let phi = 2 * Math.PI * Math.random();\r\n        dirLights[l].position.set(\r\n          Math.cos(lambda) * Math.cos(phi) * 300,\r\n          Math.abs(Math.cos(lambda) * Math.sin(phi) * 300),\r\n          Math.sin(lambda) * 300\r\n        );\r\n      }\r\n    }\r\n  });\r\n\r\n  return (\r\n    <>\r\n      <progressiveLightMap ref={rLightmap} args={[gl, resolution]} />\r\n      <group ref={rGroup}>{children}</group>\r\n    </>\r\n  );\r\n}\r\n","import * as THREE from \"three\";\r\nimport { extend } from \"@react-three/fiber\";\r\n\r\nclass RainMaterial extends THREE.ShaderMaterial {\r\n  constructor(texture) {\r\n    super({\r\n      vertexShader: `varying vec2 vUv;\r\n      void main() {\r\n        vUv = uv;\r\n        gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\r\n      }`,\r\n      fragmentShader: `\r\n      uniform vec3 u_resolution;\r\n      uniform float u_time;\r\n\r\n      #define TAU 6.28318530718\r\n      #define MAX_ITER 5\r\n\r\n      void mainImage( out vec4 fragColor, in vec2 fragCoord ) \r\n      {\r\n        float time = u_time * .5+23.0;\r\n        // uv should be the 0-1 uv of texture...\r\n      vec2 uv = fragCoord.xy / u_resolution.xy;\r\n        \r\n    #ifdef SHOW_TILING\r\n      vec2 p = mod(uv*TAU*2.0, TAU)-250.0;\r\n    #else\r\n        vec2 p = mod(uv*TAU, TAU)-250.0;\r\n    #endif\r\n      vec2 i = vec2(p);\r\n      float c = 1.0;\r\n      float inten = .005;\r\n    \r\n      for (int n = 0; n < MAX_ITER; n++) \r\n      {\r\n        float t = time * (1.0 - (3.5 / float(n+1)));\r\n        i = p + vec2(cos(t - i.x) + sin(t + i.y), sin(t - i.y) + cos(t + i.x));\r\n        c += 1.0/length(vec2(p.x / (sin(i.x+t)/inten),p.y / (cos(i.y+t)/inten)));\r\n      }\r\n      c /= float(MAX_ITER);\r\n      c = 1.17-pow(c, 1.4);\r\n      vec3 colour = vec3(pow(abs(c), 8.0));\r\n        colour = clamp(colour + vec3(0.0, 0.35, 0.5), 0.0, 1.0);\r\n    \r\n      #ifdef SHOW_TILING\r\n      // Flash tile borders...\r\n      vec2 pixel = 2.0 / u_resolution.xy;\r\n      uv *= 2.0;\r\n      float f = floor(mod(u_time*.5, 2.0)); \t// Flash value.\r\n      vec2 first = step(pixel, uv) * f;\t\t   \t// Rule out first screen pixels and flash.\r\n      uv  = step(fract(uv), pixel);\t\t\t\t// Add one line of pixels per tile.\r\n      colour = mix(colour, vec3(1.0, 1.0, 0.0), (uv.x + uv.y) * first.x * first.y); // Yellow line\r\n      #endif\r\n        \r\n      fragColor = vec4(colour, 1.0);\r\n      }\r\n    varying vec2 vUv;\r\n            void main() {\r\n                mainImage(gl_FragColor, vUv * u_resolution.xy);\r\n              }\r\n    \r\n        `,\r\n      uniforms: {\r\n        iChannel0: { value: texture },\r\n        u_time: { type: \"f\", value: 0.05 },\r\n        u_speed: { type: \"f\", value: performance.now() },\r\n        u_mouse: { type: \"f\", value: { x: 0, y: 0 } },\r\n        u_resolution: {\r\n          type: \"v2\",\r\n          value: new THREE.Vector2(window.innerWidth, window.innerWidth),\r\n        },\r\n      },\r\n      transparent: true,\r\n      blending: THREE.NormalBlending,\r\n      depthWrite: false,\r\n    });\r\n  }\r\n}\r\n\r\nextend({ RainMaterial });\r\n","import * as THREE from \"three\";\r\nimport { extend } from \"@react-three/fiber\";\r\n\r\nclass SquareShaderMaterial extends THREE.ShaderMaterial {\r\n  constructor(texture) {\r\n    super({\r\n      vertexShader: `varying vec2 vUv;\r\n      void main() {\r\n        vUv = uv;\r\n        gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\r\n      }`,\r\n      fragmentShader: `#include <common>\r\n\r\n      uniform vec3 u_resolution;\r\n      uniform float u_time;\r\n      uniform sampler2D iChannel0;\r\n    \r\n      // By Daedelus: https://www.shadertoy.com/user/Daedelus\r\n      // license: Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License.\r\n      #define TIMESCALE 0.25 \r\n      #define TILES 8\r\n      #define COLOR 0.7, 1.6, 2.8\r\n    \r\n      void mainImage( out vec4 fragColor, in vec2 fragCoord )\r\n      {\r\n        float aspect_ratio = u_resolution.y/u_resolution.x;\r\n        vec2 uv = fragCoord.xy / u_resolution.x;\r\n        uv -= vec2(0.5, 0.5 * aspect_ratio);\r\n        float rot = radians(-30. -u_time); // radians(45.0*sin(u_time));\r\n        mat2 rotation_matrix = mat2(cos(rot), -sin(rot), sin(rot), cos(rot));\r\n        uv = rotation_matrix * uv;\r\n        vec2 scaled_uv = 20.0 * uv; \r\n        vec2 tile = fract(scaled_uv);\r\n        float tile_dist = min(min(tile.x, 1.0-tile.x), min(tile.y, 1.0-tile.y));\r\n        float square_dist = length(floor(scaled_uv));\r\n        \r\n        float edge = sin(u_time-square_dist*20.);\r\n        edge = mod(edge * edge, edge / edge);\r\n\r\n        float value = mix(tile_dist, 1.0-tile_dist, step(1.0, edge));\r\n        edge = pow(abs(1.0-edge), 2.2) * 0.5;\r\n        \r\n        value = smoothstep( edge-0.05, edge, 0.95*value);\r\n        \r\n        \r\n        value += square_dist*.1;\r\n        value *= 0.8 - 0.2;\r\n        fragColor = vec4(pow(value, 2.), pow(value, 1.5), pow(value, 1.2), 1.);\r\n      }\r\n    \r\n      varying vec2 vUv;\r\n    \r\n      void main() {\r\n        mainImage(gl_FragColor, vUv * u_resolution.xy);\r\n      }\r\n      `,\r\n      uniforms: {\r\n        iChannel0: { value: texture },\r\n        u_time: { type: \"f\", value: 0.05 },\r\n        u_speed: { type: \"f\", value: performance.now() },\r\n        u_mouse: { type: \"f\", value: { x: 0, y: 0 } },\r\n        u_resolution: {\r\n          type: \"v2\",\r\n          value: new THREE.Vector2(window.innerWidth, window.innerWidth),\r\n        },\r\n      },\r\n      transparent: true,\r\n      blending: THREE.NormalBlending,\r\n      depthWrite: false,\r\n    });\r\n  }\r\n}\r\n\r\nextend({  SquareShaderMaterial });\r\n","import * as THREE from \"three\";\r\nimport { extend } from \"@react-three/fiber\";\r\n\r\nclass SquarePatternShaderMaterial extends THREE.ShaderMaterial {\r\n  constructor(texture) {\r\n    super({\r\n      vertexShader: `varying vec2 vUv;\r\n      void main() {\r\n        vUv = uv;\r\n        gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\r\n      }`,\r\n      fragmentShader: `#include <common>\r\n\r\n      uniform vec3 u_resolution;\r\n      uniform float u_time;\r\n      uniform sampler2D iChannel0;\r\n    \r\n      // By Daedelus: https://www.shadertoy.com/user/Daedelus\r\n      // license: Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License.\r\n      #define TIMESCALE 0.25 \r\n      #define TILES 8\r\n      #define COLOR 0.7, 1.6, 2.8\r\n    \r\n      void mainImage( out vec4 fragColor, in vec2 fragCoord )\r\n      {\r\n        float aspect = u_resolution.y/u_resolution.x;\r\n    float value;\r\n\tvec2 uv = fragCoord.xy / u_resolution.x;\r\n    uv -= vec2(0.5, 0.5*aspect);\r\n    float rot = radians(45.0); // radians(45.0*sin(u_time));\r\n    mat2 m = mat2(cos(rot), -sin(rot), sin(rot), cos(rot));\r\n   \tuv  = m * uv;\r\n    uv += vec2(0.5, 0.5*aspect);\r\n    uv.y+=0.5*(1.0-aspect);\r\n    vec2 pos = 10.0*uv;\r\n    vec2 rep = fract(pos);\r\n    float dist = 2.0*min(min(rep.x, 1.0-rep.x), min(rep.y, 1.0-rep.y));\r\n    float squareDist = length((floor(pos)+vec2(0.5)) - vec2(5.0) );\r\n    \r\n    float edge = sin(u_time-squareDist*0.5)*0.5+0.5;\r\n    \r\n    edge = (u_time-squareDist*0.5)*0.5;\r\n    edge = 2.0*fract(edge*0.5);\r\n    //value = 2.0*abs(dist-0.5);\r\n    //value = pow(dist, 2.0);\r\n    value = fract (dist*2.0);\r\n    value = mix(value, 1.0-value, step(1.0, edge));\r\n    //value *= 1.0-0.5*edge;\r\n    edge = pow(abs(1.0-edge), 2.0);\r\n    \r\n    //edge = abs(1.0-edge);\r\n    value = smoothstep( edge-0.05, edge, 0.95*value);\r\n    \r\n    \r\n    value += squareDist*.1;\r\n    //fragColor = vec4(value);\r\n    fragColor = mix(vec4(1.0,1.0,1.0,1.0),vec4(1.0,0.25,0.25,1.0), value);\r\n    fragColor.a = 0.25*clamp(value, 0.0, 1.0);\r\n      }\r\n    \r\n      varying vec2 vUv;\r\n    \r\n      void main() {\r\n        mainImage(gl_FragColor, vUv * u_resolution.xy);\r\n      }\r\n      `,\r\n      uniforms: {\r\n        iChannel0: { value: texture },\r\n        u_time: { type: \"f\", value: 0.05 },\r\n        u_speed: { type: \"f\", value: performance.now() },\r\n        u_mouse: { type: \"f\", value: { x: 0, y: 0 } },\r\n        u_resolution: {\r\n          type: \"v2\",\r\n          value: new THREE.Vector2(window.innerWidth, window.innerWidth),\r\n        },\r\n      },\r\n      transparent: true,\r\n      blending: THREE.NormalBlending,\r\n      depthWrite: false,\r\n    });\r\n  }\r\n}\r\n\r\nextend({ SquarePatternShaderMaterial });\r\n","\r\nimport * as THREE from \"three\";\r\nimport { extend } from \"@react-three/fiber\";\r\nimport { SimpleShader } from \"./FireShader\";\r\nclass CloudShaderMaterial extends THREE.ShaderMaterial {\r\n  constructor(texture) {\r\n    super({\r\n\t\t...SimpleShader\r\n      ,\r\n      uniforms: {\r\n        iChannel0: { value: texture },\r\n        iChannel1: { value: texture },\r\n        u_time: { type: \"f\", value: 0.05 },\r\n        u_speed: { type: \"f\", value: performance.now() },\r\n        u_mouse: { type: \"f\", value: { x: 0, y: 0 } },\r\n        u_resolution: {\r\n          type: \"v2\",\r\n          value: new THREE.Vector2(window.innerWidth, window.innerWidth),\r\n        },\r\n      },\r\n      transparent: true,\r\n      blending: THREE.NormalBlending,\r\n      depthWrite: false,\r\n    });\r\n  }\r\n}\r\n\r\nextend({  CloudShaderMaterial });\r\n","/*\nAuto-generated by: https://github.com/pmndrs/gltfjsx\n*/\n\nimport React, { useRef, useMemo } from \"react\";\nimport { useFrame } from \"@react-three/fiber\";\nimport { useGLTF } from \"@react-three/drei\";\nimport FormatTexture from \"../hooks/FormatTexture\";\nimport \"../shaders/RainShader\";\nimport \"../shaders/squaresShader\";\nimport \"../shaders/squaresPatternShader\";\nimport \"../shaders/CloudyTunnelShaderMaterial\";\n\nconst URL = `/assets/obj/ufo.gltf?${Math.random() * 100}`;\n\nexport default function Ufo({ animate, ...props }) {\n  const group = useRef();\n  const animateRefs = [useRef()];\n  const simRef = [useRef(), useRef(), useRef(), useRef()];\n  const { nodes } = useGLTF(URL);\n  const imageTexture = FormatTexture(\"/assets/img/c_space.jpg\");\n  const AnimateFrame = ({ meshRef }) => {\n    useFrame(({ clock }, delta) => {\n      if (meshRef?.current) {\n        animate({ meshRef, clock, delta });\n      }\n\n      if (simRef.length > 0) {\n        simRef.forEach(\n          (ref) =>\n            ref.current &&\n            (ref.current.uniforms.u_time.value = clock.elapsedTime)\n        );\n      }\n      if (animateRefs.length > 0) {\n        animateRefs.forEach((ref) => {\n          if (ref.current) {\n            ref.current.rotation.y -= 0.01351;\n            // console.log(ref)\n          }\n        });\n      }\n    });\n    return null;\n  };\n  return (\n    <group ref={group} {...props} dispose={null}>\n      {animate && <AnimateFrame meshRef={group} />}\n      <mesh\n        castShadow\n        receiveShadow\n        geometry={nodes.dome.geometry}\n        material={nodes.dome.material}\n      >\n        <rainMaterial\n          ref={simRef[0]}\n          texture={imageTexture}\n          attach=\"material\"\n        />\n      </mesh>\n      <mesh\n        castShadow\n        receiveShadow\n        geometry={nodes.ring.geometry}\n        material={nodes.ring.material}\n      >\n        <squareShaderMaterial\n          ref={simRef[1]}\n          texture={imageTexture}\n          attach=\"material\"\n        />\n      </mesh>\n      <mesh\n        ref={animateRefs[0]}\n        castShadow\n        receiveShadow\n        geometry={nodes.lights.geometry}\n        material={nodes.lights.material}\n      >\n        <rainMaterial\n          ref={simRef[2]}\n          texture={imageTexture}\n          attach=\"material\"\n        />\n      </mesh>\n      <mesh\n        castShadow\n        receiveShadow\n        geometry={nodes.base.geometry}\n        material={nodes.base.material}\n      >\n        <squareShaderMaterial\n          ref={simRef[3]}\n          texture={imageTexture}\n          attach=\"material\"\n        />\n      </mesh>\n    </group>\n  );\n}\n\nuseGLTF.preload(URL);\n","import React, { useEffect, useMemo, useCallback, useRef } from \"react\";\r\nimport { returnArray } from \"../../utils\";\r\nimport state from \"../../store\";\r\nimport { useSnapshot } from \"valtio\";\r\nimport { useKeyPress } from \"../../hooks\";\r\nimport {\r\n  GiDeathStar,\r\n  GiFlamingSheet,\r\n  GiFission,\r\n  GiSpaceship,\r\n} from \"react-icons/gi\";\r\nexport default function SpaceInvaders() {\r\n  const snap = useSnapshot(state);\r\n  const width = 15;\r\n  let alienIntervalId = useRef(),\r\n    dir = useRef(1),\r\n    gameTime = useRef(50),\r\n    squares = returnArray(225);\r\n  const mapAssets = (num) => {\r\n    if (snap.spaceInvasion.hits.includes(num)) {\r\n      return (\r\n        <div\r\n          className=\"inline-flex items-center justify-center w-[20px] h-[20px]\"\r\n          key={num}\r\n        >\r\n          <div className=\"boom w-[10px] h-[10px] text-amber-500 z-20\">\r\n            <GiFission />\r\n          </div>\r\n        </div>\r\n      );\r\n    }\r\n\r\n    if (snap.spaceInvasion.aliens.includes(snap.spaceInvasion.player)) {\r\n      return (\r\n        <div className=\"bg-gray-400 rounded-full w-[20px] h-[20px]\" key={num} />\r\n      );\r\n    }\r\n    if (snap.spaceInvasion.aliens.includes(num)) {\r\n      return (\r\n        <div\r\n          className=\"text-purple-600 rounded-full w-[20px] h-[20px]\"\r\n          key={num}\r\n        >\r\n          <GiDeathStar />\r\n        </div>\r\n      );\r\n    }\r\n    if (\r\n      snap.spaceInvasion.shots.includes(num) &&\r\n      snap.spaceInvasion.player === num\r\n    ) {\r\n      return (\r\n        <div\r\n          className=\"inline-flex items-center justify-center  text-gradO w-[20px] h-[20px] relative\"\r\n          key={num}\r\n        >\r\n          {\" \"}\r\n          <GiSpaceship />\r\n          <div className=\"rounder-full w-[10px] h-[10px] text-amber-400 rotate-[225deg] absolute bottom-full\">\r\n            <GiFlamingSheet className=\"w-full h-full\" />\r\n          </div>\r\n        </div>\r\n      );\r\n    }\r\n    if (snap.spaceInvasion.shots.includes(num)) {\r\n      return (\r\n        <div\r\n          className=\"inline-flex items-center justify-center w-[20px] h-[20px]\"\r\n          key={num}\r\n        >\r\n          <div className=\"rounder-full w-[10px] h-[10px] text-amber-500 rotate-[225deg]\">\r\n            <GiFlamingSheet className=\"w-full h-full\" />\r\n          </div>\r\n        </div>\r\n      );\r\n    }\r\n    if (snap.spaceInvasion.player === num) {\r\n      return (\r\n        <div className=\"w-[20px] h-[20px] text-gradO\" key={num}>\r\n          <GiSpaceship />\r\n        </div>\r\n      );\r\n    }\r\n    return <div className=\"w-[20px] h-[20px] \" key={num}></div>;\r\n  };\r\n  const leftArrow = useKeyPress(\"ArrowLeft\");\r\n  const rightArrow = useKeyPress(\"ArrowRight\");\r\n  const upArrow = useKeyPress(\"ArrowUp\");\r\n  const gameOver = useCallback(() => {\r\n    snap.spaceInvasion.aliens.length > 0\r\n      ? (state.spaceInvasion.status = false)\r\n      : (state.spaceInvasion.status = true);\r\n    state.spaceInvasion.gameOver = true;\r\n  }, [snap]);\r\n  useMemo(() => {\r\n    if (!snap.spaceInvasion.pause) {\r\n      leftArrow &&\r\n        (() => {\r\n          if (snap.spaceInvasion.player % width !== 0)\r\n            state.spaceInvasion.player = snap.spaceInvasion.player - 1;\r\n        })();\r\n      rightArrow &&\r\n        (() => {\r\n          if (snap.spaceInvasion.player % width < width - 1)\r\n            state.spaceInvasion.player = snap.spaceInvasion.player + 1;\r\n        })();\r\n      upArrow &&\r\n        (() => {\r\n          state.spaceInvasion.shots.push(snap.spaceInvasion.player);\r\n        })();\r\n    }\r\n\r\n    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n  }, [leftArrow, rightArrow, upArrow]);\r\n\r\n  const moveInvaders = useCallback(() => {\r\n    const leftBoundry = snap.spaceInvasion.aliens[0] % width === 0,\r\n      rightBoundry =\r\n        snap.spaceInvasion.aliens[snap.spaceInvasion.aliens.length - 1] %\r\n          width ===\r\n        width - 1;\r\n    if (!snap.spaceInvasion.pause) {\r\n      if (snap.spaceInvasion.aliens.length === 0) gameOver();\r\n      for (let i = 0; i < snap.spaceInvasion.aliens.length; i++) {\r\n        if (snap.spaceInvasion.aliens[i] > squares.length - width) {\r\n          console.log({ i }, snap.spaceInvasion.aliens[i], squares.length);\r\n          gameOver();\r\n          return;\r\n        }\r\n      }\r\n      if (rightBoundry && dir.current > 0) {\r\n        for (let i = 0; i < snap.spaceInvasion.aliens.length; i++) {\r\n          state.spaceInvasion.aliens[i] += width + 1;\r\n        }\r\n        dir.current = -1;\r\n      }\r\n      if (leftBoundry && dir.current < 0) {\r\n        for (let i = 0; i < snap.spaceInvasion.aliens.length; i++) {\r\n          state.spaceInvasion.aliens[i] += width - 1;\r\n        }\r\n        dir.current = 1;\r\n      }\r\n      for (let i = 0; i < snap.spaceInvasion.aliens.length; i++) {\r\n        state.spaceInvasion.aliens[i] += dir.current;\r\n      }\r\n      if (snap.spaceInvasion.aliens.includes(snap.spaceInvasion.player)) {\r\n        gameOver();\r\n        return;\r\n      }\r\n    }\r\n    console.log(\"running\");\r\n  }, [snap, dir, squares, gameOver]);\r\n  const moverShots = useCallback(() => {\r\n    if (!snap.spaceInvasion.pause) {\r\n      if (snap.spaceInvasion.shots.length > 0) {\r\n        for (let w = 0; w < snap.spaceInvasion.shots.length; w++) {\r\n          state.spaceInvasion.shots[w] -= width;\r\n          let position = snap.spaceInvasion.shots[w];\r\n          if (position < -width || isNaN(position)) {\r\n            state.spaceInvasion.shots = snap.spaceInvasion.shots.filter(\r\n              (num) => num > 0 && !isNaN(num) && num\r\n            );\r\n          }\r\n          if (snap.spaceInvasion.aliens.includes(position)) {\r\n            // state.spaceInvasion.pause = true;\r\n            state.spaceInvasion.hits.push(position);\r\n            state.spaceInvasion.aliens = snap.spaceInvasion.aliens.filter(\r\n              (num) => num !== position && num\r\n            );\r\n            state.spaceInvasion.shots = snap.spaceInvasion.shots.filter(\r\n              (num) => num !== position && num\r\n            );\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }, [snap]);\r\n\r\n  const playgame = useCallback(() => {\r\n    moveInvaders();\r\n    moverShots();\r\n  }, [moveInvaders, moverShots]);\r\n  useEffect(() => {\r\n    let loaded = true;\r\n    if (loaded && !snap.spaceInvasion.gameOver && !snap.spaceInvasion.pause) {\r\n      alienIntervalId.current = setInterval(playgame, gameTime.current);\r\n    }\r\n    return () => {\r\n      loaded = false;\r\n      clearInterval(alienIntervalId.current);\r\n    };\r\n  }, [playgame, gameTime, alienIntervalId, snap]);\r\n\r\n  return (\r\n    <div className=\"mt-10 w-[300px] h-[300px] flex flex-wrap border-black relative\">\r\n      {squares.map(mapAssets)}\r\n    </div>\r\n  );\r\n}\r\n","import React from \"react\";\r\nimport state from \"../../store\";\r\nimport { useSnapshot } from \"valtio\";\r\nimport {  transitionViewIfSupported } from \"../../utils\";\r\nimport { useNavigate } from \"react-router-dom\";\r\nimport SpaceInvaders from \"./spaceInvaders\";\r\nexport default function SpaceInvadersContainer() {\r\n  const navigate = useNavigate();\r\n  const snap = useSnapshot(state);\r\n  return (\r\n    <div className=\"absolute z-30 flex items-center justify-center flex-col backdrop-blur-sm p-5 scale-150\">\r\n        <h1 className=\"text-7xl Anuphan text-gradB relative\">\r\n          <span className=\"absolute -rotate-12 scale-150 bottom-full right-full translate-x-full\">\r\n            <span className=\"absolute inline-block -rotate-45 right-full top-10\">\r\n              Spa\r\n            </span>\r\n            ce\r\n          </span>{\" \"}\r\n          <span className=\"Alfa\">Invaders</span>\r\n        </h1>\r\n        <section className=\"flex gap-2 justify-between w-full\">\r\n          <button\r\n            className=\"btn_glass_purple_parent\"\r\n            onClick={() => {\r\n              state.thought = !snap.thought;\r\n              state.spaceInvasion.pause = !snap.spaceInvasion.pause;\r\n            }}\r\n          >\r\n            <span className=\"btn_glass_purple gradient_purple_text\">{snap.spaceInvasion.pause ? 'Play':'Pause'}</span>\r\n          </button>\r\n          <button\r\n            className=\"btn_glass_purple_parent\"\r\n            onClick={() => {\r\n              state.spaceInvasion.aliens = [...snap.spaceInvasion.aliens_start]\r\n              state.spaceInvasion.gameOver = false\r\n              state.spaceInvasion.pause = true\r\n              state.spaceInvasion.status = null\r\n              state.spaceInvasion.hits = []\r\n              state.spaceInvasion.shots = []\r\n              state.spaceInvasion.player = state.spaceInvasion.player_start\r\n            }}\r\n          >\r\n           <span className=\"btn_glass_purple gradient_purple_text\">Restart</span>  \r\n          </button>\r\n          <button\r\n            className=\"btn_glass_purple_parent\"\r\n            onClick={() => {\r\n              transitionViewIfSupported(navigate(-1));\r\n            }}\r\n          >\r\n            <span className=\"btn_glass_purple gradient_purple_text\">Back</span>  \r\n          </button>\r\n        </section>\r\n        <SpaceInvaders />\r\n      </div>\r\n  );\r\n}\r\n","import React, { Suspense } from \"react\";\r\nimport { Loader, CameraShake, Stars } from \"@react-three/drei\";\r\nimport { useSpring, animated } from \"@react-spring/three\";\r\nimport { Canvas } from \"@react-three/fiber\";\r\nimport { space } from \"../utils\";\r\nimport { TextureOptions } from \"../hooks\";\r\nimport { LightMap } from \"../three/LightMap\";\r\nimport * as THREE from \"three\";\r\nimport Ufo from \"../three/Ufo\";\r\nimport state from \"../store\";\r\nimport { useSnapshot } from \"valtio\";\r\nimport SpaceInvadersContainer from \"../gmaes/spaceInvaders\";\r\nimport Planet from \"../three/planet\";\r\nimport CreateText from \"../three/CreateText\";\r\nexport default function Intro() {\r\n  const snap = useSnapshot(state);\r\n  const props = {\r\n    intensity: 5,\r\n    ambient: 3,\r\n    radius: 0,\r\n    blend: 200,\r\n  };  const springs = useSpring({\r\n    won: (snap.spaceInvasion.status && snap.spaceInvasion.gameOver)\r\n      ? [space(-1.5), space(.5), 0]\r\n      : [-space(0.5), space(10), space(1)],\r\n    lost: (!snap.spaceInvasion.status && snap.spaceInvasion.gameOver)\r\n      ? [space(-1.5), space(.5), 0]\r\n      :  [-space(0.5), -space(10), space(1)],\r\n  });\r\n  return (\r\n    <div className=\"moon bg-white fixed flex items-center justify-center w-screen h-screen top-0 left-0 z-20\">\r\n      <SpaceInvadersContainer />\r\n      <Suspense fallback={<Loader />}>\r\n        <Canvas\r\n          className=\"relative z-20 moon\"\r\n          performance={{ min: 0.5 }}\r\n          onCreated={({ gl }) => {\r\n            gl.toneMapping = THREE.CineonToneMapping;\r\n            gl.setClearColor(new THREE.Color(\"#020207\"));\r\n          }}\r\n          dpr={[1, 1.5]}\r\n          gl={{ alpha: true }}\r\n          flat\r\n          linear\r\n          shadows\r\n        >\r\n          <fog color=\"lightgray\" attach=\"fog\" near={4} far={800} />\r\n          <LightMap {...props}>\r\n            <Stars />\r\n            <Ufo\r\n              position={[-space(2), space(0.05), space(-0)]}\r\n              rotation={[space(-0.3), space(0), space(0)]}\r\n              animate={({ meshRef, clock, delta }) => {\r\n                meshRef.current.rotation.y += 0.01351;\r\n                meshRef.current.rotation.x =\r\n                  Math.sin(performance.now() * 0.00045) * 0.1;\r\n                meshRef.current.rotation.z =\r\n                  Math.cos(performance.now() * 0.00045) * 0.1;\r\n              }}\r\n            />\r\n            <Planet\r\n              bumpScale={0.3}\r\n              args={[10, 10, 96]}\r\n              position={[0, space(8), space(-20)]}\r\n              {...TextureOptions(\"textures/earth\")}\r\n              animate={({ meshRef, delta, clock }) => {\r\n                if (meshRef?.current) {\r\n                  meshRef.current.rotation.set(\r\n                    0,\r\n                    space(clock.oldTime / 90000),\r\n                    0\r\n                  );\r\n                }\r\n              }}\r\n            />\r\n            {snap.spaceInvasion.status && snap.spaceInvasion.gameOver && (\r\n              <animated.group position={springs.won}> <CreateText\r\n                textstring=\"You Won\"\r\n                fontSize={1}\r\n                fontHeight={0.3}\r\n                position={[0,0,0]}\r\n                color=\"#fff\"\r\n              /></animated.group>\r\n            )}\r\n            {!snap.spaceInvasion.status && snap.spaceInvasion.gameOver && (\r\n              <animated.group position={springs.lost}>\r\n              <CreateText\r\n                textstring=\"You Lose\"\r\n                fontSize={1}\r\n                fontHeight={0.3}\r\n                position={[0,0,0]}\r\n                color=\"#fff\"\r\n              /></animated.group>\r\n            )}\r\n            {!snap.thought && (\r\n              <CameraShake\r\n                maxYaw={0.01}\r\n                maxPitch={0.1}\r\n                maxRoll={0.1}\r\n                yawFrequency={0.05}\r\n                pitchFrequency={0.05}\r\n                rollFrequency={0.04}\r\n              />\r\n            )}\r\n          </LightMap>\r\n        </Canvas>\r\n      </Suspense>\r\n    </div>\r\n  );\r\n}\r\n","import React, { useRef } from \"react\";\r\nimport { useFrame } from \"@react-three/fiber\";\r\nimport { DoubleSide } from \"three\";\r\nimport FormatTexture from \"../hooks/FormatTexture\";\r\nconst Planet = ({\r\n  heightMapSrc,\r\n  AO,\r\n  bumpScale,\r\n  smokeScale,\r\n  textureMapSrc,\r\n  normalMapSrc,\r\n  smoothMapSrc,\r\n  metallicMapSrc,\r\n  edgeMapSrc,\r\n  args,\r\n  animate,\r\n  ...props\r\n}) => {\r\n  // not sure where to add this map will do rnd\r\n  // const smoothMap = FormatTexture(smoothMapSrc);\r\n\r\n  const heightMap = FormatTexture(heightMapSrc);\r\n  const AoTextureMap = FormatTexture(AO);\r\n  const textureMap = FormatTexture(textureMapSrc);\r\n  const normalMap = FormatTexture(normalMapSrc);\r\n  const metallicMap = FormatTexture(metallicMapSrc);\r\n  const edgeMap = FormatTexture(edgeMapSrc);\r\n  const TerrainMaterialRef = useRef();\r\n  const AnimateFrame = ({ meshRef }) => {\r\n    useFrame(({ clock }, delta) => {\r\n      animate({ meshRef, clock, delta });\r\n    });\r\n  };\r\n  return (\r\n    <group {...props}>\r\n      {animate && <AnimateFrame meshRef={TerrainMaterialRef} />}\r\n      <mesh ref={TerrainMaterialRef} transparent={true}>\r\n        <sphereGeometry\r\n          attach=\"geometry\"\r\n          args={args}\r\n          receiveShadow\r\n          transparent={true}\r\n        />\r\n        <meshPhongMaterial\r\n          bumpScale={bumpScale}\r\n          attach=\"material\"\r\n          map={textureMap}\r\n          aoMap={AoTextureMap}\r\n          bumpMap={heightMap}\r\n          lightMap={edgeMap}\r\n          metalnessMap={metallicMap}\r\n          normalMap={normalMap}\r\n          side={DoubleSide}\r\n        />\r\n      </mesh>\r\n    </group>\r\n  );\r\n};\r\nexport default Planet\r\n;\r\n"],"names":["targetKey","_useState","useState","_useState2","_slicedToArray","keyPressed","setKeyPressed","downHandler","_ref","key","upHandler","_ref2","useEffect","window","addEventListener","removeEventListener","callback","resizeHandler","event","useResize","width","innerWidth","height","innerHeight","windowSize","setWindowSize","LightMap","children","_ref$position","position","_ref$resolution","resolution","_ref$intensity","intensity","_ref$ambient","ambient","_ref$radius","radius","_ref$blend","blend","_ref$lights","lights","rGroup","useRef","rLightmap","gl","useThree","state","camera","dirLights","useMemo","_toConsumableArray","Array","map","_","i","dirLight","THREE","castShadow","shadow","near","far","right","top","left","bottom","mapSize","useLayoutEffect","lightmap","current","objects","traverse","child","isMesh","push","addObjectsToLightMap","blurringPlane","lightMapContainers","compiled","scene","clear","useFrame","update","l","length","Math","random","set","lambda","acos","PI","phi","cos","abs","sin","_jsxs","_Fragment","_jsx","ref","args","extend","ProgressiveLightMap","RainMaterial","_THREE$ShaderMaterial","_inherits","_super","_createSuper","texture","_classCallCheck","call","vertexShader","fragmentShader","uniforms","iChannel0","value","u_time","type","u_speed","performance","now","u_mouse","x","y","u_resolution","transparent","blending","depthWrite","_createClass","SquareShaderMaterial","SquarePatternShaderMaterial","CloudShaderMaterial","_objectSpread","SimpleShader","iChannel1","URL","concat","Ufo","animate","props","_objectWithoutProperties","_excluded","group","animateRefs","simRef","nodes","useGLTF","imageTexture","FormatTexture","AnimateFrame","meshRef","_ref3","delta","clock","forEach","elapsedTime","rotation","dispose","receiveShadow","geometry","dome","material","attach","ring","base","SpaceInvaders","snap","useSnapshot","alienIntervalId","dir","gameTime","squares","returnArray","leftArrow","useKeyPress","rightArrow","upArrow","gameOver","useCallback","spaceInvasion","aliens","pause","player","moveInvaders","leftBoundry","rightBoundry","console","log","includes","moverShots","shots","_loop","w","isNaN","filter","num","playgame","loaded","setInterval","clearInterval","className","hits","GiFission","GiDeathStar","GiSpaceship","GiFlamingSheet","SpaceInvadersContainer","navigate","useNavigate","onClick","thought","aliens_start","transitionViewIfSupported","Intro","springs","useSpring","won","status","space","lost","Suspense","fallback","Loader","Canvas","min","onCreated","toneMapping","setClearColor","dpr","alpha","flat","linear","shadows","color","Stars","z","Planet","bumpScale","TextureOptions","oldTime","animated","CreateText","textstring","fontSize","fontHeight","CameraShake","maxYaw","maxPitch","maxRoll","yawFrequency","pitchFrequency","rollFrequency","heightMapSrc","AO","textureMapSrc","smokeScale","normalMapSrc","metallicMapSrc","smoothMapSrc","edgeMapSrc","heightMap","AoTextureMap","textureMap","normalMap","metallicMap","edgeMap","TerrainMaterialRef","aoMap","bumpMap","lightMap","metalnessMap","side","DoubleSide"],"sourceRoot":""}