{"version":3,"file":"static/js/511.d1f12e88.chunk.js","mappings":"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","sources":["hooks/useKeyPress.js","hooks/useMouseMoving.js","hooks/useScroll.js","hooks/useForwardRaycast.js","hooks/useResize.js","shaders/CirclePatternShaderMaterial.js","pages/checker_background.js","pages/corporate/about.js","shaders/squaresShader.js","three/AnimatedMesh.js"],"sourcesContent":["import { useState, useEffect } from 'react';\r\n\r\nconst useKeyPress = targetKey=>{\r\n\r\n    const [keyPressed, setKeyPressed] = useState(false);\r\n\r\n// If pressed key is our target key then set to true\r\nconst downHandler = ({ key })=> {\r\n    if (key === targetKey) {\r\n      setKeyPressed(true);\r\n    }\r\n  }\r\n\r\n  // If released key is our target key then set to false\r\n  const upHandler = ({ key }) => {\r\n    if (key === targetKey) {\r\n      setKeyPressed(false);\r\n    }\r\n  };\r\n\r\n     // Add event listeners\r\n  useEffect(() => {\r\n    window.addEventListener('keydown', downHandler);\r\n    window.addEventListener('keyup', upHandler);\r\n    // Remove event listeners on cleanup\r\n    return () => {\r\n      window.removeEventListener('keydown', downHandler);\r\n      window.removeEventListener('keyup', upHandler);\r\n    };\r\n  }, []);\r\n\r\n  return keyPressed;\r\n}\r\n\r\nexport default useKeyPress","import { useState, useEffect } from \"react\";\r\n\r\nexport default function useMouseMoving(){\r\n  const [mousePosition, setMousePosition] = useState({\r\n    x: 0,\r\n    y:0,\r\n  });\r\n\r\n  const getMouseEvent = (event) => {\r\n    setMousePosition({\r\n      x: event.clientX,\r\n      y: event.clientY,\r\n    });\r\n  };\r\n\r\n  // Add event listeners\r\n  useEffect(() => {\r\n    window.addEventListener(\"mousemove\", getMouseEvent);\r\n    // Remove event listeners on cleanup\r\n    return () => {\r\n      window.removeEventListener(\"mousemove\", getMouseEvent);\r\n    };\r\n  }, []);\r\n\r\n  return mousePosition;\r\n};\r\n","import { useEffect } from \"react\";\r\n\r\nconst useScroll = (callback) => {\r\n  const resizeHandler = (event) => \r\n    callback(event);\r\n  \r\n  // Add event listeners\r\n  useEffect(() => {\r\n    window.addEventListener(\"wheel\", resizeHandler);\r\n    // Remove event listeners on cleanup\r\n    return () => {\r\n      window.removeEventListener(\"wheel\", resizeHandler);\r\n    };\r\n  });\r\n};\r\n\r\nexport default useScroll;\r\n","import { useThree } from '@react-three/fiber'\r\nimport { useMemo } from 'react'\r\nimport { Raycaster, Vector3 } from 'three'\r\n\r\nexport default function useForwardRaycast(obj)  {\r\n  const raycaster = useMemo(() => new Raycaster(), [])\r\n  const pos = useMemo(() => new Vector3(), [])\r\n  const dir = useMemo(() => new Vector3(), [])\r\n  const scene = useThree((state) => state.scene)\r\n\r\n  return () => {\r\n    if (!obj.current) return []\r\n    raycaster.set(obj.current.getWorldPosition(pos), obj.current.getWorldDirection(dir))\r\n    return raycaster.intersectObjects(scene.children)\r\n  }\r\n}","import { useState, useEffect } from \"react\";\r\n\r\nexport default function useResize(){\r\n  const [windowSize, setWindowSize] = useState({\r\n    width: window.innerWidth,\r\n    height: window.innerHeight,\r\n  });\r\n\r\n  const resizeHandler = () => {\r\n    setWindowSize({\r\n      width: window.innerWidth,\r\n      height: window.innerHeight,\r\n    });\r\n  };\r\n\r\n  // Add event listeners\r\n  useEffect(() => {\r\n    window.addEventListener(\"resize\", resizeHandler);\r\n    // Remove event listeners on cleanup\r\n    return () => {\r\n      window.removeEventListener(\"resize\", resizeHandler);\r\n    };\r\n  }, []);\r\n\r\n  return windowSize;\r\n};\r\n","import * as THREE from \"three\";\r\nimport { extend } from \"@react-three/fiber\";\r\n\r\nclass CirclePatternShaderMaterial extends THREE.ShaderMaterial {\r\n  constructor(texture) {\r\n    super({\r\n      vertexShader: `varying vec2 vUv;\r\n      void main() {\r\n        vUv = uv;\r\n        gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\r\n      }`,\r\n      fragmentShader: `#include <common>\r\n\r\n      uniform vec2 u_resolution;\r\n      uniform vec2 u_mouse;\r\n      uniform float u_time;\r\n      uniform sampler2D iChannel0;\r\n    \r\n      // By Daedelus: https://www.shadertoy.com/user/Daedelus\r\n      // license: Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License.\r\n      #define TIMESCALE 0.25 \r\n      #define TILES 8\r\n      #define COLOR 0.7, 1.6, 2.8\r\n\r\n      varying vec2 vUv;\r\n    \r\n      vec3 palette( float t, vec3 a, vec3 b, vec3 c, vec3 d){\r\n        return a + b * cos(6.28318*(c * t + d));\r\n        }\r\n        \r\n        vec3 myPalette(float t){\r\n        vec3 a = vec3(0.5, 0.5, 0.5);\r\n        vec3 b = vec3(0.25,0.25, .52);\r\n        vec3 c = vec3(.5, .5, 1.);\r\n        vec3 d = vec3(0.2, 0.2, 3.885);\r\n        \r\n        return palette(t,a,b,c,d);\r\n        \r\n        }\r\n        \r\n        void mainImage( out vec4 fragColor, in vec2 fragCoord )\r\n        {\r\n        \r\n            vec2 uv = (fragCoord * 2.0 -  u_resolution.xy) / u_resolution.y;\r\n            vec2 uv0 = uv;\r\n            vec3 finalColor = vec3(0.0);\r\n            for(float i=0.0; i< 1.5 ;i++){\r\n            \r\n                uv = fract(uv * 2.5) - 0.5;\r\n        \r\n                float d = length(uv) * exp(-length(uv0));\r\n        \r\n                vec3 col = myPalette(length(uv0) * i*.4 + u_time * .9);\r\n        \r\n                d = sin(d*8.+ u_time) / 8.;\r\n                d = abs(d);\r\n               // d = smoothstep(0.0,1.,d);\r\n                d = pow(0.01 / d,1.2);\r\n        \r\n                finalColor += col * d;\r\n            }\r\n            \r\n            fragColor = vec4(finalColor,1.0);\r\n        }\r\n    \r\n      void main() {\r\n        mainImage(gl_FragColor, vUv * u_resolution.xy);\r\n      }\r\n      `,\r\n      uniforms: {\r\n        iChannel0: { value: texture },\r\n        u_time: { type: \"f\", value: 0.05 },\r\n        u_speed: { type: \"f\", value: performance.now() },\r\n        u_mouse: { type: \"v2\", value: { x: 0, y: 0 } },\r\n        u_resolution: {\r\n          type: \"v2\",\r\n          value: new THREE.Vector2(window.innerWidth, window.innerWidth),\r\n        },\r\n      },\r\n      transparent: true,\r\n      blending: THREE.NormalBlending,\r\n      depthWrite: false,\r\n    });\r\n  }\r\n}\r\n\r\nextend({ CirclePatternShaderMaterial });\r\n","import React, { Suspense } from \"react\";\r\nimport { Loader } from \"@react-three/drei\";\r\nimport { Canvas } from \"@react-three/fiber\";\r\nimport { space } from \"../utils/\";\r\nimport { SimpleShader } from \"../shaders/HeartfeltShader\";\r\nimport useResize from \"../hooks/useResize\";\r\nimport { MouseParallax } from \"react-just-parallax\";\r\nimport \"../shaders/CirclePatternShaderMaterial\";\r\nimport \"../shaders/squaresShader\";\r\nimport AnimatedMesh from \"../three/AnimatedMesh\";\r\nimport { Vector2, DoubleSide } from \"three\";\r\nimport { useMouseMoving } from \"../hooks\";\r\nimport About from \"./corporate/about\";\r\n\r\nexport default function CanvasBackground() {\r\n  const { width, height } = useResize();\r\n  const { x, y } = useMouseMoving();\r\n  const time = 0.0008;\r\n  return (\r\n    <div className=\"moon bg-white fixed flex items-center justify-center w-screen h-screen top-0 left-0 z-20 flex-col\">\r\n      <Suspense fallback={<Loader />}>\r\n        {/* <MouseParallax strength={0.01}> */}\r\n          <Canvas performance={{ min: 100,max:10 }} gl flat linear shadows>\r\n          <AnimatedMesh \r\n                position={[space(0), space(0), -space(250)]}\r\n                    animate={({ meshRef, cloxk, delta }) => {\r\n                      if (meshRef?.current) {\r\n                        meshRef.current.material.uniforms.u_time.value =\r\n                          performance.now() * time;\r\n                        meshRef.current.material.uniforms.u_mouse.value =\r\n                          new Vector2(x, y);\r\n                        meshRef.current.material.uniforms.u_time.needsUpdate = true;\r\n                        meshRef.current.material.uniforms.u_mouse.needsUpdate = true;\r\n                        meshRef.current.uniformsNeedUpdate = true;\r\n                      }\r\n                    }}\r\n                receiveShadow>\r\n                  <planeGeometry args={[width, width]} />\r\n                  <circlePatternShaderMaterial attach={\"material\"} />\r\n                </AnimatedMesh>\r\n            {/* <Ship position={[space(0),space(0),space(-10)]} /> */}\r\n          </Canvas>\r\n        {/* </MouseParallax> */}\r\n      </Suspense>\r\n    </div>\r\n  );\r\n}\r\n","import React from \"react\";\r\nimport jsonData from \"../../json/data.json\";\r\nconst About = ({ ...props }) => {\r\n  return (\r\n    <ul className=\"text-xl text-black max-w-5xl xl:max-w-3xl Anuphan \">\r\n      {jsonData.personal_info.map((text, index) => (\r\n        <li className=\"mb-4\" key={index}>{text}</li>\r\n      ))}\r\n    </ul>\r\n  );\r\n};\r\n\r\nexport default About;\r\n","import * as THREE from \"three\";\r\nimport { extend } from \"@react-three/fiber\";\r\n\r\nclass SquareShaderMaterial extends THREE.ShaderMaterial {\r\n  constructor(texture) {\r\n    super({\r\n      vertexShader: `varying vec2 vUv;\r\n      void main() {\r\n        vUv = uv;\r\n        gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\r\n      }`,\r\n      fragmentShader: `#include <common>\r\n\r\n      uniform vec3 u_resolution;\r\n      uniform float u_time;\r\n      uniform sampler2D iChannel0;\r\n    \r\n      // By Daedelus: https://www.shadertoy.com/user/Daedelus\r\n      // license: Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License.\r\n      #define TIMESCALE 0.25 \r\n      #define TILES 8\r\n      #define COLOR 0.7, 1.6, 2.8\r\n    \r\n      void mainImage( out vec4 fragColor, in vec2 fragCoord )\r\n      {\r\n        float aspect_ratio = u_resolution.y/u_resolution.x;\r\n        vec2 uv = fragCoord.xy / u_resolution.x;\r\n        uv -= vec2(0.5, 0.5 * aspect_ratio);\r\n        float rot = radians(-30. -u_time); // radians(45.0*sin(u_time));\r\n        mat2 rotation_matrix = mat2(cos(rot), -sin(rot), sin(rot), cos(rot));\r\n        uv = rotation_matrix * uv;\r\n        vec2 scaled_uv = 20.0 * uv; \r\n        vec2 tile = fract(scaled_uv);\r\n        float tile_dist = min(min(tile.x, 1.0-tile.x), min(tile.y, 1.0-tile.y));\r\n        float square_dist = length(floor(scaled_uv));\r\n        \r\n        float edge = sin(u_time-square_dist*20.);\r\n        edge = mod(edge * edge, edge / edge);\r\n\r\n        float value = mix(tile_dist, 1.0-tile_dist, step(1.0, edge));\r\n        edge = pow(abs(1.0-edge), 2.2) * 0.5;\r\n        \r\n        value = smoothstep( edge-0.05, edge, 0.95*value);\r\n        \r\n        \r\n        value += square_dist*.1;\r\n        value *= 0.8 - 0.2;\r\n        fragColor = vec4(pow(value, 2.), pow(value, 1.5), pow(value, 1.2), 1.);\r\n      }\r\n    \r\n      varying vec2 vUv;\r\n    \r\n      void main() {\r\n        mainImage(gl_FragColor, vUv * u_resolution.xy);\r\n      }\r\n      `,\r\n      uniforms: {\r\n        iChannel0: { value: texture },\r\n        u_time: { type: \"f\", value: 0.05 },\r\n        u_speed: { type: \"f\", value: performance.now() },\r\n        u_mouse: { type: \"f\", value: { x: 0, y: 0 } },\r\n        u_resolution: {\r\n          type: \"v2\",\r\n          value: new THREE.Vector2(window.innerWidth, window.innerWidth),\r\n        },\r\n      },\r\n      transparent: true,\r\n      blending: THREE.NormalBlending,\r\n      depthWrite: false,\r\n    });\r\n  }\r\n}\r\n\r\nextend({  SquareShaderMaterial });\r\n","import React, { useRef } from \"react\";\r\nimport { useFrame } from \"@react-three/fiber\";\r\nimport { useForwardRaycast } from \"../hooks\";\r\nexport default function AnimatedMesh({ animate, children, ...props }) {\r\n  const meshRef = useRef();\r\n  const raycast = useForwardRaycast(meshRef);\r\n  const AnimateFrame = ({ meshRef }) => {\r\n    useFrame(({ clock }, delta) => {\r\n      meshRef?.current && animate({ meshRef, clock, delta, raycast });\r\n    });\r\n    return null;\r\n  };\r\n  return (\r\n    <mesh ref={meshRef} transparent={true}  {...props}>\r\n      {meshRef && animate && <AnimateFrame meshRef={meshRef} />}\r\n      {children}\r\n    </mesh>\r\n  );\r\n}\r\n"],"names":["targetKey","_useState","useState","_useState2","_slicedToArray","keyPressed","setKeyPressed","downHandler","_ref","key","upHandler","_ref2","useEffect","window","addEventListener","removeEventListener","useMouseMoving","x","y","mousePosition","setMousePosition","getMouseEvent","event","clientX","clientY","callback","resizeHandler","useForwardRaycast","obj","raycaster","useMemo","Raycaster","pos","Vector3","dir","scene","useThree","state","current","set","getWorldPosition","getWorldDirection","intersectObjects","children","useResize","width","innerWidth","height","innerHeight","windowSize","setWindowSize","CirclePatternShaderMaterial","_THREE$ShaderMaterial","_inherits","_super","_createSuper","texture","_classCallCheck","call","vertexShader","fragmentShader","uniforms","iChannel0","value","u_time","type","u_speed","performance","now","u_mouse","u_resolution","THREE","transparent","blending","depthWrite","_createClass","extend","CanvasBackground","_useResize","_useMouseMoving","_jsx","className","Suspense","fallback","Loader","Canvas","min","max","gl","flat","linear","shadows","_jsxs","AnimatedMesh","position","space","animate","meshRef","cloxk","delta","material","Vector2","needsUpdate","uniformsNeedUpdate","receiveShadow","args","attach","Object","assign","_objectDestructuringEmpty","jsonData","text","index","SquareShaderMaterial","props","_objectWithoutProperties","_excluded","useRef","raycast","AnimateFrame","useFrame","_ref3","clock","_objectSpread","ref"],"sourceRoot":""}