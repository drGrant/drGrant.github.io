{"version":3,"file":"static/js/432.bff8bcac.chunk.js","mappings":"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","sources":["components/GlassButton.js","hooks/useMouseMoving.js","hooks/useScroll.js","hooks/useForwardRaycast.js","hooks/useResize.js","../node_modules/three/examples/jsm/misc/ProgressiveLightMap.js","../node_modules/three/examples/jsm/libs/potpack.module.js","three/LightMap.js","shaders/RainShader.js","shaders/squaresPatternShader.js","shaders/CloudyTunnelShaderMaterial.js","three/Ufo.js","canvas/Canvas.js","canvas/Circle.js","gmaes/spaceInvaders/spaceInvadersCanvasGame.js","pages/abduction.js","shaders/squaresShader.js","three/AnimatedMesh.js","three/planet.js"],"sourcesContent":["export default function GlassButton({ children, ...props }) {\r\n  return (\r\n    <button className=\"btn_glass_purple_parent\" {...props}>\r\n      <span className=\"btn_glass_purple gradient_purple_text\">{children}</span>\r\n    </button>\r\n  );\r\n}\r\n","import { useState, useEffect } from \"react\";\r\n\r\nexport default function useMouseMoving(){\r\n  const [mousePosition, setMousePosition] = useState({\r\n    x: 0,\r\n    y:0,\r\n  });\r\n\r\n  const getMouseEvent = (event) => {\r\n    setMousePosition({\r\n      x: event.clientX,\r\n      y: event.clientY,\r\n    });\r\n  };\r\n\r\n  // Add event listeners\r\n  useEffect(() => {\r\n    window.addEventListener(\"mousemove\", getMouseEvent);\r\n    // Remove event listeners on cleanup\r\n    return () => {\r\n      window.removeEventListener(\"mousemove\", getMouseEvent);\r\n    };\r\n  }, []);\r\n\r\n  return mousePosition;\r\n};\r\n","import { useEffect } from \"react\";\r\n\r\nconst useScroll = (callback) => {\r\n  const resizeHandler = (event) => \r\n    callback(event);\r\n  \r\n  // Add event listeners\r\n  useEffect(() => {\r\n    window.addEventListener(\"wheel\", resizeHandler);\r\n    // Remove event listeners on cleanup\r\n    return () => {\r\n      window.removeEventListener(\"wheel\", resizeHandler);\r\n    };\r\n  });\r\n};\r\n\r\nexport default useScroll;\r\n","import { useThree } from '@react-three/fiber'\r\nimport { useMemo } from 'react'\r\nimport { Raycaster, Vector3 } from 'three'\r\n\r\nexport default function useForwardRaycast(obj)  {\r\n  const raycaster = useMemo(() => new Raycaster(), [])\r\n  const pos = useMemo(() => new Vector3(), [])\r\n  const dir = useMemo(() => new Vector3(), [])\r\n  const scene = useThree((state) => state.scene)\r\n\r\n  return () => {\r\n    if (!obj.current) return []\r\n    raycaster.set(obj.current.getWorldPosition(pos), obj.current.getWorldDirection(dir))\r\n    return raycaster.intersectObjects(scene.children)\r\n  }\r\n}","import { useState, useEffect } from \"react\";\r\n\r\nexport default function useResize(){\r\n  const [windowSize, setWindowSize] = useState({\r\n    width: window.innerWidth,\r\n    height: window.innerHeight,\r\n  });\r\n\r\n  const resizeHandler = () => {\r\n    setWindowSize({\r\n      width: window.innerWidth,\r\n      height: window.innerHeight,\r\n    });\r\n  };\r\n\r\n  // Add event listeners\r\n  useEffect(() => {\r\n    window.addEventListener(\"resize\", resizeHandler);\r\n    // Remove event listeners on cleanup\r\n    return () => {\r\n      window.removeEventListener(\"resize\", resizeHandler);\r\n    };\r\n  }, []);\r\n\r\n  return windowSize;\r\n};\r\n","import * as THREE from 'three';\nimport { potpack } from '../libs/potpack.module.js';\n\n/**\n * Progressive Light Map Accumulator, by [zalo](https://github.com/zalo/)\n *\n * To use, simply construct a `ProgressiveLightMap` object,\n * `plmap.addObjectsToLightMap(object)` an array of semi-static\n * objects and lights to the class once, and then call\n * `plmap.update(camera)` every frame to begin accumulating\n * lighting samples.\n *\n * This should begin accumulating lightmaps which apply to\n * your objects, so you can start jittering lighting to achieve\n * the texture-space effect you're looking for.\n *\n * @param {WebGLRenderer} renderer A WebGL Rendering Context\n * @param {number} res The side-long dimension of you total lightmap\n */\nclass ProgressiveLightMap {\n\n\tconstructor( renderer, res = 1024 ) {\n\n\t\tthis.renderer = renderer;\n\t\tthis.res = res;\n\t\tthis.lightMapContainers = [];\n\t\tthis.compiled = false;\n\t\tthis.scene = new THREE.Scene();\n\t\tthis.scene.background = null;\n\t\tthis.tinyTarget = new THREE.WebGLRenderTarget( 1, 1 );\n\t\tthis.buffer1Active = false;\n\t\tthis.firstUpdate = true;\n\t\tthis.warned = false;\n\n\t\t// Create the Progressive LightMap Texture\n\t\tconst format = /(Android|iPad|iPhone|iPod)/g.test( navigator.userAgent ) ? THREE.HalfFloatType : THREE.FloatType;\n\t\tthis.progressiveLightMap1 = new THREE.WebGLRenderTarget( this.res, this.res, { type: format } );\n\t\tthis.progressiveLightMap2 = new THREE.WebGLRenderTarget( this.res, this.res, { type: format } );\n\t\tthis.progressiveLightMap2.texture.channel = 1;\n\n\t\t// Inject some spicy new logic into a standard phong material\n\t\tthis.uvMat = new THREE.MeshPhongMaterial();\n\t\tthis.uvMat.uniforms = {};\n\t\tthis.uvMat.onBeforeCompile = ( shader ) => {\n\n\t\t\t// Vertex Shader: Set Vertex Positions to the Unwrapped UV Positions\n\t\t\tshader.vertexShader =\n\t\t\t\t'#define USE_LIGHTMAP\\n' +\n\t\t\t\t'#define LIGHTMAP_UV uv1\\n' +\n\t\t\t\tshader.vertexShader.slice( 0, - 1 ) +\n\t\t\t\t'\tgl_Position = vec4((LIGHTMAP_UV - 0.5) * 2.0, 1.0, 1.0); }';\n\n\t\t\t// Fragment Shader: Set Pixels to average in the Previous frame's Shadows\n\t\t\tconst bodyStart = shader.fragmentShader.indexOf( 'void main() {' );\n\t\t\tshader.fragmentShader =\n\t\t\t\t'#define USE_LIGHTMAP\\n' +\n\t\t\t\tshader.fragmentShader.slice( 0, bodyStart ) +\n\t\t\t\t'\tuniform sampler2D previousShadowMap;\\n\tuniform float averagingWindow;\\n' +\n\t\t\t\tshader.fragmentShader.slice( bodyStart - 1, - 1 ) +\n\t\t\t\t`\\nvec3 texelOld = texture2D(previousShadowMap, vLightMapUv).rgb;\n\t\t\t\tgl_FragColor.rgb = mix(texelOld, gl_FragColor.rgb, 1.0/averagingWindow);\n\t\t\t}`;\n\n\t\t\t// Set the Previous Frame's Texture Buffer and Averaging Window\n\t\t\tshader.uniforms.previousShadowMap = { value: this.progressiveLightMap1.texture };\n\t\t\tshader.uniforms.averagingWindow = { value: 100 };\n\n\t\t\tthis.uvMat.uniforms = shader.uniforms;\n\n\t\t\t// Set the new Shader to this\n\t\t\tthis.uvMat.userData.shader = shader;\n\n\t\t\tthis.compiled = true;\n\n\t\t};\n\n\t}\n\n\t/**\n\t * Sets these objects' materials' lightmaps and modifies their uv1's.\n\t * @param {Object3D} objects An array of objects and lights to set up your lightmap.\n\t */\n\taddObjectsToLightMap( objects ) {\n\n\t\t// Prepare list of UV bounding boxes for packing later...\n\t\tthis.uv_boxes = []; const padding = 3 / this.res;\n\n\t\tfor ( let ob = 0; ob < objects.length; ob ++ ) {\n\n\t\t\tconst object = objects[ ob ];\n\n\t\t\t// If this object is a light, simply add it to the internal scene\n\t\t\tif ( object.isLight ) {\n\n\t\t\t\tthis.scene.attach( object ); continue;\n\n\t\t\t}\n\n\t\t\tif ( ! object.geometry.hasAttribute( 'uv' ) ) {\n\n\t\t\t\tconsole.warn( 'All lightmap objects need UVs!' ); continue;\n\n\t\t\t}\n\n\t\t\tif ( this.blurringPlane == null ) {\n\n\t\t\t\tthis._initializeBlurPlane( this.res, this.progressiveLightMap1 );\n\n\t\t\t}\n\n\t\t\t// Apply the lightmap to the object\n\t\t\tobject.material.lightMap = this.progressiveLightMap2.texture;\n\t\t\tobject.material.dithering = true;\n\t\t\tobject.castShadow = true;\n\t\t\tobject.receiveShadow = true;\n\t\t\tobject.renderOrder = 1000 + ob;\n\n\t\t\t// Prepare UV boxes for potpack\n\t\t\t// TODO: Size these by object surface area\n\t\t\tthis.uv_boxes.push( { w: 1 + ( padding * 2 ),\n\t\t\t\t\t\t\t\t  h: 1 + ( padding * 2 ), index: ob } );\n\n\t\t\tthis.lightMapContainers.push( { basicMat: object.material, object: object } );\n\n\t\t\tthis.compiled = false;\n\n\t\t}\n\n\t\t// Pack the objects' lightmap UVs into the same global space\n\t\tconst dimensions = potpack( this.uv_boxes );\n\t\tthis.uv_boxes.forEach( ( box ) => {\n\n\t\t\tconst uv1 = objects[ box.index ].geometry.getAttribute( 'uv' ).clone();\n\t\t\tfor ( let i = 0; i < uv1.array.length; i += uv1.itemSize ) {\n\n\t\t\t\tuv1.array[ i ] = ( uv1.array[ i ] + box.x + padding ) / dimensions.w;\n\t\t\t\tuv1.array[ i + 1 ] = ( uv1.array[ i + 1 ] + box.y + padding ) / dimensions.h;\n\n\t\t\t}\n\n\t\t\tobjects[ box.index ].geometry.setAttribute( 'uv1', uv1 );\n\t\t\tobjects[ box.index ].geometry.getAttribute( 'uv1' ).needsUpdate = true;\n\n\t\t} );\n\n\t}\n\n\t/**\n\t * This function renders each mesh one at a time into their respective surface maps\n\t * @param {Camera} camera Standard Rendering Camera\n\t * @param {number} blendWindow When >1, samples will accumulate over time.\n\t * @param {boolean} blurEdges  Whether to fix UV Edges via blurring\n\t */\n\tupdate( camera, blendWindow = 100, blurEdges = true ) {\n\n\t\tif ( this.blurringPlane == null ) {\n\n\t\t\treturn;\n\n\t\t}\n\n\t\t// Store the original Render Target\n\t\tconst oldTarget = this.renderer.getRenderTarget();\n\n\t\t// The blurring plane applies blur to the seams of the lightmap\n\t\tthis.blurringPlane.visible = blurEdges;\n\n\t\t// Steal the Object3D from the real world to our special dimension\n\t\tfor ( let l = 0; l < this.lightMapContainers.length; l ++ ) {\n\n\t\t\tthis.lightMapContainers[ l ].object.oldScene =\n\t\t\t\tthis.lightMapContainers[ l ].object.parent;\n\t\t\tthis.scene.attach( this.lightMapContainers[ l ].object );\n\n\t\t}\n\n\t\t// Render once normally to initialize everything\n\t\tif ( this.firstUpdate ) {\n\n\t\t\tthis.renderer.setRenderTarget( this.tinyTarget ); // Tiny for Speed\n\t\t\tthis.renderer.render( this.scene, camera );\n\t\t\tthis.firstUpdate = false;\n\n\t\t}\n\n\t\t// Set each object's material to the UV Unwrapped Surface Mapping Version\n\t\tfor ( let l = 0; l < this.lightMapContainers.length; l ++ ) {\n\n\t\t\tthis.uvMat.uniforms.averagingWindow = { value: blendWindow };\n\t\t\tthis.lightMapContainers[ l ].object.material = this.uvMat;\n\t\t\tthis.lightMapContainers[ l ].object.oldFrustumCulled =\n\t\t\t\tthis.lightMapContainers[ l ].object.frustumCulled;\n\t\t\tthis.lightMapContainers[ l ].object.frustumCulled = false;\n\n\t\t}\n\n\t\t// Ping-pong two surface buffers for reading/writing\n\t\tconst activeMap = this.buffer1Active ? this.progressiveLightMap1 : this.progressiveLightMap2;\n\t\tconst inactiveMap = this.buffer1Active ? this.progressiveLightMap2 : this.progressiveLightMap1;\n\n\t\t// Render the object's surface maps\n\t\tthis.renderer.setRenderTarget( activeMap );\n\t\tthis.uvMat.uniforms.previousShadowMap = { value: inactiveMap.texture };\n\t\tthis.blurringPlane.material.uniforms.previousShadowMap = { value: inactiveMap.texture };\n\t\tthis.buffer1Active = ! this.buffer1Active;\n\t\tthis.renderer.render( this.scene, camera );\n\n\t\t// Restore the object's Real-time Material and add it back to the original world\n\t\tfor ( let l = 0; l < this.lightMapContainers.length; l ++ ) {\n\n\t\t\tthis.lightMapContainers[ l ].object.frustumCulled =\n\t\t\t\tthis.lightMapContainers[ l ].object.oldFrustumCulled;\n\t\t\tthis.lightMapContainers[ l ].object.material = this.lightMapContainers[ l ].basicMat;\n\t\t\tthis.lightMapContainers[ l ].object.oldScene.attach( this.lightMapContainers[ l ].object );\n\n\t\t}\n\n\t\t// Restore the original Render Target\n\t\tthis.renderer.setRenderTarget( oldTarget );\n\n\t}\n\n\t/** DEBUG\n\t * Draw the lightmap in the main scene.  Call this after adding the objects to it.\n\t * @param {boolean} visible Whether the debug plane should be visible\n\t * @param {Vector3} position Where the debug plane should be drawn\n\t*/\n\tshowDebugLightmap( visible, position = undefined ) {\n\n\t\tif ( this.lightMapContainers.length == 0 ) {\n\n\t\t\tif ( ! this.warned ) {\n\n\t\t\t\tconsole.warn( 'Call this after adding the objects!' ); this.warned = true;\n\n\t\t\t}\n\n\t\t\treturn;\n\n\t\t}\n\n\t\tif ( this.labelMesh == null ) {\n\n\t\t\tthis.labelMaterial = new THREE.MeshBasicMaterial(\n\t\t\t\t{ map: this.progressiveLightMap1.texture, side: THREE.DoubleSide } );\n\t\t\tthis.labelPlane = new THREE.PlaneGeometry( 100, 100 );\n\t\t\tthis.labelMesh = new THREE.Mesh( this.labelPlane, this.labelMaterial );\n\t\t\tthis.labelMesh.position.y = 250;\n\t\t\tthis.lightMapContainers[ 0 ].object.parent.add( this.labelMesh );\n\n\t\t}\n\n\t\tif ( position != undefined ) {\n\n\t\t\tthis.labelMesh.position.copy( position );\n\n\t\t}\n\n\t\tthis.labelMesh.visible = visible;\n\n\t}\n\n\t/**\n\t * INTERNAL Creates the Blurring Plane\n\t * @param {number} res The square resolution of this object's lightMap.\n\t * @param {WebGLRenderTexture} lightMap The lightmap to initialize the plane with.\n\t */\n\t_initializeBlurPlane( res, lightMap = null ) {\n\n\t\tconst blurMaterial = new THREE.MeshBasicMaterial();\n\t\tblurMaterial.uniforms = { previousShadowMap: { value: null },\n\t\t\t\t\t\t\t\t  pixelOffset: { value: 1.0 / res },\n\t\t\t\t\t\t\t\t  polygonOffset: true, polygonOffsetFactor: - 1, polygonOffsetUnits: 3.0 };\n\t\tblurMaterial.onBeforeCompile = ( shader ) => {\n\n\t\t\t// Vertex Shader: Set Vertex Positions to the Unwrapped UV Positions\n\t\t\tshader.vertexShader =\n\t\t\t\t'#define USE_UV\\n' +\n\t\t\t\tshader.vertexShader.slice( 0, - 1 ) +\n\t\t\t\t'\tgl_Position = vec4((uv - 0.5) * 2.0, 1.0, 1.0); }';\n\n\t\t\t// Fragment Shader: Set Pixels to 9-tap box blur the current frame's Shadows\n\t\t\tconst bodyStart\t= shader.fragmentShader.indexOf( 'void main() {' );\n\t\t\tshader.fragmentShader =\n\t\t\t\t'#define USE_UV\\n' +\n\t\t\t\tshader.fragmentShader.slice( 0, bodyStart ) +\n\t\t\t\t'\tuniform sampler2D previousShadowMap;\\n\tuniform float pixelOffset;\\n' +\n\t\t\t\tshader.fragmentShader.slice( bodyStart - 1, - 1 ) +\n\t\t\t\t\t`\tgl_FragColor.rgb = (\n\t\t\t\t\t\t\t\t\ttexture2D(previousShadowMap, vUv + vec2( pixelOffset,  0.0        )).rgb +\n\t\t\t\t\t\t\t\t\ttexture2D(previousShadowMap, vUv + vec2( 0.0        ,  pixelOffset)).rgb +\n\t\t\t\t\t\t\t\t\ttexture2D(previousShadowMap, vUv + vec2( 0.0        , -pixelOffset)).rgb +\n\t\t\t\t\t\t\t\t\ttexture2D(previousShadowMap, vUv + vec2(-pixelOffset,  0.0        )).rgb +\n\t\t\t\t\t\t\t\t\ttexture2D(previousShadowMap, vUv + vec2( pixelOffset,  pixelOffset)).rgb +\n\t\t\t\t\t\t\t\t\ttexture2D(previousShadowMap, vUv + vec2(-pixelOffset,  pixelOffset)).rgb +\n\t\t\t\t\t\t\t\t\ttexture2D(previousShadowMap, vUv + vec2( pixelOffset, -pixelOffset)).rgb +\n\t\t\t\t\t\t\t\t\ttexture2D(previousShadowMap, vUv + vec2(-pixelOffset, -pixelOffset)).rgb)/8.0;\n\t\t\t\t}`;\n\n\t\t\t// Set the LightMap Accumulation Buffer\n\t\t\tshader.uniforms.previousShadowMap = { value: lightMap.texture };\n\t\t\tshader.uniforms.pixelOffset = { value: 0.5 / res };\n\t\t\tblurMaterial.uniforms = shader.uniforms;\n\n\t\t\t// Set the new Shader to this\n\t\t\tblurMaterial.userData.shader = shader;\n\n\t\t\tthis.compiled = true;\n\n\t\t};\n\n\t\tthis.blurringPlane = new THREE.Mesh( new THREE.PlaneGeometry( 1, 1 ), blurMaterial );\n\t\tthis.blurringPlane.name = 'Blurring Plane';\n\t\tthis.blurringPlane.frustumCulled = false;\n\t\tthis.blurringPlane.renderOrder = 0;\n\t\tthis.blurringPlane.material.depthWrite = false;\n\t\tthis.scene.add( this.blurringPlane );\n\n\t}\n\n}\n\nexport { ProgressiveLightMap };\n","/**\n * potpack - by [@mourner](https://github.com/mourner)\n * \n * A tiny JavaScript function for packing 2D rectangles into a near-square container, \n * which is useful for generating CSS sprites and WebGL textures. Similar to \n * [shelf-pack](https://github.com/mapbox/shelf-pack), but static (you can't add items \n * once a layout is generated), and aims for maximal space utilization.\n *\n * A variation of algorithms used in [rectpack2D](https://github.com/TeamHypersomnia/rectpack2D)\n * and [bin-pack](https://github.com/bryanburgers/bin-pack), which are in turn based \n * on [this article by Blackpawn](http://blackpawn.com/texts/lightmaps/default.html).\n * \n * @license\n * ISC License\n * \n * Copyright (c) 2018, Mapbox\n * \n * Permission to use, copy, modify, and/or distribute this software for any purpose\n * with or without fee is hereby granted, provided that the above copyright notice\n * and this permission notice appear in all copies.\n * \n * THE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH\n * REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY AND\n * FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,\n * INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM LOSS\n * OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR OTHER\n * TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR PERFORMANCE OF\n * THIS SOFTWARE.\n */\n\nfunction potpack(boxes) {\n\n\t// calculate total box area and maximum box width\n\tlet area = 0;\n\tlet maxWidth = 0;\n\t\n\tfor (const box of boxes) {\n\t\tarea += box.w * box.h;\n\t\tmaxWidth = Math.max(maxWidth, box.w);\n\t}\n\t\n\t// sort the boxes for insertion by height, descending\n\tboxes.sort((a, b) => b.h - a.h);\n\t\n\t// aim for a squarish resulting container,\n\t// slightly adjusted for sub-100% space utilization\n\tconst startWidth = Math.max(Math.ceil(Math.sqrt(area / 0.95)), maxWidth);\n\t\n\t// start with a single empty space, unbounded at the bottom\n\tconst spaces = [{x: 0, y: 0, w: startWidth, h: Infinity}];\n\t\n\tlet width = 0;\n\tlet height = 0;\n\t\n\tfor (const box of boxes) {\n\t\t// look through spaces backwards so that we check smaller spaces first\n\t\tfor (let i = spaces.length - 1; i >= 0; i--) {\n\t\t\tconst space = spaces[i];\n\t\t\t\n\t\t\t// look for empty spaces that can accommodate the current box\n\t\t\tif (box.w > space.w || box.h > space.h) continue;\n\t\t\t\n\t\t\t// found the space; add the box to its top-left corner\n\t\t\t// |-------|-------|\n\t\t\t// |  box  |       |\n\t\t\t// |_______|       |\n\t\t\t// |         space |\n\t\t\t// |_______________|\n\t\t\tbox.x = space.x;\n\t\t\tbox.y = space.y;\n\t\t\t\n\t\t\theight = Math.max(height, box.y + box.h);\n\t\t\twidth = Math.max(width, box.x + box.w);\n\t\t\t\n\t\t\tif (box.w === space.w && box.h === space.h) {\n\t\t\t\t// space matches the box exactly; remove it\n\t\t\t\tconst last = spaces.pop();\n\t\t\t\tif (i < spaces.length) spaces[i] = last;\n\t\t\t\n\t\t\t} else if (box.h === space.h) {\n\t\t\t\t// space matches the box height; update it accordingly\n\t\t\t\t// |-------|---------------|\n\t\t\t\t// |  box  | updated space |\n\t\t\t\t// |_______|_______________|\n\t\t\t\tspace.x += box.w;\n\t\t\t\tspace.w -= box.w;\n\t\t\t\n\t\t\t} else if (box.w === space.w) {\n\t\t\t\t// space matches the box width; update it accordingly\n\t\t\t\t// |---------------|\n\t\t\t\t// |      box      |\n\t\t\t\t// |_______________|\n\t\t\t\t// | updated space |\n\t\t\t\t// |_______________|\n\t\t\t\tspace.y += box.h;\n\t\t\t\tspace.h -= box.h;\n\t\t\t\n\t\t\t} else {\n\t\t\t\t// otherwise the box splits the space into two spaces\n\t\t\t\t// |-------|-----------|\n\t\t\t\t// |  box  | new space |\n\t\t\t\t// |_______|___________|\n\t\t\t\t// | updated space     |\n\t\t\t\t// |___________________|\n\t\t\t\tspaces.push({\n\t\t\t\t\tx: space.x + box.w,\n\t\t\t\t\ty: space.y,\n\t\t\t\t\tw: space.w - box.w,\n\t\t\t\t\th: box.h\n\t\t\t\t});\n\t\t\t\tspace.y += box.h;\n\t\t\t\tspace.h -= box.h;\n\t\t\t}\n\t\t\tbreak;\n\t\t}\n\t}\n\t\n\treturn {\n\t\tw: width, // container width\n\t\th: height, // container height\n\t\tfill: (area / (width * height)) || 0 // space utilization\n\t};\n}\n\nexport { potpack };","import * as THREE from \"three\";\r\nimport React, { useLayoutEffect, useRef, useMemo } from \"react\";\r\nimport { extend, useFrame, useThree } from \"@react-three/fiber\";\r\nimport { ProgressiveLightMap } from \"three/examples/jsm/misc/ProgressiveLightMap\";\r\n\r\nextend({ ProgressiveLightMap });\r\n\r\nexport function LightMap({\r\n  children,\r\n  position = [60, 150, 100],\r\n  resolution = 1024,\r\n  intensity = 1,\r\n  ambient = 0.5,\r\n  radius = 40,\r\n  blend = 40,\r\n  lights = 10,\r\n}) {\r\n  const rGroup = useRef();\r\n  const rLightmap = useRef();\r\n  const gl = useThree((state) => state.gl);\r\n  const camera = useThree((state) => state.camera);\r\n  const dirLights = useMemo(\r\n    () =>\r\n      [...Array(lights)].map((_, i) => {\r\n        let dirLight = new THREE.DirectionalLight(0xffffff, intensity / lights);\r\n        dirLight.castShadow = true;\r\n        dirLight.shadow.camera.near = 100;\r\n        dirLight.shadow.camera.far = 5000;\r\n        dirLight.shadow.camera.right = dirLight.shadow.camera.top = 150;\r\n        dirLight.shadow.camera.left = dirLight.shadow.camera.bottom = -150;\r\n        dirLight.shadow.mapSize.width = dirLight.shadow.mapSize.height =\r\n          resolution / 2;\r\n        return dirLight;\r\n      }),\r\n    [intensity, lights, resolution]\r\n  );\r\n\r\n  useLayoutEffect(() => {\r\n    const lightmap = rLightmap.current;\r\n    const objects = [...dirLights];\r\n    rGroup.current.traverse((child) => child.isMesh && objects.push(child));\r\n    lightmap.addObjectsToLightMap(objects);\r\n    return () => {\r\n      lightmap.blurringPlane = null;\r\n      lightmap.lightMapContainers = [];\r\n      lightmap.compiled = false;\r\n      lightmap.scene.clear();\r\n    };\r\n  }, []);\r\n\r\n  useFrame(() => {\r\n    rLightmap.current.update(camera, blend, true);\r\n    for (let l = 0; l < dirLights.length; l++) {\r\n      if (Math.random() > ambient)\r\n        dirLights[l].position.set(\r\n          position[0] + Math.random() * radius,\r\n          position[1] + Math.random() * radius,\r\n          position[2] + Math.random() * radius\r\n        );\r\n      else {\r\n        let lambda = Math.acos(2 * Math.random() - 1) - Math.PI / 2.0;\r\n        let phi = 2 * Math.PI * Math.random();\r\n        dirLights[l].position.set(\r\n          Math.cos(lambda) * Math.cos(phi) * 300,\r\n          Math.abs(Math.cos(lambda) * Math.sin(phi) * 300),\r\n          Math.sin(lambda) * 300\r\n        );\r\n      }\r\n    }\r\n  });\r\n\r\n  return (\r\n    <>\r\n      <progressiveLightMap ref={rLightmap} args={[gl, resolution]} name='lightMap' />\r\n      <group ref={rGroup} name=\"lightMapGroup\">{children}</group>\r\n    </>\r\n  );\r\n}\r\n","import * as THREE from \"three\";\r\nimport { extend } from \"@react-three/fiber\";\r\n\r\nclass RainMaterial extends THREE.ShaderMaterial {\r\n  constructor(texture) {\r\n    super({\r\n      vertexShader: `varying vec2 vUv;\r\n      void main() {\r\n        vUv = uv;\r\n        gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\r\n      }`,\r\n      fragmentShader: `\r\n      uniform vec3 u_resolution;\r\n      uniform float u_time;\r\n\r\n      #define TAU 6.28318530718\r\n      #define MAX_ITER 5\r\n\r\n      void mainImage( out vec4 fragColor, in vec2 fragCoord ) \r\n      {\r\n        float time = u_time * .5+23.0;\r\n        // uv should be the 0-1 uv of texture...\r\n      vec2 uv = fragCoord.xy / u_resolution.xy;\r\n        \r\n    #ifdef SHOW_TILING\r\n      vec2 p = mod(uv*TAU*2.0, TAU)-250.0;\r\n    #else\r\n        vec2 p = mod(uv*TAU, TAU)-250.0;\r\n    #endif\r\n      vec2 i = vec2(p);\r\n      float c = 1.0;\r\n      float inten = .005;\r\n    \r\n      for (int n = 0; n < MAX_ITER; n++) \r\n      {\r\n        float t = time * (1.0 - (3.5 / float(n+1)));\r\n        i = p + vec2(cos(t - i.x) + sin(t + i.y), sin(t - i.y) + cos(t + i.x));\r\n        c += 1.0/length(vec2(p.x / (sin(i.x+t)/inten),p.y / (cos(i.y+t)/inten)));\r\n      }\r\n      c /= float(MAX_ITER);\r\n      c = 1.17-pow(c, 1.4);\r\n      vec3 colour = vec3(pow(abs(c), 8.0));\r\n        colour = clamp(colour + vec3(0.0, 0.35, 0.5), 0.0, 1.0);\r\n    \r\n      #ifdef SHOW_TILING\r\n      // Flash tile borders...\r\n      vec2 pixel = 2.0 / u_resolution.xy;\r\n      uv *= 2.0;\r\n      float f = floor(mod(u_time*.5, 2.0)); \t// Flash value.\r\n      vec2 first = step(pixel, uv) * f;\t\t   \t// Rule out first screen pixels and flash.\r\n      uv  = step(fract(uv), pixel);\t\t\t\t// Add one line of pixels per tile.\r\n      colour = mix(colour, vec3(1.0, 1.0, 0.0), (uv.x + uv.y) * first.x * first.y); // Yellow line\r\n      #endif\r\n        \r\n      fragColor = vec4(colour, 1.0);\r\n      }\r\n    varying vec2 vUv;\r\n            void main() {\r\n                mainImage(gl_FragColor, vUv * u_resolution.xy);\r\n              }\r\n    \r\n        `,\r\n      uniforms: {\r\n        iChannel0: { value: texture },\r\n        u_time: { type: \"f\", value: 0.05 },\r\n        u_speed: { type: \"f\", value: performance.now() },\r\n        u_mouse: { type: \"f\", value: { x: 0, y: 0 } },\r\n        u_resolution: {\r\n          type: \"v2\",\r\n          value: new THREE.Vector2(window.innerWidth, window.innerWidth),\r\n        },\r\n      },\r\n      transparent: true,\r\n      blending: THREE.NormalBlending,\r\n      depthWrite: false,\r\n    });\r\n  }\r\n}\r\n\r\nextend({ RainMaterial });\r\n","import * as THREE from \"three\";\r\nimport { extend } from \"@react-three/fiber\";\r\n\r\nclass SquarePatternShaderMaterial extends THREE.ShaderMaterial {\r\n  constructor(texture) {\r\n    super({\r\n      vertexShader: `varying vec2 vUv;\r\n      void main() {\r\n        vUv = uv;\r\n        gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\r\n      }`,\r\n      fragmentShader: `#include <common>\r\n\r\n      uniform vec3 u_resolution;\r\n      uniform float u_time;\r\n      uniform sampler2D iChannel0;\r\n    \r\n      // By Daedelus: https://www.shadertoy.com/user/Daedelus\r\n      // license: Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License.\r\n      #define TIMESCALE 0.25 \r\n      #define TILES 8\r\n      #define COLOR 0.7, 1.6, 2.8\r\n    \r\n      void mainImage( out vec4 fragColor, in vec2 fragCoord )\r\n      {\r\n        float aspect = u_resolution.y/u_resolution.x;\r\n    float value;\r\n\tvec2 uv = fragCoord.xy / u_resolution.x;\r\n    uv -= vec2(0.5, 0.5*aspect);\r\n    float rot = radians(45.0); // radians(45.0*sin(u_time));\r\n    mat2 m = mat2(cos(rot), -sin(rot), sin(rot), cos(rot));\r\n   \tuv  = m * uv;\r\n    uv += vec2(0.5, 0.5*aspect);\r\n    uv.y+=0.5*(1.0-aspect);\r\n    vec2 pos = 10.0*uv;\r\n    vec2 rep = fract(pos);\r\n    float dist = 2.0*min(min(rep.x, 1.0-rep.x), min(rep.y, 1.0-rep.y));\r\n    float squareDist = length((floor(pos)+vec2(0.5)) - vec2(5.0) );\r\n    \r\n    float edge = sin(u_time-squareDist*0.5)*0.5+0.5;\r\n    \r\n    edge = (u_time-squareDist*0.5)*0.5;\r\n    edge = 2.0*fract(edge*0.5);\r\n    //value = 2.0*abs(dist-0.5);\r\n    //value = pow(dist, 2.0);\r\n    value = fract (dist*2.0);\r\n    value = mix(value, 1.0-value, step(1.0, edge));\r\n    //value *= 1.0-0.5*edge;\r\n    edge = pow(abs(1.0-edge), 2.0);\r\n    \r\n    //edge = abs(1.0-edge);\r\n    value = smoothstep( edge-0.05, edge, 0.95*value);\r\n    \r\n    \r\n    value += squareDist*.1;\r\n    //fragColor = vec4(value);\r\n    fragColor = mix(vec4(1.0,1.0,1.0,1.0),vec4(1.0,0.25,0.25,1.0), value);\r\n    fragColor.a = 0.25*clamp(value, 0.0, 1.0);\r\n      }\r\n    \r\n      varying vec2 vUv;\r\n    \r\n      void main() {\r\n        mainImage(gl_FragColor, vUv * u_resolution.xy);\r\n      }\r\n      `,\r\n      uniforms: {\r\n        iChannel0: { value: texture },\r\n        u_time: { type: \"f\", value: 0.05 },\r\n        u_speed: { type: \"f\", value: performance.now() },\r\n        u_mouse: { type: \"f\", value: { x: 0, y: 0 } },\r\n        u_resolution: {\r\n          type: \"v2\",\r\n          value: new THREE.Vector2(window.innerWidth, window.innerWidth),\r\n        },\r\n      },\r\n      transparent: true,\r\n      blending: THREE.NormalBlending,\r\n      depthWrite: false,\r\n    });\r\n  }\r\n}\r\n\r\nextend({ SquarePatternShaderMaterial });\r\n","\r\nimport * as THREE from \"three\";\r\nimport { extend } from \"@react-three/fiber\";\r\nimport { SimpleShader } from \"./FireShader\";\r\nclass CloudShaderMaterial extends THREE.ShaderMaterial {\r\n  constructor(texture) {\r\n    super({\r\n\t\t...SimpleShader\r\n      ,\r\n      uniforms: {\r\n        iChannel0: { value: texture },\r\n        iChannel1: { value: texture },\r\n        u_time: { type: \"f\", value: 0.05 },\r\n        u_speed: { type: \"f\", value: performance.now() },\r\n        u_mouse: { type: \"f\", value: { x: 0, y: 0 } },\r\n        u_resolution: {\r\n          type: \"v2\",\r\n          value: new THREE.Vector2(window.innerWidth, window.innerWidth),\r\n        },\r\n      },\r\n      transparent: true,\r\n      blending: THREE.NormalBlending,\r\n      depthWrite: false,\r\n    });\r\n  }\r\n}\r\n\r\nextend({  CloudShaderMaterial });\r\n","/*\r\nAuto-generated by: https://github.com/pmndrs/gltfjsx\r\n*/\r\n\r\nimport React, { useRef, useMemo } from \"react\";\r\nimport { useFrame } from \"@react-three/fiber\";\r\nimport { useGLTF } from \"@react-three/drei\";\r\nimport FormatTexture from \"../hooks/FormatTexture\";\r\nimport \"../shaders/RainShader\";\r\nimport \"../shaders/squaresShader\";\r\nimport \"../shaders/squaresPatternShader\";\r\nimport \"../shaders/CloudyTunnelShaderMaterial\";\r\n\r\nconst URL = `/assets/obj/ufo.gltf?${Math.random() * 100}`;\r\n\r\nexport default function Ufo({ animate, ...props }) {\r\n  const group = useRef();\r\n  const animateRefs = [useRef()];\r\n  const simRef = [useRef(), useRef(), useRef(), useRef()];\r\n  const { nodes } = useGLTF(URL);\r\n  const imageTexture = FormatTexture(\"/assets/img/c_space.jpg\");\r\n  const AnimateFrame = ({ meshRef }) => {\r\n    useFrame(({ clock }, delta) => {\r\n      if (meshRef?.current) {\r\n        animate({ meshRef, clock, delta });\r\n      }\r\n\r\n      if (simRef.length > 0) {\r\n        simRef.forEach(\r\n          (ref) =>\r\n            ref.current &&\r\n            (ref.current.uniforms.u_time.value = clock.elapsedTime)\r\n        );\r\n      }\r\n      if (animateRefs.length > 0) {\r\n        animateRefs.forEach((ref) => {\r\n          if (ref.current) {\r\n            ref.current.rotation.y -= 0.01351;\r\n            // console.log(ref)\r\n          }\r\n        });\r\n      }\r\n    });\r\n    return null;\r\n  };\r\n  return (\r\n    <group ref={group} {...props} dispose={null}>\r\n      {animate && <AnimateFrame meshRef={group} />}\r\n      <mesh\r\n        name=\"dome\"\r\n        castShadow\r\n        receiveShadow\r\n        geometry={nodes.dome.geometry}\r\n        material={nodes.dome.material}\r\n      >\r\n        <rainMaterial\r\n          ref={simRef[0]}\r\n          texture={imageTexture}\r\n          attach=\"material\"\r\n        />\r\n      </mesh>\r\n      <mesh\r\n        name=\"rings\"\r\n        castShadow\r\n        receiveShadow\r\n        geometry={nodes.ring.geometry}\r\n        material={nodes.ring.material}\r\n      >\r\n        <squareShaderMaterial\r\n          ref={simRef[1]}\r\n          texture={imageTexture}\r\n          attach=\"material\"\r\n        />\r\n      </mesh>\r\n      <mesh\r\n        name=\"lights\"\r\n        ref={animateRefs[0]}\r\n        castShadow\r\n        receiveShadow\r\n        geometry={nodes.lights.geometry}\r\n        material={nodes.lights.material}\r\n      >\r\n        <rainMaterial\r\n          ref={simRef[2]}\r\n          texture={imageTexture}\r\n          attach=\"material\"\r\n        />\r\n      </mesh>\r\n      <mesh\r\n        name=\"base\"\r\n        castShadow\r\n        receiveShadow\r\n        geometry={nodes.base.geometry}\r\n        material={nodes.base.material}\r\n      >\r\n        <squareShaderMaterial\r\n          ref={simRef[3]}\r\n          texture={imageTexture}\r\n          attach=\"material\"\r\n        />\r\n      </mesh>\r\n    </group>\r\n  );\r\n}\r\n\r\nuseGLTF.preload(URL);\r\n","import React, { useRef, useEffect, useMemo, useState } from \"react\";\r\nimport state from \"../store\";\r\nimport { useSnapshot } from \"valtio\";\r\nexport default function Canvas({ children, ...props }) {\r\n  const [ctx,setCtx] = useState();\r\n  const canvasRef = useRef();\r\n  useEffect(() => {\r\n    let loaded = true;\r\n    if (loaded) {\r\n      const ctx = canvasRef.current.getContext(\"2d\");\r\n      if (ctx) {\r\n        setCtx(ctx)\r\n      }\r\n    }\r\n    return () => {\r\n      loaded = false;\r\n    };\r\n  }, []);\r\n  useMemo(() => {\r\n    if (ctx) {\r\n      ctx.clearRect(0, 0, ctx.canvas.width, ctx.canvas.height);\r\n      ctx.fillStyle = \"#000000\";\r\n      ctx.beginPath();\r\n      ctx.arc(50, 100, 20, 0, 2 * Math.PI);\r\n      ctx.fill();\r\n    }\r\n  }, [ctx]);\r\n  return <canvas ref={canvasRef} {...props} />;\r\n}\r\n","const Circle = ''\r\n\r\nexport {\r\nCircle\r\n}","import React, { Suspense } from \"react\";\r\nimport { Canvas, Circle } from \"../../canvas\";\r\nimport { Loader } from \"@react-three/drei\";\r\nexport default function SpaceInvadersCanvasGame() {\r\n  return (\r\n    <Suspense Loader={<Loader />}>\r\n      <Canvas>\r\n        <Circle />\r\n      </Canvas>\r\n    </Suspense>\r\n  );\r\n}\r\n","import SpaceInvadersContainer from \"../gmaes/spaceInvaders\";\r\nimport SpaceInvadersCanvas from \"../gmaes/spaceInvaders/spaceInvadersCanvas\";\r\nimport SpaceInvadersCanvasGame from \"../gmaes/spaceInvaders/spaceInvadersCanvasGame\";\r\nexport default function Abduction() {\r\n  return (\r\n    <div className=\"moon bg-white fixed flex items-center justify-center w-screen h-screen top-0 left-0 z-20\">\r\n      {/* <SpaceInvadersContainer />\r\n      <SpaceInvadersCanvas /> */}\r\n      <SpaceInvadersCanvasGame/>\r\n    </div>\r\n  );\r\n}\r\n","import * as THREE from \"three\";\r\nimport { extend } from \"@react-three/fiber\";\r\n\r\nclass SquareShaderMaterial extends THREE.ShaderMaterial {\r\n  constructor(texture) {\r\n    super({\r\n      vertexShader: `varying vec2 vUv;\r\n      void main() {\r\n        vUv = uv;\r\n        gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\r\n      }`,\r\n      fragmentShader: `#include <common>\r\n\r\n      uniform vec3 u_resolution;\r\n      uniform float u_time;\r\n      uniform sampler2D iChannel0;\r\n    \r\n      // By Daedelus: https://www.shadertoy.com/user/Daedelus\r\n      // license: Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License.\r\n      #define TIMESCALE 0.25 \r\n      #define TILES 8\r\n      #define COLOR 0.7, 1.6, 2.8\r\n    \r\n      void mainImage( out vec4 fragColor, in vec2 fragCoord )\r\n      {\r\n        float aspect_ratio = u_resolution.y/u_resolution.x;\r\n        vec2 uv = fragCoord.xy / u_resolution.x;\r\n        uv -= vec2(0.5, 0.5 * aspect_ratio);\r\n        float rot = radians(-30. -u_time); // radians(45.0*sin(u_time));\r\n        mat2 rotation_matrix = mat2(cos(rot), -sin(rot), sin(rot), cos(rot));\r\n        uv = rotation_matrix * uv;\r\n        vec2 scaled_uv = 20.0 * uv; \r\n        vec2 tile = fract(scaled_uv);\r\n        float tile_dist = min(min(tile.x, 1.0-tile.x), min(tile.y, 1.0-tile.y));\r\n        float square_dist = length(floor(scaled_uv));\r\n        \r\n        float edge = sin(u_time-square_dist*20.);\r\n        edge = mod(edge * edge, edge / edge);\r\n\r\n        float value = mix(tile_dist, 1.0-tile_dist, step(1.0, edge));\r\n        edge = pow(abs(1.0-edge), 2.2) * 0.5;\r\n        \r\n        value = smoothstep( edge-0.05, edge, 0.95*value);\r\n        \r\n        \r\n        value += square_dist*.1;\r\n        value *= 0.8 - 0.2;\r\n        fragColor = vec4(pow(value, 2.), pow(value, 1.5), pow(value, 1.2), 1.);\r\n      }\r\n    \r\n      varying vec2 vUv;\r\n    \r\n      void main() {\r\n        mainImage(gl_FragColor, vUv * u_resolution.xy);\r\n      }\r\n      `,\r\n      uniforms: {\r\n        iChannel0: { value: texture },\r\n        u_time: { type: \"f\", value: 0.05 },\r\n        u_speed: { type: \"f\", value: performance.now() },\r\n        u_mouse: { type: \"f\", value: { x: 0, y: 0 } },\r\n        u_resolution: {\r\n          type: \"v2\",\r\n          value: new THREE.Vector2(window.innerWidth, window.innerWidth),\r\n        },\r\n      },\r\n      transparent: true,\r\n      blending: THREE.NormalBlending,\r\n      depthWrite: false,\r\n    });\r\n  }\r\n}\r\n\r\nextend({  SquareShaderMaterial });\r\n","import React, { useRef } from \"react\";\r\nimport { useFrame } from \"@react-three/fiber\";\r\nimport { useForwardRaycast } from \"../hooks\";\r\nexport default function AnimatedMesh({ animate, children, ...props }) {\r\n  const meshRef = useRef();\r\n  const raycast = useForwardRaycast(meshRef);\r\n  const AnimateFrame = ({ meshRef }) => {\r\n    useFrame(({ clock }, delta) => {\r\n      meshRef?.current && animate({ meshRef, clock, delta, raycast });\r\n    });\r\n    return null;\r\n  };\r\n  return (\r\n    <mesh ref={meshRef} transparent={true}  {...props}>\r\n      {meshRef && animate && <AnimateFrame meshRef={meshRef} />}\r\n      {children}\r\n    </mesh>\r\n  );\r\n}\r\n","import React, { useRef } from \"react\";\r\nimport { useFrame } from \"@react-three/fiber\";\r\nimport { DoubleSide } from \"three\";\r\nimport {FormatTexture,useForwardRaycast} from \"../hooks\";\r\nconst Planet = ({\r\n  heightMapSrc,\r\n  AO,\r\n  bumpScale,\r\n  smokeScale,\r\n  textureMapSrc,\r\n  normalMapSrc,\r\n  smoothMapSrc,\r\n  metallicMapSrc,\r\n  edgeMapSrc,\r\n  args,\r\n  animate,\r\n  ...props\r\n}) => {\r\n  // not sure where to add this map will do rnd\r\n  // const smoothMap = FormatTexture(smoothMapSrc);\r\n\r\n  const heightMap = FormatTexture(heightMapSrc);\r\n  const AoTextureMap = FormatTexture(AO);\r\n  const textureMap = FormatTexture(textureMapSrc);\r\n  const normalMap = FormatTexture(normalMapSrc);\r\n  const metallicMap = FormatTexture(metallicMapSrc);\r\n  const edgeMap = FormatTexture(edgeMapSrc);\r\n  const TerrainMaterialRef = useRef();\r\n  const raycast = useForwardRaycast(TerrainMaterialRef);\r\n  const AnimateFrame = ({ meshRef }) => {\r\n    useFrame(({ clock }, delta) => {\r\n      animate({ meshRef, clock, delta,raycast });\r\n    });\r\n  };\r\n  return (\r\n      <mesh transparent={true}  {...props} ref={TerrainMaterialRef}>\r\n      {animate && <AnimateFrame meshRef={TerrainMaterialRef} />}\r\n        <sphereGeometry\r\n          attach=\"geometry\"\r\n          args={args}\r\n          receiveShadow\r\n          transparent={true}\r\n        />\r\n        <meshPhongMaterial\r\n          bumpScale={bumpScale}\r\n          attach=\"material\"\r\n          map={textureMap}\r\n          aoMap={AoTextureMap}\r\n          bumpMap={heightMap}\r\n          lightMap={edgeMap}\r\n          metalnessMap={metallicMap}\r\n          normalMap={normalMap}\r\n          side={DoubleSide}\r\n        />\r\n      </mesh>\r\n  );\r\n};\r\nexport default Planet;\r\n"],"names":["GlassButton","_ref","children","props","_objectWithoutProperties","_excluded","_jsx","_objectSpread","className","useMouseMoving","_useState","useState","x","y","_useState2","_slicedToArray","mousePosition","setMousePosition","getMouseEvent","event","clientX","clientY","useEffect","window","addEventListener","removeEventListener","callback","resizeHandler","useForwardRaycast","obj","raycaster","useMemo","Raycaster","pos","Vector3","dir","scene","useThree","state","current","set","getWorldPosition","getWorldDirection","intersectObjects","useResize","width","innerWidth","height","innerHeight","windowSize","setWindowSize","ProgressiveLightMap","renderer","_this","res","arguments","length","undefined","_classCallCheck","this","lightMapContainers","compiled","THREE","background","tinyTarget","buffer1Active","firstUpdate","warned","format","test","navigator","userAgent","progressiveLightMap1","type","progressiveLightMap2","texture","channel","uvMat","uniforms","onBeforeCompile","shader","vertexShader","slice","bodyStart","fragmentShader","indexOf","previousShadowMap","value","averagingWindow","userData","_createClass","key","objects","uv_boxes","padding","ob","object","isLight","attach","geometry","hasAttribute","blurringPlane","_initializeBlurPlane","material","lightMap","dithering","castShadow","receiveShadow","renderOrder","push","w","h","index","basicMat","console","warn","dimensions","boxes","_step","area","maxWidth","_iterator","_createForOfIteratorHelper","s","n","done","box","Math","max","err","e","f","sort","a","b","_step2","spaces","ceil","sqrt","Infinity","_iterator2","i","space","last","pop","fill","potpack","forEach","uv1","getAttribute","clone","array","itemSize","setAttribute","needsUpdate","camera","blendWindow","blurEdges","oldTarget","getRenderTarget","visible","l","oldScene","parent","setRenderTarget","render","oldFrustumCulled","frustumCulled","activeMap","inactiveMap","position","labelMesh","labelMaterial","map","side","labelPlane","add","copy","_this2","blurMaterial","pixelOffset","polygonOffset","polygonOffsetFactor","polygonOffsetUnits","name","depthWrite","extend","RainMaterial","_THREE$ShaderMaterial","_inherits","_super","_createSuper","call","iChannel0","u_time","u_speed","performance","now","u_mouse","u_resolution","transparent","blending","SquarePatternShaderMaterial","CloudShaderMaterial","SimpleShader","iChannel1","URL","concat","random","useGLTF","Canvas","ctx","setCtx","canvasRef","useRef","loaded","getContext","clearRect","canvas","fillStyle","beginPath","arc","PI","ref","Circle","SpaceInvadersCanvasGame","Suspense","Loader","Abduction","SquareShaderMaterial","AnimatedMesh","animate","meshRef","raycast","AnimateFrame","_ref2","useFrame","_ref3","delta","clock","_jsxs","heightMapSrc","AO","bumpScale","textureMapSrc","smokeScale","normalMapSrc","metallicMapSrc","smoothMapSrc","edgeMapSrc","args","heightMap","FormatTexture","AoTextureMap","textureMap","normalMap","metallicMap","edgeMap","TerrainMaterialRef","aoMap","bumpMap","metalnessMap","DoubleSide"],"sourceRoot":""}