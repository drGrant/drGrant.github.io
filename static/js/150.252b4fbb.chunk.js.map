{"version":3,"file":"static/js/150.252b4fbb.chunk.js","mappings":"2LAAe,SAASA,EAAWC,GAA0B,IAAvBC,EAAQD,EAARC,SAAaC,GAAKC,EAAAA,EAAAA,GAAAH,EAAAI,GACtD,OACEC,EAAAA,EAAAA,KAAA,UAAAC,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAA,CAAQC,UAAU,2BAA8BL,GAAK,IAAAD,UACnDI,EAAAA,EAAAA,KAAA,QAAME,UAAU,wCAAuCN,SAAEA,MAG/D,C,sLC4BA,EAhCoB,SAAAO,GAEhB,IAAAC,GAAoCC,EAAAA,EAAAA,WAAS,GAAMC,GAAAC,EAAAA,EAAAA,GAAAH,EAAA,GAA5CI,EAAUF,EAAA,GAAEG,EAAaH,EAAA,GAG9BI,EAAc,SAAHf,GAASA,EAAHgB,MACPR,GACVM,GAAc,EAElB,EAGMG,EAAY,SAAHC,GAASA,EAAHF,MACPR,GACVM,GAAc,EAElB,EAaA,OAVAK,EAAAA,EAAAA,YAAU,WAIR,OAHAC,OAAOC,iBAAiB,UAAWN,GACnCK,OAAOC,iBAAiB,QAASJ,GAE1B,WACLG,OAAOE,oBAAoB,UAAWP,GACtCK,OAAOE,oBAAoB,QAASL,EACtC,CACF,GAAG,IAEIJ,CACT,E,oBChBA,EAdkB,SAACU,GACjB,IAAMC,EAAgB,SAACC,GAAK,OAC1BF,EAASE,EAAO,GAGlBN,EAAAA,EAAAA,YAAU,WAGR,OAFAC,OAAOC,iBAAiB,QAASG,GAE1B,WACLJ,OAAOE,oBAAoB,QAASE,EACtC,CACF,GACF,E,wFCZe,SAASE,IACtB,IAAAjB,GAAoCC,EAAAA,EAAAA,UAAS,CAC3CiB,MAAOP,OAAOQ,WACdC,OAAQT,OAAOU,cACfnB,GAAAC,EAAAA,EAAAA,GAAAH,EAAA,GAHKsB,EAAUpB,EAAA,GAAEqB,EAAarB,EAAA,GAK1Ba,EAAgB,WACpBQ,EAAc,CACZL,MAAOP,OAAOQ,WACdC,OAAQT,OAAOU,aAEnB,EAWA,OARAX,EAAAA,EAAAA,YAAU,WAGR,OAFAC,OAAOC,iBAAiB,SAAUG,GAE3B,WACLJ,OAAOE,oBAAoB,SAAUE,EACvC,CACF,GAAG,IAEIO,CACT,C,kNClBO,SAASE,EAAQjC,GASpB,IARFC,EAAQD,EAARC,SAAQiC,EAAAlC,EACRmC,SAAAA,OAAQ,IAAAD,EAAG,CAAC,GAAI,IAAK,KAAIA,EAAAE,EAAApC,EACzBqC,WAAAA,OAAU,IAAAD,EAAG,KAAIA,EAAAE,EAAAtC,EACjBuC,UAAAA,OAAS,IAAAD,EAAG,EAACA,EAAAE,EAAAxC,EACbyC,QAAAA,OAAO,IAAAD,EAAG,GAAGA,EAAAE,EAAA1C,EACb2C,OAAAA,OAAM,IAAAD,EAAG,GAAEA,EAAAE,EAAA5C,EACX6C,MAAAA,OAAK,IAAAD,EAAG,GAAEA,EAAAE,EAAA9C,EACV+C,OAAAA,OAAM,IAAAD,EAAG,GAAEA,EAELE,GAASC,EAAAA,EAAAA,UACTC,GAAYD,EAAAA,EAAAA,UACZE,GAAKC,EAAAA,EAAAA,IAAS,SAACC,GAAK,OAAKA,EAAMF,EAAE,IACjCG,GAASF,EAAAA,EAAAA,IAAS,SAACC,GAAK,OAAKA,EAAMC,MAAM,IACzCC,GAAYC,EAAAA,EAAAA,UAChB,kBACEC,EAAAA,EAAAA,GAAIC,MAAMX,IAASY,KAAI,SAACC,EAAGC,GACzB,IAAIC,EAAW,IAAIC,EAAAA,iBAAuB,SAAUxB,EAAYQ,GAQhE,OAPAe,EAASE,YAAa,EACtBF,EAASG,OAAOX,OAAOY,KAAO,IAC9BJ,EAASG,OAAOX,OAAOa,IAAM,IAC7BL,EAASG,OAAOX,OAAOc,MAAQN,EAASG,OAAOX,OAAOe,IAAM,IAC5DP,EAASG,OAAOX,OAAOgB,KAAOR,EAASG,OAAOX,OAAOiB,QAAU,IAC/DT,EAASG,OAAOO,QAAQ7C,MAAQmC,EAASG,OAAOO,QAAQ3C,OACtDQ,EAAa,EACRyB,CACT,GAAE,GACJ,CAACvB,EAAWQ,EAAQV,IAqCtB,OAlCAoC,EAAAA,EAAAA,kBAAgB,WACd,IAAMC,EAAWxB,EAAUyB,QACrBC,GAAOnB,EAAAA,EAAAA,GAAOF,GAGpB,OAFAP,EAAO2B,QAAQE,UAAS,SAACC,GAAK,OAAKA,EAAMC,QAAUH,EAAQI,KAAKF,EAAM,IACtEJ,EAASO,qBAAqBL,GACvB,WACLF,EAASQ,cAAgB,KACzBR,EAASS,mBAAqB,GAC9BT,EAASU,UAAW,EACpBV,EAASW,MAAMC,OACjB,CACF,GAAG,CAACrF,KAEJsF,EAAAA,EAAAA,IAAS,WACPrC,EAAUyB,QAAQa,OAAOlC,EAAQT,GAAO,GACxC,IAAK,IAAI4C,EAAI,EAAGA,EAAIlC,EAAUmC,OAAQD,IACpC,GAAIE,KAAKC,SAAWnD,EAClBc,EAAUkC,GAAGtD,SAAS0D,IACpB1D,EAAS,GAAKwD,KAAKC,SAAWjD,EAC9BR,EAAS,GAAKwD,KAAKC,SAAWjD,EAC9BR,EAAS,GAAKwD,KAAKC,SAAWjD,OAE7B,CACH,IAAImD,EAASH,KAAKI,KAAK,EAAIJ,KAAKC,SAAW,GAAKD,KAAKK,GAAK,EACtDC,EAAM,EAAIN,KAAKK,GAAKL,KAAKC,SAC7BrC,EAAUkC,GAAGtD,SAAS0D,IACpBF,KAAKO,IAAIJ,GAAUH,KAAKO,IAAID,GAAO,IACnCN,KAAKQ,IAAIR,KAAKO,IAAIJ,GAAUH,KAAKS,IAAIH,GAAO,KACzB,IAAnBN,KAAKS,IAAIN,GAEb,CAEJ,KAGEO,EAAAA,EAAAA,MAAAC,EAAAA,SAAA,CAAArG,SAAA,EACEI,EAAAA,EAAAA,KAAA,uBAAqBkG,IAAKrD,EAAWsD,KAAM,CAACrD,EAAId,MAChDhC,EAAAA,EAAAA,KAAA,SAAOkG,IAAKvD,EAAO/C,SAAEA,MAG3B,EAxEAwG,EAAAA,EAAAA,GAAO,CAAEC,oBAAAA,EAAAA,I,yECFHC,EAAY,SAAAC,IAAAC,EAAAA,EAAAA,GAAAF,EAAAC,GAAA,IAAAE,GAAAC,EAAAA,EAAAA,GAAAJ,GAChB,SAAAA,EAAYK,GAAS,OAAAC,EAAAA,EAAAA,GAAA,KAAAN,GAAAG,EAAAI,KAAA,KACb,CACJC,aAAa,wJAKbC,eAAe,2pDAmDfC,SAAU,CACRC,UAAW,CAAEC,MAAOP,GACpBQ,OAAQ,CAAEC,KAAM,IAAKF,MAAO,KAC5BG,QAAS,CAAED,KAAM,IAAKF,MAAOI,YAAYC,OACzCC,QAAS,CAAEJ,KAAM,IAAKF,MAAO,CAAEO,EAAG,EAAGC,EAAG,IACxCC,aAAc,CACZP,KAAM,KACNF,MAAO,IAAIxD,EAAAA,QAAc3C,OAAOQ,WAAYR,OAAOQ,cAGvDqG,aAAa,EACbC,SAAUnE,EAAAA,eACVoE,YAAY,GAEhB,CAAC,OAAAC,EAAAA,EAAAA,GAAAzB,EAAA,CAzEe,CAAS5C,EAAAA,iBA4E3B0C,EAAAA,EAAAA,GAAO,CAAEE,aAAAA,IC9EmC,IAEtC0B,EAAoB,SAAAzB,IAAAC,EAAAA,EAAAA,GAAAwB,EAAAzB,GAAA,IAAAE,GAAAC,EAAAA,EAAAA,GAAAsB,GACxB,SAAAA,EAAYrB,GAAS,OAAAC,EAAAA,EAAAA,GAAA,KAAAoB,GAAAvB,EAAAI,KAAA,KACb,CACJC,aAAa,wJAKbC,eAAe,8kDA6CfC,SAAU,CACRC,UAAW,CAAEC,MAAOP,GACpBQ,OAAQ,CAAEC,KAAM,IAAKF,MAAO,KAC5BG,QAAS,CAAED,KAAM,IAAKF,MAAOI,YAAYC,OACzCC,QAAS,CAAEJ,KAAM,IAAKF,MAAO,CAAEO,EAAG,EAAGC,EAAG,IACxCC,aAAc,CACZP,KAAM,KACNF,MAAO,IAAIxD,EAAAA,QAAc3C,OAAOQ,WAAYR,OAAOQ,cAGvDqG,aAAa,EACbC,SAAUnE,EAAAA,eACVoE,YAAY,GAEhB,CAAC,OAAAC,EAAAA,EAAAA,GAAAC,EAAA,CAnEuB,CAAStE,EAAAA,iBAsEnC0C,EAAAA,EAAAA,GAAO,CAAG4B,qBAAAA,ICxEkC,IAEtCC,EAA2B,SAAA1B,IAAAC,EAAAA,EAAAA,GAAAyB,EAAA1B,GAAA,IAAAE,GAAAC,EAAAA,EAAAA,GAAAuB,GAC/B,SAAAA,EAAYtB,GAAS,OAAAC,EAAAA,EAAAA,GAAA,KAAAqB,GAAAxB,EAAAI,KAAA,KACb,CACJC,aAAa,wJAKbC,eAAe,4vDAuDfC,SAAU,CACRC,UAAW,CAAEC,MAAOP,GACpBQ,OAAQ,CAAEC,KAAM,IAAKF,MAAO,KAC5BG,QAAS,CAAED,KAAM,IAAKF,MAAOI,YAAYC,OACzCC,QAAS,CAAEJ,KAAM,IAAKF,MAAO,CAAEO,EAAG,EAAGC,EAAG,IACxCC,aAAc,CACZP,KAAM,KACNF,MAAO,IAAIxD,EAAAA,QAAc3C,OAAOQ,WAAYR,OAAOQ,cAGvDqG,aAAa,EACbC,SAAUnE,EAAAA,eACVoE,YAAY,GAEhB,CAAC,OAAAC,EAAAA,EAAAA,GAAAE,EAAA,CA7E8B,CAASvE,EAAAA,iBAgF1C0C,EAAAA,EAAAA,GAAO,CAAE6B,4BAAAA,I,cC/EHC,EAAmB,SAAA3B,IAAAC,EAAAA,EAAAA,GAAA0B,EAAA3B,GAAA,IAAAE,GAAAC,EAAAA,EAAAA,GAAAwB,GACvB,SAAAA,EAAYvB,GAAS,OAAAC,EAAAA,EAAAA,GAAA,KAAAsB,GAAAzB,EAAAI,KAAA,MAAA5G,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAA,GAElBkI,EAAAA,GAAY,IAEXnB,SAAU,CACRC,UAAW,CAAEC,MAAOP,GACpByB,UAAW,CAAElB,MAAOP,GACpBQ,OAAQ,CAAEC,KAAM,IAAKF,MAAO,KAC5BG,QAAS,CAAED,KAAM,IAAKF,MAAOI,YAAYC,OACzCC,QAAS,CAAEJ,KAAM,IAAKF,MAAO,CAAEO,EAAG,EAAGC,EAAG,IACxCC,aAAc,CACZP,KAAM,KACNF,MAAO,IAAIxD,EAAAA,QAAc3C,OAAOQ,WAAYR,OAAOQ,cAGvDqG,aAAa,EACbC,SAAUnE,EAAAA,eACVoE,YAAY,IAEhB,CAAC,OAAAC,EAAAA,EAAAA,GAAAG,EAAA,CApBsB,CAASxE,EAAAA,iBAuBlC0C,EAAAA,EAAAA,GAAO,CAAG8B,oBAAAA,I,kBCdJG,EAAG,wBAAAC,OAA2C,IAAhBhD,KAAKC,UAE1B,SAASgD,EAAG5I,GAAyB,IAAtB6I,EAAO7I,EAAP6I,QAAY3I,GAAKC,EAAAA,EAAAA,GAAAH,EAAAI,GACvC0I,GAAQ7F,EAAAA,EAAAA,UACR8F,EAAc,EAAC9F,EAAAA,EAAAA,WACf+F,EAAS,EAAC/F,EAAAA,EAAAA,WAAUA,EAAAA,EAAAA,WAAUA,EAAAA,EAAAA,WAAUA,EAAAA,EAAAA,WACtCgG,GAAUC,EAAAA,EAAAA,GAAQR,GAAlBO,MACFE,GAAeC,EAAAA,EAAAA,GAAc,2BAC7BC,EAAe,SAAHnI,GAAqB,IAAfoI,EAAOpI,EAAPoI,QAsBtB,OArBA/D,EAAAA,EAAAA,IAAS,SAAAgE,EAAYC,GAAW,IAApBC,EAAKF,EAALE,MACC,OAAPH,QAAO,IAAPA,GAAAA,EAAS3E,SACXkE,EAAQ,CAAES,QAAAA,EAASG,MAAAA,EAAOD,MAAAA,IAGxBR,EAAOtD,OAAS,GAClBsD,EAAOU,SACL,SAACnD,GAAG,OACFA,EAAI5B,UACH4B,EAAI5B,QAAQ0C,SAASG,OAAOD,MAAQkC,EAAME,YAAY,IAGzDZ,EAAYrD,OAAS,GACvBqD,EAAYW,SAAQ,SAACnD,GACfA,EAAI5B,UACN4B,EAAI5B,QAAQiF,SAAS7B,GAAK,OAG9B,GAEJ,IACO,IACT,EACA,OACE1B,EAAAA,EAAAA,MAAA,SAAA/F,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAA,CAAOiG,IAAKuC,GAAW5I,GAAK,IAAE2J,QAAS,KAAK5J,SAAA,CACzC4I,IAAWxI,EAAAA,EAAAA,KAACgJ,EAAY,CAACC,QAASR,KACnCzI,EAAAA,EAAAA,KAAA,QACE2D,YAAU,EACV8F,eAAa,EACbC,SAAUd,EAAMe,KAAKD,SACrBE,SAAUhB,EAAMe,KAAKC,SAAShK,UAE9BI,EAAAA,EAAAA,KAAA,gBACEkG,IAAKyC,EAAO,GACZhC,QAASmC,EACTe,OAAO,gBAGX7J,EAAAA,EAAAA,KAAA,QACE2D,YAAU,EACV8F,eAAa,EACbC,SAAUd,EAAMkB,KAAKJ,SACrBE,SAAUhB,EAAMkB,KAAKF,SAAShK,UAE9BI,EAAAA,EAAAA,KAAA,wBACEkG,IAAKyC,EAAO,GACZhC,QAASmC,EACTe,OAAO,gBAGX7J,EAAAA,EAAAA,KAAA,QACEkG,IAAKwC,EAAY,GACjB/E,YAAU,EACV8F,eAAa,EACbC,SAAUd,EAAMlG,OAAOgH,SACvBE,SAAUhB,EAAMlG,OAAOkH,SAAShK,UAEhCI,EAAAA,EAAAA,KAAA,gBACEkG,IAAKyC,EAAO,GACZhC,QAASmC,EACTe,OAAO,gBAGX7J,EAAAA,EAAAA,KAAA,QACE2D,YAAU,EACV8F,eAAa,EACbC,SAAUd,EAAMmB,KAAKL,SACrBE,SAAUhB,EAAMmB,KAAKH,SAAShK,UAE9BI,EAAAA,EAAAA,KAAA,wBACEkG,IAAKyC,EAAO,GACZhC,QAASmC,EACTe,OAAO,kBAKjB,CAEAhB,EAAAA,EAAAA,QAAgBR,G,kCC1FD,SAAS2B,IACtB,IAAMC,GAAOC,EAAAA,EAAAA,GAAYlH,EAAAA,GACnB1B,EAAQ2I,EAAKE,cAAc7I,MAC7B8I,GAAkBxH,EAAAA,EAAAA,UACpByH,GAAMzH,EAAAA,EAAAA,QAAO,GACb0H,GAAW1H,EAAAA,EAAAA,QAAO,IAClB2H,GAAUC,EAAAA,EAAAA,IAAYP,EAAKE,cAAcM,UAoErCC,GAAYC,EAAAA,EAAAA,IAAY,aACxBC,GAAaD,EAAAA,EAAAA,IAAY,cACzBE,GAAUF,EAAAA,EAAAA,IAAY,WACtBG,GAAWC,EAAAA,EAAAA,cAAY,WAC3Bd,EAAKE,cAAca,OAAO3F,OAAS,EAC9BrC,EAAAA,EAAAA,cAAAA,QAA6B,EAC7BA,EAAAA,EAAAA,cAAAA,QAA6B,EAClCA,EAAAA,EAAAA,cAAAA,UAA+B,CACjC,GAAG,CAACiH,KACJ9G,EAAAA,EAAAA,UAAQ,WACD8G,EAAKE,cAAcc,QACtBP,GAEQT,EAAKE,cAAce,OAAS5J,IAAU,IACxC0B,EAAAA,EAAAA,cAAAA,OAA6BiH,EAAKE,cAAce,OAAS,GAE/DN,GAEQX,EAAKE,cAAce,OAAS5J,EAAQA,EAAQ,IAC9C0B,EAAAA,EAAAA,cAAAA,OAA6BiH,EAAKE,cAAce,OAAS,GAE/DL,GAEI7H,EAAAA,EAAAA,cAAAA,MAAAA,KAA+BiH,EAAKE,cAAce,QAK1D,GAAG,CAACR,EAAWE,EAAYC,IAE3B,IAAMM,GAAeJ,EAAAA,EAAAA,cAAY,WAC/B,IAAMK,EAAcnB,EAAKE,cAAca,OAAO,GAAK1J,IAAU,EAC3D+J,EACEpB,EAAKE,cAAca,OAAOf,EAAKE,cAAca,OAAO3F,OAAS,GAC3D/D,IACFA,EAAQ,EACZ,IAAK2I,EAAKE,cAAcc,MAAO,CACY,IAArChB,EAAKE,cAAca,OAAO3F,QAAcyF,IAC5C,IAAK,IAAItH,EAAI,EAAGA,EAAIyG,EAAKE,cAAca,OAAO3F,OAAQ7B,IACpD,GAAIyG,EAAKE,cAAca,OAAOxH,GAAK+G,EAAQlF,OAAS/D,EAGlD,OAFAgK,QAAQC,IAAI,CAAE/H,EAAAA,GAAKyG,EAAKE,cAAca,OAAOxH,GAAI+G,EAAQlF,aACzDyF,IAIJ,GAAIO,GAAgBhB,EAAI/F,QAAU,EAAG,CACnC,IAAK,IAAId,EAAI,EAAGA,EAAIyG,EAAKE,cAAca,OAAO3F,OAAQ7B,IACpDR,EAAAA,EAAAA,cAAAA,OAA2BQ,IAAMlC,EAAQ,EAE3C+I,EAAI/F,SAAW,CACjB,CACA,GAAI8G,GAAef,EAAI/F,QAAU,EAAG,CAClC,IAAK,IAAId,EAAI,EAAGA,EAAIyG,EAAKE,cAAca,OAAO3F,OAAQ7B,IACpDR,EAAAA,EAAAA,cAAAA,OAA2BQ,IAAMlC,EAAQ,EAE3C+I,EAAI/F,QAAU,CAChB,CACA,IAAK,IAAId,EAAI,EAAGA,EAAIyG,EAAKE,cAAca,OAAO3F,OAAQ7B,IACpDR,EAAAA,EAAAA,cAAAA,OAA2BQ,IAAM6G,EAAI/F,QAEvC,GAAI2F,EAAKE,cAAca,OAAOQ,SAASvB,EAAKE,cAAce,QAExD,YADAJ,GAGJ,CACF,GAAG,CAACb,EAAMI,EAAKE,EAASO,EAAUxJ,IAC5BmK,GAAaV,EAAAA,EAAAA,cAAY,WAC7B,IAAKd,EAAKE,cAAcc,OAClBhB,EAAKE,cAAcuB,MAAMrG,OAAS,EACpC,IADwC,IAADsG,EAAA,WAErC3I,EAAAA,EAAAA,cAAAA,MAA0B4I,IAAMtK,EAChC,IAAIQ,EAAWmI,EAAKE,cAAcuB,MAAME,IACpC9J,GAAYR,GAASuK,MAAM/J,MAC7BkB,EAAAA,EAAAA,cAAAA,MAA4BiH,EAAKE,cAAcuB,MAAMI,QACnD,SAACC,GAAG,OAAKA,EAAM,IAAMF,MAAME,IAAQA,CAAG,KAGtC9B,EAAKE,cAAca,OAAOQ,SAAS1J,KAErCkB,EAAAA,EAAAA,cAAAA,KAAAA,KAA8BlB,GAC9BkB,EAAAA,EAAAA,cAAAA,OAA6BiH,EAAKE,cAAca,OAAOc,QACrD,SAACC,GAAG,OAAKA,IAAQjK,GAAYiK,CAAG,IAElC/I,EAAAA,EAAAA,cAAAA,MAA4BiH,EAAKE,cAAcuB,MAAMI,QACnD,SAACC,GAAG,OAAKA,IAAQjK,GAAYiK,CAAG,IAGtC,EAlBSH,EAAI,EAAGA,EAAI3B,EAAKE,cAAcuB,MAAMrG,OAAQuG,IAAGD,GAqB9D,GAAG,CAAC1B,EAAM3I,IAEJ0K,GAAWjB,EAAAA,EAAAA,cAAY,WAC3BI,IACAM,GACF,GAAG,CAACN,EAAcM,IAYlB,OAXA3K,EAAAA,EAAAA,YAAU,WACR,IAAImL,GAAS,EAIb,OAHIA,GAAWhC,EAAKE,cAAcW,UAAab,EAAKE,cAAcc,QAChEb,EAAgB9F,QAAU4H,YAAYF,EAAU1B,EAAShG,UAEpD,WACL2H,GAAS,EACTE,cAAc/B,EAAgB9F,QAChC,CACF,GAAG,CAAC0H,EAAU1B,EAAUF,EAAiBH,KAGvCjK,EAAAA,EAAAA,KAAA,OAAKE,UAAU,sDAAqDN,SACjE2K,EAAQjH,KAhLK,SAACyI,GACjB,OAAI9B,EAAKE,cAAciC,KAAKZ,SAASO,IAEjC/L,EAAAA,EAAAA,KAAA,OACEE,UAAU,4DAA2DN,UAGrEI,EAAAA,EAAAA,KAAA,OAAKE,UAAU,6CAA4CN,UACzDI,EAAAA,EAAAA,KAACqM,EAAAA,IAAS,OAHPN,GASP9B,EAAKE,cAAca,OAAOQ,SAASvB,EAAKE,cAAce,SAEtDlL,EAAAA,EAAAA,KAAA,OAAKE,UAAU,8CAAkD6L,GAGjE9B,EAAKE,cAAca,OAAOQ,SAASO,IAEnC/L,EAAAA,EAAAA,KAAA,OACEE,UAAU,iDAAgDN,UAG1DI,EAAAA,EAAAA,KAACsM,EAAAA,IAAW,KAFPP,GAOT9B,EAAKE,cAAcuB,MAAMF,SAASO,IAClC9B,EAAKE,cAAce,SAAWa,GAG5B/F,EAAAA,EAAAA,MAAA,OACE9F,UAAU,iFAAgFN,SAAA,CAGzF,KACDI,EAAAA,EAAAA,KAACuM,EAAAA,IAAW,KACZvM,EAAAA,EAAAA,KAAA,OAAKE,UAAU,qFAAoFN,UACjGI,EAAAA,EAAAA,KAACwM,EAAAA,IAAc,CAACtM,UAAU,sBALvB6L,GAUP9B,EAAKE,cAAcuB,MAAMF,SAASO,IAElC/L,EAAAA,EAAAA,KAAA,OACEE,UAAU,4DAA2DN,UAGrEI,EAAAA,EAAAA,KAAA,OAAKE,UAAU,gEAA+DN,UAC5EI,EAAAA,EAAAA,KAACwM,EAAAA,IAAc,CAACtM,UAAU,qBAHvB6L,GAQP9B,EAAKE,cAAce,SAAWa,GAE9B/L,EAAAA,EAAAA,KAAA,OAAKE,UAAU,+BAA8BN,UAC3CI,EAAAA,EAAAA,KAACuM,EAAAA,IAAW,KADqCR,IAKhD/L,EAAAA,EAAAA,KAAA,OAAKE,UAAU,sBAA0B6L,EAClD,KAiHF,C,uBChMe,SAASU,IACtB,IAAMxC,GAAOC,EAAAA,EAAAA,GAAYlH,EAAAA,GACzB,OACEgD,EAAAA,EAAAA,MAAA,WAAS9F,UAAU,gDAA+CN,SAAA,EAChEI,EAAAA,EAAAA,KAACN,EAAAA,EAAW,CACVgN,QAAS,WACHzC,EAAKE,cAAce,OAASjB,EAAKE,cAAc7I,QAAU,IAC3D0B,EAAAA,EAAAA,cAAAA,OAA6BiH,EAAKE,cAAce,OAAS,EAC7D,EAAEtL,UAEFI,EAAAA,EAAAA,KAAA,QAAME,UAAU,aAAYN,UAC1BI,EAAAA,EAAAA,KAAC2M,EAAAA,IAAW,CAACzM,UAAU,yBAG3BF,EAAAA,EAAAA,KAACN,EAAAA,EAAW,CACVgN,QAAS,WACP1J,EAAAA,EAAAA,cAAAA,MAAAA,KAA+BiH,EAAKE,cAAce,OACpD,EAAEtL,UAEFI,EAAAA,EAAAA,KAAA,QAAME,UAAU,aAAYN,UAC1BI,EAAAA,EAAAA,KAACwM,EAAAA,IAAc,CAACtM,UAAU,yCAG9BF,EAAAA,EAAAA,KAACN,EAAAA,EAAW,CACVgN,QAAS,WAELzC,EAAKE,cAAce,OAASjB,EAAKE,cAAc7I,MAC/C2I,EAAKE,cAAc7I,MAAQ,IAE3B0B,EAAAA,EAAAA,cAAAA,OAA6BiH,EAAKE,cAAce,OAAS,EAC7D,EAAEtL,UAEFI,EAAAA,EAAAA,KAAA,QAAME,UAAU,aAAYN,UAC1BI,EAAAA,EAAAA,KAAC4M,EAAAA,IAAY,CAAC1M,UAAU,0BAKlC,CC3Ce,SAAS2M,IACtB,OACE7G,EAAAA,EAAAA,MAAA,MAAI9F,UAAU,uCAAsCN,SAAA,EAClDoG,EAAAA,EAAAA,MAAA,QAAM9F,UAAU,wEAAuEN,SAAA,EACrFI,EAAAA,EAAAA,KAAA,QAAME,UAAU,qDAAoDN,SAAC,QAE9D,QAED,KACRI,EAAAA,EAAAA,KAAA,QAAME,UAAU,OAAMN,SAAC,eAG7B,C,cCPe,SAASkN,IACtB,IAAM7C,GAAOC,EAAAA,EAAAA,GAAYlH,EAAAA,GACnB+J,GAAWC,EAAAA,EAAAA,MACjB,OAEEhH,EAAAA,EAAAA,MAAA,WAAS9F,UAAU,oCAAmCN,SAAA,EACtDI,EAAAA,EAAAA,KAACN,EAAAA,EAAW,CACVgN,QAAS,WACP1J,EAAAA,EAAAA,SAAiBiH,EAAKgD,QACtBjK,EAAAA,EAAAA,cAAAA,OAA6BiH,EAAKE,cAAcc,KAClD,EAAErL,SAEDqK,EAAKE,cAAcc,MAAQ,OAAS,WAEvCjL,EAAAA,EAAAA,KAACN,EAAAA,EAAW,CACVgN,QAAS,WACP1J,EAAAA,EAAAA,cAAAA,QAA0BI,EAAAA,EAAAA,GAAO6G,EAAKE,cAAc+C,cACpDlK,EAAAA,EAAAA,cAAAA,UAA+B,EAC/BA,EAAAA,EAAAA,cAAAA,OAA4B,EAC5BA,EAAAA,EAAAA,cAAAA,OAA6B,KAC7BA,EAAAA,EAAAA,cAAAA,KAA2B,GAC3BA,EAAAA,EAAAA,cAAAA,MAA4B,GAC5BA,EAAAA,EAAAA,cAAAA,OAA6BA,EAAAA,EAAAA,cAAAA,YAC/B,EAAEpD,SACH,aAGDI,EAAAA,EAAAA,KAACN,EAAAA,EAAW,CACVQ,UAAU,0BACVwM,QAAS,YACPS,EAAAA,EAAAA,IAA0BJ,GAAU,GACtC,EAAEnN,SACH,WAKL,CCrCe,SAASwN,IACtB,OACEpH,EAAAA,EAAAA,MAAA,OAAK9F,UAAU,2BAA0BN,SAAA,EACvCI,EAAAA,EAAAA,KAAC6M,EAAM,KACP7M,EAAAA,EAAAA,KAAC8M,EAAG,KACJ9M,EAAAA,EAAAA,KAACgK,EAAa,KACdhK,EAAAA,EAAAA,KAACyM,EAAa,MAGpB,C,wBCCe,SAASY,IACtB,IAAMpD,GAAOC,EAAAA,EAAAA,GAAYlH,EAAAA,GAOzBsK,GAA0BjM,EAAAA,EAAAA,MAAlBC,EAAKgM,EAALhM,MACFiM,GADeD,EAAN9L,QACE2B,EAAAA,EAAAA,UAAQ,kBAAM7B,EAAQ,MAAM,GAAE,CAACA,KAC1CkM,GAAUC,EAAAA,EAAAA,IAAU,CACxBC,IACEzD,EAAKE,cAAcwD,QAAU1D,EAAKE,cAAcW,SAC5C,EAAC8C,EAAAA,EAAAA,KAAO,MAAMA,EAAAA,EAAAA,IAAM,IAAM,GAC1B,GAAEA,EAAAA,EAAAA,IAAM,KAAMA,EAAAA,EAAAA,IAAM,KAAKA,EAAAA,EAAAA,IAAM,IACrCC,MACG5D,EAAKE,cAAcwD,QAAU1D,EAAKE,cAAcW,SAC7C,EAAC8C,EAAAA,EAAAA,KAAO,MAAMA,EAAAA,EAAAA,IAAM,IAAM,GAC1B,GAAEA,EAAAA,EAAAA,IAAM,MAAOA,EAAAA,EAAAA,IAAM,KAAKA,EAAAA,EAAAA,IAAM,IACtCE,IAAKP,EACD,GAAEK,EAAAA,EAAAA,IAAM,IAAIA,EAAAA,EAAAA,IAAM,MAAOA,EAAAA,EAAAA,KAAO,IAChC,GAAEA,EAAAA,EAAAA,IAAM,KAAKA,EAAAA,EAAAA,IAAM,IAAIA,EAAAA,EAAAA,IAAM,MAE7BG,EAAc,CAClBC,SAAWT,EAAiB,EAAN,GACtBU,WAAaV,EAAiB,GAAN,GACxBzL,SAAUyL,EAAuC,EAACK,EAAAA,EAAAA,IAAM,GAAI,GAAGA,EAAAA,EAAAA,KAAO,MAAlD,EAACA,EAAAA,EAAAA,IAAM,MAAMA,EAAAA,EAAAA,IAAM,IAAK,GAC5CrE,SAAUgE,EAAsB,EAACK,EAAAA,EAAAA,IAAM,IAAIA,EAAAA,EAAAA,KAAO,IAAK,GAAlC,CAAC,EAAG,EAAG,GAC5BM,MAAO,QAET,OACElI,EAAAA,EAAAA,MAAA,OAAK9F,UAAU,2FAA0FN,SAAA,EACvGI,EAAAA,EAAAA,KAACoN,EAAsB,KACvBpN,EAAAA,EAAAA,KAACmO,EAAAA,SAAQ,CAACC,UAAUpO,EAAAA,EAAAA,KAACqO,EAAAA,EAAM,IAAIzO,UAC7BoG,EAAAA,EAAAA,MAACsI,EAAAA,GAAM,CACLpO,UAAU,qBACVoH,YAAa,CAAEiH,IAAK,IACpBC,UAAW,SAAA7O,GAAa,IAAVmD,EAAEnD,EAAFmD,GACZA,EAAG2L,YAAc/K,EAAAA,kBACjBZ,EAAG4L,cAAc,IAAIhL,EAAAA,MAAY,WACnC,EACAiL,IAAK,CAAC,EAAG,KACT7L,GAAI,CAAE8L,OAAO,GACbC,MAAI,EACJC,QAAM,EACNC,SAAO,EAAAnP,SAAA,EAEPI,EAAAA,EAAAA,KAAA,OAAKkO,MAAM,YAAYrE,OAAO,MAAMhG,KAAM,EAAGC,IAAK,OAClDkC,EAAAA,EAAAA,MAACpE,GAAQ3B,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAA,GA9CH,CACZiC,UAAW,EACXE,QAAS,EACTE,OAAQ,EACRE,MAAO,MA0CkB,IAAA5C,SAAA,EACjBI,EAAAA,EAAAA,KAACgP,EAAAA,EAAK,KACNhP,EAAAA,EAAAA,KAACiP,EAAAA,EAAAA,MAAc,CAACnN,SAAU0L,EAAQM,IAAIlO,UACpCI,EAAAA,EAAAA,KAACuI,EAAG,CACFzG,SAAU,CAAC,EAAG,EAAG,GACjByH,SAAU,EAACqE,EAAAA,EAAAA,KAAO,KAAMA,EAAAA,EAAAA,IAAM,IAAIA,EAAAA,EAAAA,IAAM,IACxCpF,QAAS,SAAA3H,GAAgC,IAA7BoI,EAAOpI,EAAPoI,QAAcpI,EAALuI,MAAYvI,EAALsI,MAC1BF,EAAQ3E,QAAQiF,SAAS7B,GAAK,OAC9BuB,EAAQ3E,QAAQiF,SAAS9B,EACiB,GAAxCnC,KAAKS,IAAwB,MAApBuB,YAAYC,OACvB0B,EAAQ3E,QAAQiF,SAAS2F,EACiB,GAAxC5J,KAAKO,IAAwB,MAApByB,YAAYC,MACzB,OAIJvH,EAAAA,EAAAA,KAACmP,EAAAA,GAAMlP,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAA,CACLmP,UAAW,GACXjJ,KAAM,CAAC,GAAI,GAAI,IACfrE,SAAU,CAAC,GAAG8L,EAAAA,EAAAA,IAAM,IAAIA,EAAAA,EAAAA,KAAO,OAC3ByB,EAAAA,EAAAA,IAAe,mBAAiB,IACpC7G,QAAS,SAAAU,GAAgC,IAA7BD,EAAOC,EAAPD,QAAgBG,GAAFF,EAALC,MAAYD,EAALE,OACf,OAAPH,QAAO,IAAPA,GAAAA,EAAS3E,SACX2E,EAAQ3E,QAAQiF,SAAS/D,IACvB,GACAoI,EAAAA,EAAAA,IAAMxE,EAAMkG,QAAU,KACtB,EAGN,KAEDrF,EAAKE,cAAcwD,QAAU1D,EAAKE,cAAcW,WAC/C9E,EAAAA,EAAAA,MAACiJ,EAAAA,EAAAA,MAAc,CAACnN,SAAU0L,EAAQE,IAAI9N,SAAA,CACnC,KACDI,EAAAA,EAAAA,KAACuP,EAAAA,GAAUtP,EAAAA,EAAAA,GAAA,CAACuP,WAAW,WAAczB,QAGvC9D,EAAKE,cAAcwD,QAAU1D,EAAKE,cAAcW,WAChD9K,EAAAA,EAAAA,KAACiP,EAAAA,EAAAA,MAAc,CAACnN,SAAU0L,EAAQK,KAAKjO,UACrCI,EAAAA,EAAAA,KAACuP,EAAAA,GAAUtP,EAAAA,EAAAA,GAAA,CAACuP,WAAW,YAAezB,OAGxC9D,EAAKgD,UACLjN,EAAAA,EAAAA,KAACyP,EAAAA,EAAW,CACVC,OAAQ,IACRC,SAAU,GACVC,QAAS,GACTC,aAAc,IACdC,eAAgB,IAChBC,cAAe,iBAQ/B,C,8OC9DA,IAtDe,SAAHpQ,GAaL,IAZLqQ,EAAYrQ,EAAZqQ,aACAC,EAAEtQ,EAAFsQ,GACAb,EAASzP,EAATyP,UAEAc,GADUvQ,EAAVwQ,WACaxQ,EAAbuQ,eACAE,EAAYzQ,EAAZyQ,aAEAC,GADY1Q,EAAZ2Q,aACc3Q,EAAd0Q,gBACAE,EAAU5Q,EAAV4Q,WACApK,EAAIxG,EAAJwG,KACAqC,EAAO7I,EAAP6I,QACG3I,GAAKC,EAAAA,EAAAA,GAAAH,EAAAI,GAKFyQ,GAAYzH,EAAAA,EAAAA,GAAciH,GAC1BS,GAAe1H,EAAAA,EAAAA,GAAckH,GAC7BS,GAAa3H,EAAAA,EAAAA,GAAcmH,GAC3BS,GAAY5H,EAAAA,EAAAA,GAAcqH,GAC1BQ,GAAc7H,EAAAA,EAAAA,GAAcsH,GAC5BQ,GAAU9H,EAAAA,EAAAA,GAAcwH,GACxBO,GAAqBlO,EAAAA,EAAAA,UACrBoG,EAAe,SAAHnI,GAAqB,IAAfoI,EAAOpI,EAAPoI,SACtB/D,EAAAA,EAAAA,IAAS,SAAAgE,EAAYC,GAAW,IAApBC,EAAKF,EAALE,MACVZ,EAAQ,CAAES,QAAAA,EAASG,MAAAA,EAAOD,MAAAA,GAC5B,GACF,EACA,OACEnD,EAAAA,EAAAA,MAAA,SAAA/F,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAA,GAAWJ,GAAK,IAAAD,SAAA,CACb4I,IAAWxI,EAAAA,EAAAA,KAACgJ,EAAY,CAACC,QAAS6H,KACnC9K,EAAAA,EAAAA,MAAA,QAAME,IAAK4K,EAAoBlJ,aAAa,EAAKhI,SAAA,EAC/CI,EAAAA,EAAAA,KAAA,kBACE6J,OAAO,WACP1D,KAAMA,EACNsD,eAAa,EACb7B,aAAa,KAEf5H,EAAAA,EAAAA,KAAA,qBACEoP,UAAWA,EACXvF,OAAO,WACPvG,IAAKoN,EACLK,MAAON,EACPO,QAASR,EACTS,SAAUJ,EACVK,aAAcN,EACdD,UAAWA,EACXQ,KAAMC,EAAAA,mBAKhB,C","sources":["components/GlassButton.js","hooks/useKeyPress.js","hooks/useScroll.js","hooks/useResize.js","three/LightMap.js","shaders/RainShader.js","shaders/squaresShader.js","shaders/squaresPatternShader.js","shaders/CloudyTunnelShaderMaterial.js","three/Ufo.js","gmaes/spaceInvaders/spaceInvaders.js","gmaes/spaceInvaders/assets/MobileButtons.js","gmaes/spaceInvaders/assets/Header.js","gmaes/spaceInvaders/assets/Nav.js","gmaes/spaceInvaders/index.js","pages/abduction.js","three/planet.js"],"sourcesContent":["export default function GlassButton({ children, ...props }) {\r\n  return (\r\n    <button className=\"btn_glass_purple_parent\" {...props}>\r\n      <span className=\"btn_glass_purple gradient_purple_text\">{children}</span>\r\n    </button>\r\n  );\r\n}\r\n","import { useState, useEffect } from 'react';\r\n\r\nconst useKeyPress = targetKey=>{\r\n\r\n    const [keyPressed, setKeyPressed] = useState(false);\r\n\r\n// If pressed key is our target key then set to true\r\nconst downHandler = ({ key })=> {\r\n    if (key === targetKey) {\r\n      setKeyPressed(true);\r\n    }\r\n  }\r\n\r\n  // If released key is our target key then set to false\r\n  const upHandler = ({ key }) => {\r\n    if (key === targetKey) {\r\n      setKeyPressed(false);\r\n    }\r\n  };\r\n\r\n     // Add event listeners\r\n  useEffect(() => {\r\n    window.addEventListener('keydown', downHandler);\r\n    window.addEventListener('keyup', upHandler);\r\n    // Remove event listeners on cleanup\r\n    return () => {\r\n      window.removeEventListener('keydown', downHandler);\r\n      window.removeEventListener('keyup', upHandler);\r\n    };\r\n  }, []);\r\n\r\n  return keyPressed;\r\n}\r\n\r\nexport default useKeyPress","import { useEffect } from \"react\";\r\n\r\nconst useScroll = (callback) => {\r\n  const resizeHandler = (event) => \r\n    callback(event);\r\n  \r\n  // Add event listeners\r\n  useEffect(() => {\r\n    window.addEventListener(\"wheel\", resizeHandler);\r\n    // Remove event listeners on cleanup\r\n    return () => {\r\n      window.removeEventListener(\"wheel\", resizeHandler);\r\n    };\r\n  });\r\n};\r\n\r\nexport default useScroll;\r\n","import { useState, useEffect } from \"react\";\r\n\r\nexport default function useResize(){\r\n  const [windowSize, setWindowSize] = useState({\r\n    width: window.innerWidth,\r\n    height: window.innerHeight,\r\n  });\r\n\r\n  const resizeHandler = () => {\r\n    setWindowSize({\r\n      width: window.innerWidth,\r\n      height: window.innerHeight,\r\n    });\r\n  };\r\n\r\n  // Add event listeners\r\n  useEffect(() => {\r\n    window.addEventListener(\"resize\", resizeHandler);\r\n    // Remove event listeners on cleanup\r\n    return () => {\r\n      window.removeEventListener(\"resize\", resizeHandler);\r\n    };\r\n  }, []);\r\n\r\n  return windowSize;\r\n};\r\n","import * as THREE from \"three\";\r\nimport React, { useLayoutEffect, useRef, useMemo } from \"react\";\r\nimport { extend, useFrame, useThree } from \"@react-three/fiber\";\r\nimport { ProgressiveLightMap } from \"three/examples/jsm/misc/ProgressiveLightMap\";\r\n\r\nextend({ ProgressiveLightMap });\r\n\r\nexport function LightMap({\r\n  children,\r\n  position = [60, 150, 100],\r\n  resolution = 1024,\r\n  intensity = 1,\r\n  ambient = 0.5,\r\n  radius = 40,\r\n  blend = 40,\r\n  lights = 10,\r\n}) {\r\n  const rGroup = useRef();\r\n  const rLightmap = useRef();\r\n  const gl = useThree((state) => state.gl);\r\n  const camera = useThree((state) => state.camera);\r\n  const dirLights = useMemo(\r\n    () =>\r\n      [...Array(lights)].map((_, i) => {\r\n        let dirLight = new THREE.DirectionalLight(0xffffff, intensity / lights);\r\n        dirLight.castShadow = true;\r\n        dirLight.shadow.camera.near = 100;\r\n        dirLight.shadow.camera.far = 5000;\r\n        dirLight.shadow.camera.right = dirLight.shadow.camera.top = 150;\r\n        dirLight.shadow.camera.left = dirLight.shadow.camera.bottom = -150;\r\n        dirLight.shadow.mapSize.width = dirLight.shadow.mapSize.height =\r\n          resolution / 2;\r\n        return dirLight;\r\n      }),\r\n    [intensity, lights, resolution]\r\n  );\r\n\r\n  useLayoutEffect(() => {\r\n    const lightmap = rLightmap.current;\r\n    const objects = [...dirLights];\r\n    rGroup.current.traverse((child) => child.isMesh && objects.push(child));\r\n    lightmap.addObjectsToLightMap(objects);\r\n    return () => {\r\n      lightmap.blurringPlane = null;\r\n      lightmap.lightMapContainers = [];\r\n      lightmap.compiled = false;\r\n      lightmap.scene.clear();\r\n    };\r\n  }, [children]);\r\n\r\n  useFrame(() => {\r\n    rLightmap.current.update(camera, blend, true);\r\n    for (let l = 0; l < dirLights.length; l++) {\r\n      if (Math.random() > ambient)\r\n        dirLights[l].position.set(\r\n          position[0] + Math.random() * radius,\r\n          position[1] + Math.random() * radius,\r\n          position[2] + Math.random() * radius\r\n        );\r\n      else {\r\n        let lambda = Math.acos(2 * Math.random() - 1) - Math.PI / 2.0;\r\n        let phi = 2 * Math.PI * Math.random();\r\n        dirLights[l].position.set(\r\n          Math.cos(lambda) * Math.cos(phi) * 300,\r\n          Math.abs(Math.cos(lambda) * Math.sin(phi) * 300),\r\n          Math.sin(lambda) * 300\r\n        );\r\n      }\r\n    }\r\n  });\r\n\r\n  return (\r\n    <>\r\n      <progressiveLightMap ref={rLightmap} args={[gl, resolution]} />\r\n      <group ref={rGroup}>{children}</group>\r\n    </>\r\n  );\r\n}\r\n","import * as THREE from \"three\";\r\nimport { extend } from \"@react-three/fiber\";\r\n\r\nclass RainMaterial extends THREE.ShaderMaterial {\r\n  constructor(texture) {\r\n    super({\r\n      vertexShader: `varying vec2 vUv;\r\n      void main() {\r\n        vUv = uv;\r\n        gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\r\n      }`,\r\n      fragmentShader: `\r\n      uniform vec3 u_resolution;\r\n      uniform float u_time;\r\n\r\n      #define TAU 6.28318530718\r\n      #define MAX_ITER 5\r\n\r\n      void mainImage( out vec4 fragColor, in vec2 fragCoord ) \r\n      {\r\n        float time = u_time * .5+23.0;\r\n        // uv should be the 0-1 uv of texture...\r\n      vec2 uv = fragCoord.xy / u_resolution.xy;\r\n        \r\n    #ifdef SHOW_TILING\r\n      vec2 p = mod(uv*TAU*2.0, TAU)-250.0;\r\n    #else\r\n        vec2 p = mod(uv*TAU, TAU)-250.0;\r\n    #endif\r\n      vec2 i = vec2(p);\r\n      float c = 1.0;\r\n      float inten = .005;\r\n    \r\n      for (int n = 0; n < MAX_ITER; n++) \r\n      {\r\n        float t = time * (1.0 - (3.5 / float(n+1)));\r\n        i = p + vec2(cos(t - i.x) + sin(t + i.y), sin(t - i.y) + cos(t + i.x));\r\n        c += 1.0/length(vec2(p.x / (sin(i.x+t)/inten),p.y / (cos(i.y+t)/inten)));\r\n      }\r\n      c /= float(MAX_ITER);\r\n      c = 1.17-pow(c, 1.4);\r\n      vec3 colour = vec3(pow(abs(c), 8.0));\r\n        colour = clamp(colour + vec3(0.0, 0.35, 0.5), 0.0, 1.0);\r\n    \r\n      #ifdef SHOW_TILING\r\n      // Flash tile borders...\r\n      vec2 pixel = 2.0 / u_resolution.xy;\r\n      uv *= 2.0;\r\n      float f = floor(mod(u_time*.5, 2.0)); \t// Flash value.\r\n      vec2 first = step(pixel, uv) * f;\t\t   \t// Rule out first screen pixels and flash.\r\n      uv  = step(fract(uv), pixel);\t\t\t\t// Add one line of pixels per tile.\r\n      colour = mix(colour, vec3(1.0, 1.0, 0.0), (uv.x + uv.y) * first.x * first.y); // Yellow line\r\n      #endif\r\n        \r\n      fragColor = vec4(colour, 1.0);\r\n      }\r\n    varying vec2 vUv;\r\n            void main() {\r\n                mainImage(gl_FragColor, vUv * u_resolution.xy);\r\n              }\r\n    \r\n        `,\r\n      uniforms: {\r\n        iChannel0: { value: texture },\r\n        u_time: { type: \"f\", value: 0.05 },\r\n        u_speed: { type: \"f\", value: performance.now() },\r\n        u_mouse: { type: \"f\", value: { x: 0, y: 0 } },\r\n        u_resolution: {\r\n          type: \"v2\",\r\n          value: new THREE.Vector2(window.innerWidth, window.innerWidth),\r\n        },\r\n      },\r\n      transparent: true,\r\n      blending: THREE.NormalBlending,\r\n      depthWrite: false,\r\n    });\r\n  }\r\n}\r\n\r\nextend({ RainMaterial });\r\n","import * as THREE from \"three\";\r\nimport { extend } from \"@react-three/fiber\";\r\n\r\nclass SquareShaderMaterial extends THREE.ShaderMaterial {\r\n  constructor(texture) {\r\n    super({\r\n      vertexShader: `varying vec2 vUv;\r\n      void main() {\r\n        vUv = uv;\r\n        gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\r\n      }`,\r\n      fragmentShader: `#include <common>\r\n\r\n      uniform vec3 u_resolution;\r\n      uniform float u_time;\r\n      uniform sampler2D iChannel0;\r\n    \r\n      // By Daedelus: https://www.shadertoy.com/user/Daedelus\r\n      // license: Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License.\r\n      #define TIMESCALE 0.25 \r\n      #define TILES 8\r\n      #define COLOR 0.7, 1.6, 2.8\r\n    \r\n      void mainImage( out vec4 fragColor, in vec2 fragCoord )\r\n      {\r\n        float aspect_ratio = u_resolution.y/u_resolution.x;\r\n        vec2 uv = fragCoord.xy / u_resolution.x;\r\n        uv -= vec2(0.5, 0.5 * aspect_ratio);\r\n        float rot = radians(-30. -u_time); // radians(45.0*sin(u_time));\r\n        mat2 rotation_matrix = mat2(cos(rot), -sin(rot), sin(rot), cos(rot));\r\n        uv = rotation_matrix * uv;\r\n        vec2 scaled_uv = 20.0 * uv; \r\n        vec2 tile = fract(scaled_uv);\r\n        float tile_dist = min(min(tile.x, 1.0-tile.x), min(tile.y, 1.0-tile.y));\r\n        float square_dist = length(floor(scaled_uv));\r\n        \r\n        float edge = sin(u_time-square_dist*20.);\r\n        edge = mod(edge * edge, edge / edge);\r\n\r\n        float value = mix(tile_dist, 1.0-tile_dist, step(1.0, edge));\r\n        edge = pow(abs(1.0-edge), 2.2) * 0.5;\r\n        \r\n        value = smoothstep( edge-0.05, edge, 0.95*value);\r\n        \r\n        \r\n        value += square_dist*.1;\r\n        value *= 0.8 - 0.2;\r\n        fragColor = vec4(pow(value, 2.), pow(value, 1.5), pow(value, 1.2), 1.);\r\n      }\r\n    \r\n      varying vec2 vUv;\r\n    \r\n      void main() {\r\n        mainImage(gl_FragColor, vUv * u_resolution.xy);\r\n      }\r\n      `,\r\n      uniforms: {\r\n        iChannel0: { value: texture },\r\n        u_time: { type: \"f\", value: 0.05 },\r\n        u_speed: { type: \"f\", value: performance.now() },\r\n        u_mouse: { type: \"f\", value: { x: 0, y: 0 } },\r\n        u_resolution: {\r\n          type: \"v2\",\r\n          value: new THREE.Vector2(window.innerWidth, window.innerWidth),\r\n        },\r\n      },\r\n      transparent: true,\r\n      blending: THREE.NormalBlending,\r\n      depthWrite: false,\r\n    });\r\n  }\r\n}\r\n\r\nextend({  SquareShaderMaterial });\r\n","import * as THREE from \"three\";\r\nimport { extend } from \"@react-three/fiber\";\r\n\r\nclass SquarePatternShaderMaterial extends THREE.ShaderMaterial {\r\n  constructor(texture) {\r\n    super({\r\n      vertexShader: `varying vec2 vUv;\r\n      void main() {\r\n        vUv = uv;\r\n        gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\r\n      }`,\r\n      fragmentShader: `#include <common>\r\n\r\n      uniform vec3 u_resolution;\r\n      uniform float u_time;\r\n      uniform sampler2D iChannel0;\r\n    \r\n      // By Daedelus: https://www.shadertoy.com/user/Daedelus\r\n      // license: Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License.\r\n      #define TIMESCALE 0.25 \r\n      #define TILES 8\r\n      #define COLOR 0.7, 1.6, 2.8\r\n    \r\n      void mainImage( out vec4 fragColor, in vec2 fragCoord )\r\n      {\r\n        float aspect = u_resolution.y/u_resolution.x;\r\n    float value;\r\n\tvec2 uv = fragCoord.xy / u_resolution.x;\r\n    uv -= vec2(0.5, 0.5*aspect);\r\n    float rot = radians(45.0); // radians(45.0*sin(u_time));\r\n    mat2 m = mat2(cos(rot), -sin(rot), sin(rot), cos(rot));\r\n   \tuv  = m * uv;\r\n    uv += vec2(0.5, 0.5*aspect);\r\n    uv.y+=0.5*(1.0-aspect);\r\n    vec2 pos = 10.0*uv;\r\n    vec2 rep = fract(pos);\r\n    float dist = 2.0*min(min(rep.x, 1.0-rep.x), min(rep.y, 1.0-rep.y));\r\n    float squareDist = length((floor(pos)+vec2(0.5)) - vec2(5.0) );\r\n    \r\n    float edge = sin(u_time-squareDist*0.5)*0.5+0.5;\r\n    \r\n    edge = (u_time-squareDist*0.5)*0.5;\r\n    edge = 2.0*fract(edge*0.5);\r\n    //value = 2.0*abs(dist-0.5);\r\n    //value = pow(dist, 2.0);\r\n    value = fract (dist*2.0);\r\n    value = mix(value, 1.0-value, step(1.0, edge));\r\n    //value *= 1.0-0.5*edge;\r\n    edge = pow(abs(1.0-edge), 2.0);\r\n    \r\n    //edge = abs(1.0-edge);\r\n    value = smoothstep( edge-0.05, edge, 0.95*value);\r\n    \r\n    \r\n    value += squareDist*.1;\r\n    //fragColor = vec4(value);\r\n    fragColor = mix(vec4(1.0,1.0,1.0,1.0),vec4(1.0,0.25,0.25,1.0), value);\r\n    fragColor.a = 0.25*clamp(value, 0.0, 1.0);\r\n      }\r\n    \r\n      varying vec2 vUv;\r\n    \r\n      void main() {\r\n        mainImage(gl_FragColor, vUv * u_resolution.xy);\r\n      }\r\n      `,\r\n      uniforms: {\r\n        iChannel0: { value: texture },\r\n        u_time: { type: \"f\", value: 0.05 },\r\n        u_speed: { type: \"f\", value: performance.now() },\r\n        u_mouse: { type: \"f\", value: { x: 0, y: 0 } },\r\n        u_resolution: {\r\n          type: \"v2\",\r\n          value: new THREE.Vector2(window.innerWidth, window.innerWidth),\r\n        },\r\n      },\r\n      transparent: true,\r\n      blending: THREE.NormalBlending,\r\n      depthWrite: false,\r\n    });\r\n  }\r\n}\r\n\r\nextend({ SquarePatternShaderMaterial });\r\n","\r\nimport * as THREE from \"three\";\r\nimport { extend } from \"@react-three/fiber\";\r\nimport { SimpleShader } from \"./FireShader\";\r\nclass CloudShaderMaterial extends THREE.ShaderMaterial {\r\n  constructor(texture) {\r\n    super({\r\n\t\t...SimpleShader\r\n      ,\r\n      uniforms: {\r\n        iChannel0: { value: texture },\r\n        iChannel1: { value: texture },\r\n        u_time: { type: \"f\", value: 0.05 },\r\n        u_speed: { type: \"f\", value: performance.now() },\r\n        u_mouse: { type: \"f\", value: { x: 0, y: 0 } },\r\n        u_resolution: {\r\n          type: \"v2\",\r\n          value: new THREE.Vector2(window.innerWidth, window.innerWidth),\r\n        },\r\n      },\r\n      transparent: true,\r\n      blending: THREE.NormalBlending,\r\n      depthWrite: false,\r\n    });\r\n  }\r\n}\r\n\r\nextend({  CloudShaderMaterial });\r\n","/*\nAuto-generated by: https://github.com/pmndrs/gltfjsx\n*/\n\nimport React, { useRef, useMemo } from \"react\";\nimport { useFrame } from \"@react-three/fiber\";\nimport { useGLTF } from \"@react-three/drei\";\nimport FormatTexture from \"../hooks/FormatTexture\";\nimport \"../shaders/RainShader\";\nimport \"../shaders/squaresShader\";\nimport \"../shaders/squaresPatternShader\";\nimport \"../shaders/CloudyTunnelShaderMaterial\";\n\nconst URL = `/assets/obj/ufo.gltf?${Math.random() * 100}`;\n\nexport default function Ufo({ animate, ...props }) {\n  const group = useRef();\n  const animateRefs = [useRef()];\n  const simRef = [useRef(), useRef(), useRef(), useRef()];\n  const { nodes } = useGLTF(URL);\n  const imageTexture = FormatTexture(\"/assets/img/c_space.jpg\");\n  const AnimateFrame = ({ meshRef }) => {\n    useFrame(({ clock }, delta) => {\n      if (meshRef?.current) {\n        animate({ meshRef, clock, delta });\n      }\n\n      if (simRef.length > 0) {\n        simRef.forEach(\n          (ref) =>\n            ref.current &&\n            (ref.current.uniforms.u_time.value = clock.elapsedTime)\n        );\n      }\n      if (animateRefs.length > 0) {\n        animateRefs.forEach((ref) => {\n          if (ref.current) {\n            ref.current.rotation.y -= 0.01351;\n            // console.log(ref)\n          }\n        });\n      }\n    });\n    return null;\n  };\n  return (\n    <group ref={group} {...props} dispose={null}>\n      {animate && <AnimateFrame meshRef={group} />}\n      <mesh\n        castShadow\n        receiveShadow\n        geometry={nodes.dome.geometry}\n        material={nodes.dome.material}\n      >\n        <rainMaterial\n          ref={simRef[0]}\n          texture={imageTexture}\n          attach=\"material\"\n        />\n      </mesh>\n      <mesh\n        castShadow\n        receiveShadow\n        geometry={nodes.ring.geometry}\n        material={nodes.ring.material}\n      >\n        <squareShaderMaterial\n          ref={simRef[1]}\n          texture={imageTexture}\n          attach=\"material\"\n        />\n      </mesh>\n      <mesh\n        ref={animateRefs[0]}\n        castShadow\n        receiveShadow\n        geometry={nodes.lights.geometry}\n        material={nodes.lights.material}\n      >\n        <rainMaterial\n          ref={simRef[2]}\n          texture={imageTexture}\n          attach=\"material\"\n        />\n      </mesh>\n      <mesh\n        castShadow\n        receiveShadow\n        geometry={nodes.base.geometry}\n        material={nodes.base.material}\n      >\n        <squareShaderMaterial\n          ref={simRef[3]}\n          texture={imageTexture}\n          attach=\"material\"\n        />\n      </mesh>\n    </group>\n  );\n}\n\nuseGLTF.preload(URL);\n","import React, { useEffect, useMemo, useCallback, useRef } from \"react\";\r\nimport { returnArray } from \"../../utils\";\r\nimport state from \"../../store\";\r\nimport { useSnapshot } from \"valtio\";\r\nimport { useKeyPress } from \"../../hooks\";\r\nimport {\r\n  GiDeathStar,\r\n  GiFlamingSheet,\r\n  GiFission,\r\n  GiSpaceship,\r\n} from \"react-icons/gi\";\r\nexport default function SpaceInvaders() {\r\n  const snap = useSnapshot(state);\r\n  const width = snap.spaceInvasion.width;\r\n  let alienIntervalId = useRef(),\r\n    dir = useRef(1),\r\n    gameTime = useRef(75),\r\n    squares = returnArray(snap.spaceInvasion.gridSize);\r\n  const mapAssets = (num) => {\r\n    if (snap.spaceInvasion.hits.includes(num)) {\r\n      return (\r\n        <div\r\n          className=\"inline-flex items-center justify-center w-[20px] h-[20px]\"\r\n          key={num}\r\n        >\r\n          <div className=\"boom w-[10px] h-[10px] text-amber-500 z-20\">\r\n            <GiFission />\r\n          </div>\r\n        </div>\r\n      );\r\n    }\r\n\r\n    if (snap.spaceInvasion.aliens.includes(snap.spaceInvasion.player)) {\r\n      return (\r\n        <div className=\"bg-gray-400 rounded-full w-[20px] h-[20px]\" key={num} />\r\n      );\r\n    }\r\n    if (snap.spaceInvasion.aliens.includes(num)) {\r\n      return (\r\n        <div\r\n          className=\"text-purple-600 rounded-full w-[20px] h-[20px]\"\r\n          key={num}\r\n        >\r\n          <GiDeathStar />\r\n        </div>\r\n      );\r\n    }\r\n    if (\r\n      snap.spaceInvasion.shots.includes(num) &&\r\n      snap.spaceInvasion.player === num\r\n    ) {\r\n      return (\r\n        <div\r\n          className=\"inline-flex items-center justify-center  text-gradO w-[20px] h-[20px] relative\"\r\n          key={num}\r\n        >\r\n          {\" \"}\r\n          <GiSpaceship />\r\n          <div className=\"rounder-full w-[10px] h-[10px] text-amber-400 rotate-[225deg] absolute bottom-full\">\r\n            <GiFlamingSheet className=\"w-full h-full\" />\r\n          </div>\r\n        </div>\r\n      );\r\n    }\r\n    if (snap.spaceInvasion.shots.includes(num)) {\r\n      return (\r\n        <div\r\n          className=\"inline-flex items-center justify-center w-[20px] h-[20px]\"\r\n          key={num}\r\n        >\r\n          <div className=\"rounder-full w-[10px] h-[10px] text-amber-500 rotate-[225deg]\">\r\n            <GiFlamingSheet className=\"w-full h-full\" />\r\n          </div>\r\n        </div>\r\n      );\r\n    }\r\n    if (snap.spaceInvasion.player === num) {\r\n      return (\r\n        <div className=\"w-[20px] h-[20px] text-gradO\" key={num}>\r\n          <GiSpaceship />\r\n        </div>\r\n      );\r\n    }\r\n    return <div className=\"w-[20px] h-[20px] \" key={num}></div>;\r\n  };\r\n  const leftArrow = useKeyPress(\"ArrowLeft\");\r\n  const rightArrow = useKeyPress(\"ArrowRight\");\r\n  const upArrow = useKeyPress(\"ArrowUp\");\r\n  const gameOver = useCallback(() => {\r\n    snap.spaceInvasion.aliens.length > 0\r\n      ? (state.spaceInvasion.status = false)\r\n      : (state.spaceInvasion.status = true);\r\n    state.spaceInvasion.gameOver = true;\r\n  }, [snap]);\r\n  useMemo(() => {\r\n    if (!snap.spaceInvasion.pause) {\r\n      leftArrow &&\r\n        (() => {\r\n          if (snap.spaceInvasion.player % width !== 0)\r\n            state.spaceInvasion.player = snap.spaceInvasion.player - 1;\r\n        })();\r\n      rightArrow &&\r\n        (() => {\r\n          if (snap.spaceInvasion.player % width < width - 1)\r\n            state.spaceInvasion.player = snap.spaceInvasion.player + 1;\r\n        })();\r\n      upArrow &&\r\n        (() => {\r\n          state.spaceInvasion.shots.push(snap.spaceInvasion.player);\r\n        })();\r\n    }\r\n\r\n    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n  }, [leftArrow, rightArrow, upArrow]);\r\n\r\n  const moveInvaders = useCallback(() => {\r\n    const leftBoundry = snap.spaceInvasion.aliens[0] % width === 0,\r\n      rightBoundry =\r\n        snap.spaceInvasion.aliens[snap.spaceInvasion.aliens.length - 1] %\r\n          width ===\r\n        width - 1;\r\n    if (!snap.spaceInvasion.pause) {\r\n      if (snap.spaceInvasion.aliens.length === 0) gameOver();\r\n      for (let i = 0; i < snap.spaceInvasion.aliens.length; i++) {\r\n        if (snap.spaceInvasion.aliens[i] > squares.length - width) {\r\n          console.log({ i }, snap.spaceInvasion.aliens[i], squares.length);\r\n          gameOver();\r\n          return;\r\n        }\r\n      }\r\n      if (rightBoundry && dir.current > 0) {\r\n        for (let i = 0; i < snap.spaceInvasion.aliens.length; i++) {\r\n          state.spaceInvasion.aliens[i] += width + 1;\r\n        }\r\n        dir.current = -1;\r\n      }\r\n      if (leftBoundry && dir.current < 0) {\r\n        for (let i = 0; i < snap.spaceInvasion.aliens.length; i++) {\r\n          state.spaceInvasion.aliens[i] += width - 1;\r\n        }\r\n        dir.current = 1;\r\n      }\r\n      for (let i = 0; i < snap.spaceInvasion.aliens.length; i++) {\r\n        state.spaceInvasion.aliens[i] += dir.current;\r\n      }\r\n      if (snap.spaceInvasion.aliens.includes(snap.spaceInvasion.player)) {\r\n        gameOver();\r\n        return;\r\n      }\r\n    }\r\n  }, [snap, dir, squares, gameOver, width]);\r\n  const moverShots = useCallback(() => {\r\n    if (!snap.spaceInvasion.pause) {\r\n      if (snap.spaceInvasion.shots.length > 0) {\r\n        for (let w = 0; w < snap.spaceInvasion.shots.length; w++) {\r\n          state.spaceInvasion.shots[w] -= width;\r\n          let position = snap.spaceInvasion.shots[w];\r\n          if (position < -width || isNaN(position)) {\r\n            state.spaceInvasion.shots = snap.spaceInvasion.shots.filter(\r\n              (num) => num > 0 && !isNaN(num) && num\r\n            );\r\n          }\r\n          if (snap.spaceInvasion.aliens.includes(position)) {\r\n            // state.spaceInvasion.pause = true;\r\n            state.spaceInvasion.hits.push(position);\r\n            state.spaceInvasion.aliens = snap.spaceInvasion.aliens.filter(\r\n              (num) => num !== position && num\r\n            );\r\n            state.spaceInvasion.shots = snap.spaceInvasion.shots.filter(\r\n              (num) => num !== position && num\r\n            );\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }, [snap, width]);\r\n\r\n  const playgame = useCallback(() => {\r\n    moveInvaders();\r\n    moverShots();\r\n  }, [moveInvaders, moverShots]);\r\n  useEffect(() => {\r\n    let loaded = true;\r\n    if (loaded && !snap.spaceInvasion.gameOver && !snap.spaceInvasion.pause) {\r\n      alienIntervalId.current = setInterval(playgame, gameTime.current);\r\n    }\r\n    return () => {\r\n      loaded = false;\r\n      clearInterval(alienIntervalId.current);\r\n    };\r\n  }, [playgame, gameTime, alienIntervalId, snap]);\r\n\r\n  return (\r\n    <div className=\"my-5 w-[300px] flex flex-wrap border-black relative\">\r\n      {squares.map(mapAssets)}\r\n    </div>\r\n  );\r\n}\r\n","import state from \"../../../store\";\r\nimport { useSnapshot } from \"valtio\";\r\nimport GlassButton from \"../../../components/GlassButton\";\r\nimport { ImArrowLeft, ImArrowRight } from \"react-icons/im\";\r\nimport { GiFlamingSheet } from \"react-icons/gi\";\r\nexport default function MobileButtons() {\r\n  const snap = useSnapshot(state);\r\n  return (\r\n    <section className=\"bg-white/5 rounded-xl relative flex xl:hidden\">\r\n      <GlassButton\r\n        onClick={() => {\r\n          if (snap.spaceInvasion.player % snap.spaceInvasion.width !== 0)\r\n            state.spaceInvasion.player = snap.spaceInvasion.player - 1;\r\n        }}\r\n      >\r\n        <span className=\"mobile_btn\">\r\n          <ImArrowLeft className=\"mobile_btn_icon\" />\r\n        </span>\r\n      </GlassButton>\r\n      <GlassButton\r\n        onClick={() => {\r\n          state.spaceInvasion.shots.push(snap.spaceInvasion.player);\r\n        }}\r\n      >\r\n        <span className=\"mobile_btn\">\r\n          <GiFlamingSheet className=\"mobile_btn_icon rotate-[225deg]\" />\r\n        </span>\r\n      </GlassButton>\r\n      <GlassButton\r\n        onClick={() => {\r\n          if (\r\n            snap.spaceInvasion.player % snap.spaceInvasion.width <\r\n            snap.spaceInvasion.width - 1\r\n          )\r\n            state.spaceInvasion.player = snap.spaceInvasion.player + 1;\r\n        }}\r\n      >\r\n        <span className=\"mobile_btn\">\r\n          <ImArrowRight className=\"mobile_btn_icon\" />\r\n        </span>\r\n      </GlassButton>\r\n    </section>\r\n  );\r\n}\r\n","export default function Header() {\r\n  return (\r\n    <h1 className=\"text-7xl Anuphan text-gradB relative\">\r\n      <span className=\"absolute -rotate-12 scale-150 bottom-full right-full translate-x-full\">\r\n        <span className=\"absolute inline-block -rotate-45 right-full top-10\">\r\n          Spa\r\n        </span>\r\n        ce\r\n      </span>{\" \"}\r\n      <span className=\"Alfa\">Invaders</span>\r\n    </h1>\r\n  );\r\n}\r\n","import state from \"../../../store\";\r\nimport { useSnapshot } from \"valtio\";\r\nimport GlassButton from \"../../../components/GlassButton\";\r\nimport { transitionViewIfSupported } from \"../../../utils\";\r\nimport { useNavigate } from \"react-router-dom\";\r\nexport default function Nav() {\r\n  const snap = useSnapshot(state);\r\n  const navigate = useNavigate();\r\n  return (\r\n    \r\n    <section className=\"flex gap-2 justify-between w-full\">\r\n    <GlassButton\r\n      onClick={() => {\r\n        state.thought = !snap.thought;\r\n        state.spaceInvasion.pause = !snap.spaceInvasion.pause;\r\n      }}\r\n    >\r\n      {snap.spaceInvasion.pause ? \"Play\" : \"Pause\"}\r\n    </GlassButton>\r\n    <GlassButton\r\n      onClick={() => {\r\n        state.spaceInvasion.aliens = [...snap.spaceInvasion.aliens_start];\r\n        state.spaceInvasion.gameOver = false;\r\n        state.spaceInvasion.pause = true;\r\n        state.spaceInvasion.status = null;\r\n        state.spaceInvasion.hits = [];\r\n        state.spaceInvasion.shots = [];\r\n        state.spaceInvasion.player = state.spaceInvasion.player_start;\r\n      }}\r\n    >\r\n      Restart\r\n    </GlassButton>\r\n    <GlassButton\r\n      className=\"btn_glass_purple_parent\"\r\n      onClick={() => {\r\n        transitionViewIfSupported(navigate(-1));\r\n      }}\r\n    >\r\n      Back\r\n    </GlassButton>\r\n  </section>\r\n  );\r\n}\r\n","import React from \"react\";\r\nimport SpaceInvaders from \"./spaceInvaders\";\r\nimport MobileButtons from \"./assets/MobileButtons\";\r\nimport Header from \"./assets/Header\";\r\nimport Nav from \"./assets/Nav\";\r\nexport default function SpaceInvadersContainer() {\r\n  return (\r\n    <div className=\"space_invaders_container\">\r\n      <Header />\r\n      <Nav />\r\n      <SpaceInvaders />\r\n      <MobileButtons />\r\n    </div>\r\n  );\r\n}\r\n","import React, { Suspense, useMemo } from \"react\";\r\nimport { Loader, CameraShake, Stars } from \"@react-three/drei\";\r\nimport { useSpring, animated } from \"@react-spring/three\";\r\nimport { Canvas } from \"@react-three/fiber\";\r\nimport { space } from \"../utils\";\r\nimport { TextureOptions } from \"../hooks\";\r\nimport { LightMap } from \"../three/LightMap\";\r\nimport * as THREE from \"three\";\r\nimport Ufo from \"../three/Ufo\";\r\nimport state from \"../store\";\r\nimport { useSnapshot } from \"valtio\";\r\nimport SpaceInvadersContainer from \"../gmaes/spaceInvaders\";\r\nimport Planet from \"../three/planet\";\r\nimport CreateText from \"../three/CreateText\";\r\nimport { useResize } from \"../hooks\";\r\nexport default function Intro() {\r\n  const snap = useSnapshot(state);\r\n  const props = {\r\n    intensity: 5,\r\n    ambient: 3,\r\n    radius: 0,\r\n    blend: 200,\r\n  };\r\n  const { width, height } = useResize();\r\n  const isMobile = useMemo(() => width > \"1024\", [width]);\r\n  const springs = useSpring({\r\n    won:\r\n      snap.spaceInvasion.status && snap.spaceInvasion.gameOver\r\n        ? [space(-1.5), space(0.5), 0]\r\n        : [-space(0.5), space(10), space(1)],\r\n    lost:\r\n      !snap.spaceInvasion.status && snap.spaceInvasion.gameOver\r\n        ? [space(-1.5), space(0.5), 0]\r\n        : [-space(0.5), -space(10), space(1)],\r\n    ufo: isMobile\r\n      ? [-space(2), space(0.05), space(-0)]\r\n      : [-space(0), -space(0), space(0)],\r\n  });\r\n  const textOptions = {\r\n    fontSize: !isMobile ? 0.2 : 1,\r\n    fontHeight: !isMobile ? 0.1 : 0.3,\r\n    position:!isMobile ?[space(1.2), space(.4), 0] : [space(3), 0, space(-2.8)],\r\n    rotation:!isMobile ? [0, 0, 0]: [space(0), space(-.4), 0],\r\n    color: \"#fff\",\r\n  };\r\n  return (\r\n    <div className=\"moon bg-white fixed flex items-center justify-center w-screen h-screen top-0 left-0 z-20\">\r\n      <SpaceInvadersContainer />\r\n      <Suspense fallback={<Loader />}>\r\n        <Canvas\r\n          className=\"relative z-20 moon\"\r\n          performance={{ min: 0.5 }}\r\n          onCreated={({ gl }) => {\r\n            gl.toneMapping = THREE.CineonToneMapping;\r\n            gl.setClearColor(new THREE.Color(\"#020207\"));\r\n          }}\r\n          dpr={[1, 1.5]}\r\n          gl={{ alpha: true }}\r\n          flat\r\n          linear\r\n          shadows\r\n        >\r\n          <fog color=\"lightgray\" attach=\"fog\" near={4} far={800} />\r\n          <LightMap {...props}>\r\n            <Stars />\r\n            <animated.group position={springs.ufo}>\r\n              <Ufo\r\n                position={[0, 0, 0]}\r\n                rotation={[space(-0.3), space(0), space(0)]}\r\n                animate={({ meshRef, clock, delta }) => {\r\n                  meshRef.current.rotation.y += 0.01351;\r\n                  meshRef.current.rotation.x =\r\n                    Math.sin(performance.now() * 0.00045) * 0.1;\r\n                  meshRef.current.rotation.z =\r\n                    Math.cos(performance.now() * 0.00045) * 0.1;\r\n                }}\r\n              />\r\n            </animated.group>\r\n\r\n            <Planet\r\n              bumpScale={0.3}\r\n              args={[10, 10, 96]}\r\n              position={[0, space(8), space(-20)]}\r\n              {...TextureOptions(\"textures/earth\")}\r\n              animate={({ meshRef, delta, clock }) => {\r\n                if (meshRef?.current) {\r\n                  meshRef.current.rotation.set(\r\n                    0,\r\n                    space(clock.oldTime / 90000),\r\n                    0\r\n                  );\r\n                }\r\n              }}\r\n            />\r\n            {snap.spaceInvasion.status && snap.spaceInvasion.gameOver && (\r\n              <animated.group position={springs.won}>\r\n                {\" \"}\r\n                <CreateText textstring=\"You Won\" {...textOptions} />\r\n              </animated.group>\r\n            )}\r\n            {!snap.spaceInvasion.status && snap.spaceInvasion.gameOver && (\r\n              <animated.group position={springs.lost}>\r\n                <CreateText textstring=\"You Lose\" {...textOptions} />\r\n              </animated.group>\r\n            )}\r\n            {!snap.thought && (\r\n              <CameraShake\r\n                maxYaw={0.01}\r\n                maxPitch={0.1}\r\n                maxRoll={0.1}\r\n                yawFrequency={0.05}\r\n                pitchFrequency={0.05}\r\n                rollFrequency={0.04}\r\n              />\r\n            )}\r\n          </LightMap>\r\n        </Canvas>\r\n      </Suspense>\r\n    </div>\r\n  );\r\n}\r\n","import React, { useRef } from \"react\";\r\nimport { useFrame } from \"@react-three/fiber\";\r\nimport { DoubleSide } from \"three\";\r\nimport FormatTexture from \"../hooks/FormatTexture\";\r\nconst Planet = ({\r\n  heightMapSrc,\r\n  AO,\r\n  bumpScale,\r\n  smokeScale,\r\n  textureMapSrc,\r\n  normalMapSrc,\r\n  smoothMapSrc,\r\n  metallicMapSrc,\r\n  edgeMapSrc,\r\n  args,\r\n  animate,\r\n  ...props\r\n}) => {\r\n  // not sure where to add this map will do rnd\r\n  // const smoothMap = FormatTexture(smoothMapSrc);\r\n\r\n  const heightMap = FormatTexture(heightMapSrc);\r\n  const AoTextureMap = FormatTexture(AO);\r\n  const textureMap = FormatTexture(textureMapSrc);\r\n  const normalMap = FormatTexture(normalMapSrc);\r\n  const metallicMap = FormatTexture(metallicMapSrc);\r\n  const edgeMap = FormatTexture(edgeMapSrc);\r\n  const TerrainMaterialRef = useRef();\r\n  const AnimateFrame = ({ meshRef }) => {\r\n    useFrame(({ clock }, delta) => {\r\n      animate({ meshRef, clock, delta });\r\n    });\r\n  };\r\n  return (\r\n    <group {...props}>\r\n      {animate && <AnimateFrame meshRef={TerrainMaterialRef} />}\r\n      <mesh ref={TerrainMaterialRef} transparent={true}>\r\n        <sphereGeometry\r\n          attach=\"geometry\"\r\n          args={args}\r\n          receiveShadow\r\n          transparent={true}\r\n        />\r\n        <meshPhongMaterial\r\n          bumpScale={bumpScale}\r\n          attach=\"material\"\r\n          map={textureMap}\r\n          aoMap={AoTextureMap}\r\n          bumpMap={heightMap}\r\n          lightMap={edgeMap}\r\n          metalnessMap={metallicMap}\r\n          normalMap={normalMap}\r\n          side={DoubleSide}\r\n        />\r\n      </mesh>\r\n    </group>\r\n  );\r\n};\r\nexport default Planet\r\n;\r\n"],"names":["GlassButton","_ref","children","props","_objectWithoutProperties","_excluded","_jsx","_objectSpread","className","targetKey","_useState","useState","_useState2","_slicedToArray","keyPressed","setKeyPressed","downHandler","key","upHandler","_ref2","useEffect","window","addEventListener","removeEventListener","callback","resizeHandler","event","useResize","width","innerWidth","height","innerHeight","windowSize","setWindowSize","LightMap","_ref$position","position","_ref$resolution","resolution","_ref$intensity","intensity","_ref$ambient","ambient","_ref$radius","radius","_ref$blend","blend","_ref$lights","lights","rGroup","useRef","rLightmap","gl","useThree","state","camera","dirLights","useMemo","_toConsumableArray","Array","map","_","i","dirLight","THREE","castShadow","shadow","near","far","right","top","left","bottom","mapSize","useLayoutEffect","lightmap","current","objects","traverse","child","isMesh","push","addObjectsToLightMap","blurringPlane","lightMapContainers","compiled","scene","clear","useFrame","update","l","length","Math","random","set","lambda","acos","PI","phi","cos","abs","sin","_jsxs","_Fragment","ref","args","extend","ProgressiveLightMap","RainMaterial","_THREE$ShaderMaterial","_inherits","_super","_createSuper","texture","_classCallCheck","call","vertexShader","fragmentShader","uniforms","iChannel0","value","u_time","type","u_speed","performance","now","u_mouse","x","y","u_resolution","transparent","blending","depthWrite","_createClass","SquareShaderMaterial","SquarePatternShaderMaterial","CloudShaderMaterial","SimpleShader","iChannel1","URL","concat","Ufo","animate","group","animateRefs","simRef","nodes","useGLTF","imageTexture","FormatTexture","AnimateFrame","meshRef","_ref3","delta","clock","forEach","elapsedTime","rotation","dispose","receiveShadow","geometry","dome","material","attach","ring","base","SpaceInvaders","snap","useSnapshot","spaceInvasion","alienIntervalId","dir","gameTime","squares","returnArray","gridSize","leftArrow","useKeyPress","rightArrow","upArrow","gameOver","useCallback","aliens","pause","player","moveInvaders","leftBoundry","rightBoundry","console","log","includes","moverShots","shots","_loop","w","isNaN","filter","num","playgame","loaded","setInterval","clearInterval","hits","GiFission","GiDeathStar","GiSpaceship","GiFlamingSheet","MobileButtons","onClick","ImArrowLeft","ImArrowRight","Header","Nav","navigate","useNavigate","thought","aliens_start","transitionViewIfSupported","SpaceInvadersContainer","Intro","_useResize","isMobile","springs","useSpring","won","status","space","lost","ufo","textOptions","fontSize","fontHeight","color","Suspense","fallback","Loader","Canvas","min","onCreated","toneMapping","setClearColor","dpr","alpha","flat","linear","shadows","Stars","animated","z","Planet","bumpScale","TextureOptions","oldTime","CreateText","textstring","CameraShake","maxYaw","maxPitch","maxRoll","yawFrequency","pitchFrequency","rollFrequency","heightMapSrc","AO","textureMapSrc","smokeScale","normalMapSrc","metallicMapSrc","smoothMapSrc","edgeMapSrc","heightMap","AoTextureMap","textureMap","normalMap","metallicMap","edgeMap","TerrainMaterialRef","aoMap","bumpMap","lightMap","metalnessMap","side","DoubleSide"],"sourceRoot":""}