{"version":3,"file":"static/js/362.849a4723.chunk.js","mappings":"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","sources":["components/GlassButton.js","hooks/useKeyPress.js","hooks/useMouseMoving.js","hooks/useScroll.js","hooks/useForwardRaycast.js","hooks/useResize.js","games/spaceInvaders/spaceInvaders.js","games/spaceInvaders/assets/MobileButtons.js","games/spaceInvaders/assets/Header.js","games/spaceInvaders/assets/Nav.js","games/spaceInvaders/index.js","three/LightMap.js","shaders/RainShader.js","shaders/squaresPatternShader.js","shaders/CloudyTunnelShaderMaterial.js","three/Ufo.js","games/spaceInvaders/spaceInvadersCanvas.js","pages/abduction.js","shaders/squaresShader.js","three/AnimatedMesh.js","three/planet.js"],"sourcesContent":["export default function GlassButton({ children, ...props }) {\r\n  return (\r\n    <button className=\"btn_glass_purple_parent\" {...props}>\r\n      <span className=\"btn_glass_purple gradient_purple_text\">{children}</span>\r\n    </button>\r\n  );\r\n}\r\n","import { useState, useEffect } from 'react';\r\n\r\nconst useKeyPress = targetKey=>{\r\n\r\n    const [keyPressed, setKeyPressed] = useState(false);\r\n\r\n// If pressed key is our target key then set to true\r\nconst downHandler = ({ key })=> {\r\n    if (key === targetKey) {\r\n      setKeyPressed(true);\r\n    }\r\n  }\r\n\r\n  // If released key is our target key then set to false\r\n  const upHandler = ({ key }) => {\r\n    if (key === targetKey) {\r\n      setKeyPressed(false);\r\n    }\r\n  };\r\n\r\n     // Add event listeners\r\n  useEffect(() => {\r\n    window.addEventListener('keydown', downHandler);\r\n    window.addEventListener('keyup', upHandler);\r\n    // Remove event listeners on cleanup\r\n    return () => {\r\n      window.removeEventListener('keydown', downHandler);\r\n      window.removeEventListener('keyup', upHandler);\r\n    };\r\n  }, []);\r\n\r\n  return keyPressed;\r\n}\r\n\r\nexport default useKeyPress","import { useState, useEffect } from \"react\";\r\n\r\nexport default function useMouseMoving(){\r\n  const [mousePosition, setMousePosition] = useState({\r\n    x: 0,\r\n    y:0,\r\n  });\r\n\r\n  const getMouseEvent = (event) => {\r\n    setMousePosition({\r\n      x: event.clientX,\r\n      y: event.clientY,\r\n    });\r\n  };\r\n\r\n  // Add event listeners\r\n  useEffect(() => {\r\n    window.addEventListener(\"mousemove\", getMouseEvent);\r\n    // Remove event listeners on cleanup\r\n    return () => {\r\n      window.removeEventListener(\"mousemove\", getMouseEvent);\r\n    };\r\n  }, []);\r\n\r\n  return mousePosition;\r\n};\r\n","import { useEffect } from \"react\";\r\n\r\nconst useScroll = (callback) => {\r\n  const resizeHandler = (event) => \r\n    callback(event);\r\n  \r\n  // Add event listeners\r\n  useEffect(() => {\r\n    window.addEventListener(\"wheel\", resizeHandler);\r\n    // Remove event listeners on cleanup\r\n    return () => {\r\n      window.removeEventListener(\"wheel\", resizeHandler);\r\n    };\r\n  });\r\n};\r\n\r\nexport default useScroll;\r\n","import { useThree } from '@react-three/fiber'\r\nimport { useMemo } from 'react'\r\nimport { Raycaster, Vector3 } from 'three'\r\n\r\nexport default function useForwardRaycast(obj)  {\r\n  const raycaster = useMemo(() => new Raycaster(), [])\r\n  const pos = useMemo(() => new Vector3(), [])\r\n  const dir = useMemo(() => new Vector3(), [])\r\n  const scene = useThree((state) => state.scene)\r\n\r\n  return () => {\r\n    if (!obj.current) return []\r\n    raycaster.set(obj.current.getWorldPosition(pos), obj.current.getWorldDirection(dir))\r\n    return raycaster.intersectObjects(scene.children)\r\n  }\r\n}","import { useState, useEffect } from \"react\";\r\n\r\nexport default function useResize(){\r\n  const [windowSize, setWindowSize] = useState({\r\n    width: window.innerWidth,\r\n    height: window.innerHeight,\r\n  });\r\n\r\n  const resizeHandler = () => {\r\n    setWindowSize({\r\n      width: window.innerWidth,\r\n      height: window.innerHeight,\r\n    });\r\n  };\r\n\r\n  // Add event listeners\r\n  useEffect(() => {\r\n    window.addEventListener(\"resize\", resizeHandler);\r\n    // Remove event listeners on cleanup\r\n    return () => {\r\n      window.removeEventListener(\"resize\", resizeHandler);\r\n    };\r\n  }, []);\r\n\r\n  return windowSize;\r\n};\r\n","import React, { useEffect, useMemo, useCallback, useRef } from \"react\";\r\nimport { returnArray } from \"../../utils\";\r\nimport state from \"../../store\";\r\nimport { useSnapshot } from \"valtio\";\r\nimport { useKeyPress } from \"../../hooks\";\r\nimport {\r\n  GiDeathStar,\r\n  GiFlamingSheet,\r\n  GiFission,\r\n  GiSpaceship,\r\n} from \"react-icons/gi\";\r\nexport default function SpaceInvaders() {\r\n  const snap = useSnapshot(state);\r\n  const width = snap.spaceInvasion.width;\r\n  let alienIntervalId = useRef(),\r\n    dir = useRef(1),\r\n    gameTime = useRef(100),\r\n    squares = returnArray(snap.spaceInvasion.gridSize);\r\n  const mapAssets = (num) => {\r\n    if (snap.spaceInvasion.hits.includes(num)) {\r\n      return (\r\n        <div\r\n          className=\"inline-flex items-center justify-center w-[20px] h-[20px]\"\r\n          key={num}\r\n        >\r\n          <div className=\"boom w-[10px] h-[10px] text-amber-500 z-20\">\r\n            <GiFission />\r\n          </div>\r\n        </div>\r\n      );\r\n    }\r\n\r\n    if (snap.spaceInvasion.aliens.includes(snap.spaceInvasion.player)) {\r\n      return (\r\n        <div className=\"bg-gray-400 rounded-full w-[20px] h-[20px]\" key={num} />\r\n      );\r\n    }\r\n    if (snap.spaceInvasion.aliens.includes(num)) {\r\n      return (\r\n        <div\r\n          className=\"text-purple-600 rounded-full w-[20px] h-[20px]\"\r\n          key={num}\r\n        >\r\n          <GiDeathStar />\r\n        </div>\r\n      );\r\n    }\r\n    if (\r\n      snap.spaceInvasion.shots.includes(num) &&\r\n      snap.spaceInvasion.player === num\r\n    ) {\r\n      return (\r\n        <div\r\n          className=\"inline-flex items-center justify-center  text-gradO w-[20px] h-[20px] relative\"\r\n          key={num}\r\n        >\r\n          {\" \"}\r\n          <GiSpaceship />\r\n          <div className=\"rounder-full w-[10px] h-[10px] text-amber-400 rotate-[225deg] absolute bottom-full\">\r\n            <GiFlamingSheet className=\"w-full h-full\" />\r\n          </div>\r\n        </div>\r\n      );\r\n    }\r\n    if (snap.spaceInvasion.shots.includes(num)) {\r\n      return (\r\n        <div\r\n          className=\"inline-flex items-center justify-center w-[20px] h-[20px]\"\r\n          key={num}\r\n        >\r\n          <div className=\"rounder-full w-[10px] h-[10px] text-amber-500 rotate-[225deg]\">\r\n            <GiFlamingSheet className=\"w-full h-full\" />\r\n          </div>\r\n        </div>\r\n      );\r\n    }\r\n    if (snap.spaceInvasion.player === num) {\r\n      return (\r\n        <div className=\"w-[20px] h-[20px] text-gradO\" key={num}>\r\n          <GiSpaceship />\r\n        </div>\r\n      );\r\n    }\r\n    return <div className=\"w-[20px] h-[20px] \" key={num}></div>;\r\n  };\r\n  const leftArrow = useKeyPress(\"ArrowLeft\");\r\n  const rightArrow = useKeyPress(\"ArrowRight\");\r\n  const upArrow = useKeyPress(\"ArrowUp\");\r\n  const gameOver = useCallback(() => {\r\n    snap.spaceInvasion.aliens.length > 0\r\n      ? (state.spaceInvasion.status = false)\r\n      : (state.spaceInvasion.status = true);\r\n    state.spaceInvasion.gameOver = true;\r\n  }, [snap]);\r\n  useMemo(() => {\r\n    if (!snap.spaceInvasion.pause) {\r\n      leftArrow &&\r\n        (() => {\r\n          if (snap.spaceInvasion.player % width !== 0)\r\n            state.spaceInvasion.player = snap.spaceInvasion.player - 1;\r\n        })();\r\n      rightArrow &&\r\n        (() => {\r\n          if (snap.spaceInvasion.player % width < width - 1)\r\n            state.spaceInvasion.player = snap.spaceInvasion.player + 1;\r\n        })();\r\n      upArrow &&\r\n        (() => {\r\n          state.spaceInvasion.shots.push(snap.spaceInvasion.player);\r\n        })();\r\n    }\r\n\r\n    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n  }, [leftArrow, rightArrow, upArrow]);\r\n\r\n  const moveInvaders = useCallback(() => {\r\n    const leftBoundry = snap.spaceInvasion.aliens[0] % width === 0,\r\n      rightBoundry =\r\n        snap.spaceInvasion.aliens[snap.spaceInvasion.aliens.length - 1] %\r\n          width ===\r\n        width - 1;\r\n    if (!snap.spaceInvasion.pause) {\r\n      if (snap.spaceInvasion.aliens.length === 0) gameOver();\r\n      for (let i = 0; i < snap.spaceInvasion.aliens.length; i++) {\r\n        if (snap.spaceInvasion.aliens[i] > squares.length - width) {\r\n          console.log({ i }, snap.spaceInvasion.aliens[i], squares.length);\r\n          gameOver();\r\n          return;\r\n        }\r\n      }\r\n      if (rightBoundry && dir.current > 0) {\r\n        for (let i = 0; i < snap.spaceInvasion.aliens.length; i++) {\r\n          state.spaceInvasion.aliens[i] += width + 1;\r\n        }\r\n        dir.current = -1;\r\n      }\r\n      if (leftBoundry && dir.current < 0) {\r\n        for (let i = 0; i < snap.spaceInvasion.aliens.length; i++) {\r\n          state.spaceInvasion.aliens[i] += width - 1;\r\n        }\r\n        dir.current = 1;\r\n      }\r\n      for (let i = 0; i < snap.spaceInvasion.aliens.length; i++) {\r\n        state.spaceInvasion.aliens[i] += dir.current;\r\n      }\r\n      if (snap.spaceInvasion.aliens.includes(snap.spaceInvasion.player)) {\r\n        gameOver();\r\n        return;\r\n      }\r\n    }\r\n  }, [snap, dir, squares, gameOver, width]);\r\n  const moverShots = useCallback(() => {\r\n    if (!snap.spaceInvasion.pause) {\r\n      if (snap.spaceInvasion.shots.length > 0) {\r\n        for (let w = 0; w < snap.spaceInvasion.shots.length; w++) {\r\n          state.spaceInvasion.shots[w] -= width;\r\n          let position = snap.spaceInvasion.shots[w];\r\n          if (position < -width || isNaN(position)) {\r\n            state.spaceInvasion.shots = snap.spaceInvasion.shots.filter(\r\n              (num) => num > 0 && !isNaN(num) && num\r\n            );\r\n          }\r\n          if (snap.spaceInvasion.aliens.includes(position)) {\r\n            // state.spaceInvasion.pause = true;\r\n            state.spaceInvasion.hits.push(position);\r\n            state.spaceInvasion.aliens = snap.spaceInvasion.aliens.filter(\r\n              (num) => num !== position && num\r\n            );\r\n            state.spaceInvasion.shots = snap.spaceInvasion.shots.filter(\r\n              (num) => num !== position && num\r\n            );\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }, [snap, width]);\r\n\r\n  const playgame = useCallback(() => {\r\n    moveInvaders();\r\n    moverShots();\r\n  }, [moveInvaders, moverShots]);\r\n  useEffect(() => {\r\n    let loaded = true;\r\n    if (loaded && !snap.spaceInvasion.gameOver && !snap.spaceInvasion.pause) {\r\n      alienIntervalId.current = setInterval(playgame, gameTime.current);\r\n    }\r\n    return () => {\r\n      loaded = false;\r\n      clearInterval(alienIntervalId.current);\r\n    };\r\n  }, [playgame, gameTime, alienIntervalId, snap]);\r\n\r\n  return (\r\n    <div className=\"my-5 w-[300px] flex flex-wrap border-black relative\">\r\n      {squares.map(mapAssets)}\r\n    </div>\r\n  );\r\n}\r\n","import state from \"../../../store\";\r\nimport { useSnapshot } from \"valtio\";\r\nimport GlassButton from \"../../../components/GlassButton\";\r\nimport { ImArrowLeft, ImArrowRight } from \"react-icons/im\";\r\nimport { GiFlamingSheet } from \"react-icons/gi\";\r\nexport default function MobileButtons() {\r\n  const snap = useSnapshot(state);\r\n  return (\r\n    <section className=\"bg-white/5 rounded-xl relative flex\">\r\n      <GlassButton\r\n        onClick={() => {\r\n          if (!snap.spaceInvasion.pause) {\r\n            if (snap.spaceInvasion.player % snap.spaceInvasion.width !== 0)\r\n              state.spaceInvasion.player = snap.spaceInvasion.player - 1;\r\n          }\r\n        }}\r\n      >\r\n        <span className=\"mobile_btn\">\r\n          <ImArrowLeft className=\"mobile_btn_icon\" />\r\n        </span>\r\n      </GlassButton>\r\n      <GlassButton\r\n        onClick={() => {\r\n          state.spaceInvasion.shots.push(snap.spaceInvasion.player);\r\n        }}\r\n      >\r\n        <span className=\"mobile_btn\">\r\n          <GiFlamingSheet className=\"mobile_btn_icon rotate-[225deg]\" />\r\n        </span>\r\n      </GlassButton>\r\n      <GlassButton\r\n        onClick={() => {\r\n          if (!snap.spaceInvasion.pause) {\r\n            if (\r\n              snap.spaceInvasion.player % snap.spaceInvasion.width <\r\n              snap.spaceInvasion.width - 1\r\n            )\r\n              state.spaceInvasion.player = snap.spaceInvasion.player + 1;\r\n          }\r\n        }}\r\n      >\r\n        <span className=\"mobile_btn\">\r\n          <ImArrowRight className=\"mobile_btn_icon\" />\r\n        </span>\r\n      </GlassButton>\r\n    </section>\r\n  );\r\n}\r\n","export default function Header() {\r\n  return (\r\n    <h1 className=\"text-3xl lg:text-7xl Anuphan text-gradB relative\">\r\n      <span className=\"absolute -rotate-12 scale-150 bottom-full right-full translate-x-full\">\r\n        <span className=\"absolute inline-block -rotate-45 right-full top-5 lg:top-10\">\r\n          Spa\r\n        </span>\r\n        ce\r\n      </span>{\" \"}\r\n      <span className=\"Alfa\">Invaders</span>\r\n    </h1>\r\n  );\r\n}\r\n","import state from \"../../../store\";\r\nimport { useSnapshot } from \"valtio\";\r\nimport GlassButton from \"../../../components/GlassButton\";\r\nimport { transitionViewIfSupported } from \"../../../utils\";\r\nimport { useNavigate } from \"react-router-dom\";\r\nexport default function Nav() {\r\n  const snap = useSnapshot(state);\r\n  const navigate = useNavigate();\r\n  return (\r\n    \r\n    <section className=\"flex gap-2 justify-between w-full\">\r\n    <GlassButton\r\n      onClick={() => {\r\n        state.thought = !snap.thought;\r\n        state.spaceInvasion.pause = !snap.spaceInvasion.pause;\r\n      }}\r\n    >\r\n      {snap.spaceInvasion.pause ? \"Play\" : \"Pause\"}\r\n    </GlassButton>\r\n    <GlassButton\r\n      onClick={() => {\r\n        state.spaceInvasion.aliens = [...snap.spaceInvasion.aliens_start];\r\n        state.spaceInvasion.gameOver = false;\r\n        state.spaceInvasion.pause = true;\r\n        state.spaceInvasion.status = null;\r\n        state.spaceInvasion.hits = [];\r\n        state.spaceInvasion.shots = [];\r\n        state.spaceInvasion.player = state.spaceInvasion.player_start;\r\n      }}\r\n    >\r\n      Restart\r\n    </GlassButton>\r\n    <GlassButton\r\n      className=\"btn_glass_purple_parent\"\r\n      onClick={() => {\r\n        transitionViewIfSupported(navigate(-1));\r\n      }}\r\n    >\r\n      Back\r\n    </GlassButton>\r\n  </section>\r\n  );\r\n}\r\n","import React from \"react\";\r\nimport SpaceInvaders from \"./spaceInvaders\";\r\nimport MobileButtons from \"./assets/MobileButtons\";\r\nimport Header from \"./assets/Header\";\r\nimport Nav from \"./assets/Nav\";\r\nexport default function SpaceInvadersContainer() {\r\n  return (\r\n    <div className=\"space_invaders_container\">\r\n      <Header />\r\n      <Nav />\r\n      <SpaceInvaders />\r\n      <MobileButtons />\r\n    </div>\r\n  );\r\n}\r\n","import * as THREE from \"three\";\r\nimport React, { useLayoutEffect, useRef, useMemo } from \"react\";\r\nimport { extend, useFrame, useThree } from \"@react-three/fiber\";\r\nimport { ProgressiveLightMap } from \"three/examples/jsm/misc/ProgressiveLightMap\";\r\n\r\nextend({ ProgressiveLightMap });\r\n\r\nexport function LightMap({\r\n  children,\r\n  position = [60, 150, 100],\r\n  resolution = 1024,\r\n  intensity = 1,\r\n  ambient = 0.5,\r\n  radius = 40,\r\n  blend = 40,\r\n  lights = 10,\r\n}) {\r\n  const rGroup = useRef();\r\n  const rLightmap = useRef();\r\n  const gl = useThree((state) => state.gl);\r\n  const camera = useThree((state) => state.camera);\r\n  const dirLights = useMemo(\r\n    () =>\r\n      [...Array(lights)].map((_, i) => {\r\n        let dirLight = new THREE.DirectionalLight(0xffffff, intensity / lights);\r\n        dirLight.castShadow = true;\r\n        dirLight.shadow.camera.near = 100;\r\n        dirLight.shadow.camera.far = 5000;\r\n        dirLight.shadow.camera.right = dirLight.shadow.camera.top = 150;\r\n        dirLight.shadow.camera.left = dirLight.shadow.camera.bottom = -150;\r\n        dirLight.shadow.mapSize.width = dirLight.shadow.mapSize.height =\r\n          resolution / 2;\r\n        return dirLight;\r\n      }),\r\n    [intensity, lights, resolution]\r\n  );\r\n\r\n  useLayoutEffect(() => {\r\n    const lightmap = rLightmap.current;\r\n    const objects = [...dirLights];\r\n    rGroup.current.traverse((child) => child.isMesh && objects.push(child));\r\n    lightmap.addObjectsToLightMap(objects);\r\n    return () => {\r\n      lightmap.blurringPlane = null;\r\n      lightmap.lightMapContainers = [];\r\n      lightmap.compiled = false;\r\n      lightmap.scene.clear();\r\n    };\r\n  }, []);\r\n\r\n  useFrame(() => {\r\n    rLightmap.current.update(camera, blend, true);\r\n    for (let l = 0; l < dirLights.length; l++) {\r\n      if (Math.random() > ambient)\r\n        dirLights[l].position.set(\r\n          position[0] + Math.random() * radius,\r\n          position[1] + Math.random() * radius,\r\n          position[2] + Math.random() * radius\r\n        );\r\n      else {\r\n        let lambda = Math.acos(2 * Math.random() - 1) - Math.PI / 2.0;\r\n        let phi = 2 * Math.PI * Math.random();\r\n        dirLights[l].position.set(\r\n          Math.cos(lambda) * Math.cos(phi) * 300,\r\n          Math.abs(Math.cos(lambda) * Math.sin(phi) * 300),\r\n          Math.sin(lambda) * 300\r\n        );\r\n      }\r\n    }\r\n  });\r\n\r\n  return (\r\n    <>\r\n      <progressiveLightMap ref={rLightmap} args={[gl, resolution]} name='lightMap' />\r\n      <group ref={rGroup} name=\"lightMapGroup\">{children}</group>\r\n    </>\r\n  );\r\n}\r\n","import * as THREE from \"three\";\r\nimport { extend } from \"@react-three/fiber\";\r\n\r\nclass RainMaterial extends THREE.ShaderMaterial {\r\n  constructor(texture) {\r\n    super({\r\n      vertexShader: `varying vec2 vUv;\r\n      void main() {\r\n        vUv = uv;\r\n        gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\r\n      }`,\r\n      fragmentShader: `\r\n      uniform vec3 u_resolution;\r\n      uniform float u_time;\r\n\r\n      #define TAU 6.28318530718\r\n      #define MAX_ITER 5\r\n\r\n      void mainImage( out vec4 fragColor, in vec2 fragCoord ) \r\n      {\r\n        float time = u_time * .5+23.0;\r\n        // uv should be the 0-1 uv of texture...\r\n      vec2 uv = fragCoord.xy / u_resolution.xy;\r\n        \r\n    #ifdef SHOW_TILING\r\n      vec2 p = mod(uv*TAU*2.0, TAU)-250.0;\r\n    #else\r\n        vec2 p = mod(uv*TAU, TAU)-250.0;\r\n    #endif\r\n      vec2 i = vec2(p);\r\n      float c = 1.0;\r\n      float inten = .005;\r\n    \r\n      for (int n = 0; n < MAX_ITER; n++) \r\n      {\r\n        float t = time * (1.0 - (3.5 / float(n+1)));\r\n        i = p + vec2(cos(t - i.x) + sin(t + i.y), sin(t - i.y) + cos(t + i.x));\r\n        c += 1.0/length(vec2(p.x / (sin(i.x+t)/inten),p.y / (cos(i.y+t)/inten)));\r\n      }\r\n      c /= float(MAX_ITER);\r\n      c = 1.17-pow(c, 1.4);\r\n      vec3 colour = vec3(pow(abs(c), 8.0));\r\n        colour = clamp(colour + vec3(0.0, 0.35, 0.5), 0.0, 1.0);\r\n    \r\n      #ifdef SHOW_TILING\r\n      // Flash tile borders...\r\n      vec2 pixel = 2.0 / u_resolution.xy;\r\n      uv *= 2.0;\r\n      float f = floor(mod(u_time*.5, 2.0)); \t// Flash value.\r\n      vec2 first = step(pixel, uv) * f;\t\t   \t// Rule out first screen pixels and flash.\r\n      uv  = step(fract(uv), pixel);\t\t\t\t// Add one line of pixels per tile.\r\n      colour = mix(colour, vec3(1.0, 1.0, 0.0), (uv.x + uv.y) * first.x * first.y); // Yellow line\r\n      #endif\r\n        \r\n      fragColor = vec4(colour, 1.0);\r\n      }\r\n    varying vec2 vUv;\r\n            void main() {\r\n                mainImage(gl_FragColor, vUv * u_resolution.xy);\r\n              }\r\n    \r\n        `,\r\n      uniforms: {\r\n        iChannel0: { value: texture },\r\n        u_time: { type: \"f\", value: 0.05 },\r\n        u_speed: { type: \"f\", value: performance.now() },\r\n        u_mouse: { type: \"f\", value: { x: 0, y: 0 } },\r\n        u_resolution: {\r\n          type: \"v2\",\r\n          value: new THREE.Vector2(window.innerWidth, window.innerWidth),\r\n        },\r\n      },\r\n      transparent: true,\r\n      blending: THREE.NormalBlending,\r\n      depthWrite: false,\r\n    });\r\n  }\r\n}\r\n\r\nextend({ RainMaterial });\r\n","import * as THREE from \"three\";\r\nimport { extend } from \"@react-three/fiber\";\r\n\r\nclass SquarePatternShaderMaterial extends THREE.ShaderMaterial {\r\n  constructor(texture) {\r\n    super({\r\n      vertexShader: `varying vec2 vUv;\r\n      void main() {\r\n        vUv = uv;\r\n        gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\r\n      }`,\r\n      fragmentShader: `#include <common>\r\n\r\n      uniform vec3 u_resolution;\r\n      uniform float u_time;\r\n      uniform sampler2D iChannel0;\r\n    \r\n      // By Daedelus: https://www.shadertoy.com/user/Daedelus\r\n      // license: Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License.\r\n      #define TIMESCALE 0.25 \r\n      #define TILES 8\r\n      #define COLOR 0.7, 1.6, 2.8\r\n    \r\n      void mainImage( out vec4 fragColor, in vec2 fragCoord )\r\n      {\r\n        float aspect = u_resolution.y/u_resolution.x;\r\n    float value;\r\n\tvec2 uv = fragCoord.xy / u_resolution.x;\r\n    uv -= vec2(0.5, 0.5*aspect);\r\n    float rot = radians(45.0); // radians(45.0*sin(u_time));\r\n    mat2 m = mat2(cos(rot), -sin(rot), sin(rot), cos(rot));\r\n   \tuv  = m * uv;\r\n    uv += vec2(0.5, 0.5*aspect);\r\n    uv.y+=0.5*(1.0-aspect);\r\n    vec2 pos = 10.0*uv;\r\n    vec2 rep = fract(pos);\r\n    float dist = 2.0*min(min(rep.x, 1.0-rep.x), min(rep.y, 1.0-rep.y));\r\n    float squareDist = length((floor(pos)+vec2(0.5)) - vec2(5.0) );\r\n    \r\n    float edge = sin(u_time-squareDist*0.5)*0.5+0.5;\r\n    \r\n    edge = (u_time-squareDist*0.5)*0.5;\r\n    edge = 2.0*fract(edge*0.5);\r\n    //value = 2.0*abs(dist-0.5);\r\n    //value = pow(dist, 2.0);\r\n    value = fract (dist*2.0);\r\n    value = mix(value, 1.0-value, step(1.0, edge));\r\n    //value *= 1.0-0.5*edge;\r\n    edge = pow(abs(1.0-edge), 2.0);\r\n    \r\n    //edge = abs(1.0-edge);\r\n    value = smoothstep( edge-0.05, edge, 0.95*value);\r\n    \r\n    \r\n    value += squareDist*.1;\r\n    //fragColor = vec4(value);\r\n    fragColor = mix(vec4(1.0,1.0,1.0,1.0),vec4(1.0,0.25,0.25,1.0), value);\r\n    fragColor.a = 0.25*clamp(value, 0.0, 1.0);\r\n      }\r\n    \r\n      varying vec2 vUv;\r\n    \r\n      void main() {\r\n        mainImage(gl_FragColor, vUv * u_resolution.xy);\r\n      }\r\n      `,\r\n      uniforms: {\r\n        iChannel0: { value: texture },\r\n        u_time: { type: \"f\", value: 0.05 },\r\n        u_speed: { type: \"f\", value: performance.now() },\r\n        u_mouse: { type: \"f\", value: { x: 0, y: 0 } },\r\n        u_resolution: {\r\n          type: \"v2\",\r\n          value: new THREE.Vector2(window.innerWidth, window.innerWidth),\r\n        },\r\n      },\r\n      transparent: true,\r\n      blending: THREE.NormalBlending,\r\n      depthWrite: false,\r\n    });\r\n  }\r\n}\r\n\r\nextend({ SquarePatternShaderMaterial });\r\n","\r\nimport * as THREE from \"three\";\r\nimport { extend } from \"@react-three/fiber\";\r\nimport { SimpleShader } from \"./FireShader\";\r\nclass CloudShaderMaterial extends THREE.ShaderMaterial {\r\n  constructor(texture) {\r\n    super({\r\n\t\t...SimpleShader\r\n      ,\r\n      uniforms: {\r\n        iChannel0: { value: texture },\r\n        iChannel1: { value: texture },\r\n        u_time: { type: \"f\", value: 0.05 },\r\n        u_speed: { type: \"f\", value: performance.now() },\r\n        u_mouse: { type: \"f\", value: { x: 0, y: 0 } },\r\n        u_resolution: {\r\n          type: \"v2\",\r\n          value: new THREE.Vector2(window.innerWidth, window.innerWidth),\r\n        },\r\n      },\r\n      transparent: true,\r\n      blending: THREE.NormalBlending,\r\n      depthWrite: false,\r\n    });\r\n  }\r\n}\r\n\r\nextend({  CloudShaderMaterial });\r\n","/*\r\nAuto-generated by: https://github.com/pmndrs/gltfjsx\r\n*/\r\n\r\nimport React, { useRef, useMemo } from \"react\";\r\nimport { useFrame } from \"@react-three/fiber\";\r\nimport { useGLTF } from \"@react-three/drei\";\r\nimport FormatTexture from \"../hooks/FormatTexture\";\r\nimport \"../shaders/RainShader\";\r\nimport \"../shaders/squaresShader\";\r\nimport \"../shaders/squaresPatternShader\";\r\nimport \"../shaders/CloudyTunnelShaderMaterial\";\r\n\r\nconst URL = `/assets/obj/ufo.gltf?${Math.random() * 100}`;\r\n\r\nexport default function Ufo({ animate, ...props }) {\r\n  const group = useRef();\r\n  const animateRefs = [useRef()];\r\n  const simRef = [useRef(), useRef(), useRef(), useRef()];\r\n  const { nodes } = useGLTF(URL);\r\n  const imageTexture = FormatTexture(\"/assets/img/c_space.jpg\");\r\n  const AnimateFrame = ({ meshRef }) => {\r\n    useFrame(({ clock }, delta) => {\r\n      if (meshRef?.current) {\r\n        animate({ meshRef, clock, delta });\r\n      }\r\n\r\n      if (simRef.length > 0) {\r\n        simRef.forEach(\r\n          (ref) =>\r\n            ref.current &&\r\n            (ref.current.uniforms.u_time.value = clock.elapsedTime)\r\n        );\r\n      }\r\n      if (animateRefs.length > 0) {\r\n        animateRefs.forEach((ref) => {\r\n          if (ref.current) {\r\n            ref.current.rotation.y -= 0.01351;\r\n            // console.log(ref)\r\n          }\r\n        });\r\n      }\r\n    });\r\n    return null;\r\n  };\r\n  return (\r\n    <group ref={group} {...props} dispose={null}>\r\n      {animate && <AnimateFrame meshRef={group} />}\r\n      <mesh\r\n        name=\"dome\"\r\n        castShadow\r\n        receiveShadow\r\n        geometry={nodes.dome.geometry}\r\n        material={nodes.dome.material}\r\n      >\r\n        <rainMaterial\r\n          ref={simRef[0]}\r\n          texture={imageTexture}\r\n          attach=\"material\"\r\n        />\r\n      </mesh>\r\n      <mesh\r\n        name=\"rings\"\r\n        castShadow\r\n        receiveShadow\r\n        geometry={nodes.ring.geometry}\r\n        material={nodes.ring.material}\r\n      >\r\n        <squareShaderMaterial\r\n          ref={simRef[1]}\r\n          texture={imageTexture}\r\n          attach=\"material\"\r\n        />\r\n      </mesh>\r\n      <mesh\r\n        name=\"lights\"\r\n        ref={animateRefs[0]}\r\n        castShadow\r\n        receiveShadow\r\n        geometry={nodes.lights.geometry}\r\n        material={nodes.lights.material}\r\n      >\r\n        <rainMaterial\r\n          ref={simRef[2]}\r\n          texture={imageTexture}\r\n          attach=\"material\"\r\n        />\r\n      </mesh>\r\n      <mesh\r\n        name=\"base\"\r\n        castShadow\r\n        receiveShadow\r\n        geometry={nodes.base.geometry}\r\n        material={nodes.base.material}\r\n      >\r\n        <squareShaderMaterial\r\n          ref={simRef[3]}\r\n          texture={imageTexture}\r\n          attach=\"material\"\r\n        />\r\n      </mesh>\r\n    </group>\r\n  );\r\n}\r\n\r\nuseGLTF.preload(URL);\r\n","import React, { Suspense, useRef, useMemo, useState } from \"react\";\r\nimport { Loader, CameraShake, Stars } from \"@react-three/drei\";\r\nimport { useSpring, animated } from \"@react-spring/three\";\r\nimport { Canvas } from \"@react-three/fiber\";\r\nimport { space } from \"../../utils\";\r\nimport { TextureOptions } from \"../../hooks\";\r\nimport { LightMap } from \"../../three/LightMap\";\r\nimport * as THREE from \"three\";\r\nimport Ufo from \"../../three/Ufo\";\r\nimport state from \"../../store\";\r\nimport { useSnapshot } from \"valtio\";\r\nimport Planet from \"../../three/planet\";\r\nimport CreateText from \"../../three/CreateText\";\r\nimport { useResize } from \"../../hooks\";\r\nimport \"../../shaders/squaresShader\";\r\nimport AnimatedMesh from \"../../three/AnimatedMesh\";\r\nexport default function SpaceInvadersCanvas({children}) {\r\n  const snap = useSnapshot(state);\r\n  const props = {\r\n    intensity: 5,\r\n    ambient: 3,\r\n    radius: 0,\r\n    blend: 200,\r\n  };\r\n  const { width } = useResize();\r\n  const isMobile = useMemo(() => width > \"1440\", [width]);\r\n  const springs = useSpring({\r\n    won:\r\n      snap.spaceInvasion.status && snap.spaceInvasion.gameOver\r\n        ? [space(-1.5), space(0.5), 0]\r\n        : [-space(0.5), space(10), space(1)],\r\n    lost:\r\n      !snap.spaceInvasion.status && snap.spaceInvasion.gameOver\r\n        ? [space(-1.5), space(0.5), 0]\r\n        : [-space(0.5), -space(10), space(1)],\r\n    ufo: isMobile\r\n      ? [-space(2), space(0.05), space(-0)]\r\n      : [-space(0), -space(0), space(0)],\r\n  });\r\n  const textOptions = {\r\n    fontSize: !isMobile ? 0.2 : 1,\r\n    fontHeight: !isMobile ? 0.1 : 0.3,\r\n    position: !isMobile\r\n      ? [space(1.2), space(0.4), 0]\r\n      : [space(3), 0, space(-2.8)],\r\n    rotation: !isMobile ? [0, 0, 0] : [space(0), space(-0.4), 0],\r\n    color: \"#fff\",\r\n  };\r\n  useMemo(() => console.log(\"damage\", snap.spaceInvasion.BulletsHit), [snap]);\r\n  useMemo(\r\n    () => console.log(\"remove bullet\", snap.spaceInvasion.Bullets),\r\n    [snap]\r\n  );\r\n  return (\r\n    <Suspense fallback={<Loader />}>\r\n      <Canvas\r\n        className=\"relative z-20 moon\"\r\n        performance={{ min: 0.5 }}\r\n        onCreated={({ gl }) => {\r\n          gl.toneMapping = THREE.CineonToneMapping;\r\n          gl.setClearColor(new THREE.Color(\"#020207\"));\r\n        }}\r\n        dpr={[1, 1.5]}\r\n        gl={{ alpha: true }}\r\n        flat\r\n        linear\r\n        shadows\r\n      >\r\n        <fog color=\"lightgray\" attach=\"fog\" near={4} far={800} name=\"fog\" />\r\n        <LightMap {...props}>\r\n          <Stars name=\"stars\" depth={200} />\r\n          <animated.group\r\n            name=\"ufoContainer\"\r\n            position={springs.ufo}\r\n            onPointerUp={(event) => {\r\n              state.spaceInvasion.Bullets = [\r\n                ...snap.spaceInvasion.Bullets,\r\n                {\r\n                  bulletName: `shot_${\r\n                    snap.spaceInvasion.Bullets.length\r\n                  }_${Math.random()}`,\r\n                  startPoint: event?.ray?.direction,\r\n                },\r\n              ];\r\n            }}\r\n          >\r\n            <Ufo\r\n              name=\"invader\"\r\n              position={[0, 0, 0]}\r\n              rotation={[space(-0.3), space(0), space(0)]}\r\n              animate={({ meshRef, clock, delta }) => {\r\n                meshRef.current.rotation.y += 0.01351;\r\n                meshRef.current.rotation.x =\r\n                  Math.sin(performance.now() * 0.00045) * 0.1;\r\n                meshRef.current.rotation.z =\r\n                  Math.cos(performance.now() * 0.00045) * 0.1;\r\n              }}\r\n            />\r\n\r\n            {snap.spaceInvasion.Bullets.length > 0 &&\r\n              snap.spaceInvasion.Bullets.filter((bullet, index) => {\r\n                console.log(bullet);\r\n                const isHit = snap.spaceInvasion.BulletsHit.filter(\r\n                  (b) => b.bulletName === bullet.bulletName && b\r\n                );\r\n                return isHit.length <= 0 && bullet;\r\n              }).map((bullet, index) => (\r\n                <AnimatedMesh\r\n                  key={index}\r\n                  name={bullet.bulletName}\r\n                  animate={({ meshRef, clock, delta, raycast }) => {\r\n                    meshRef.current.material.uniforms.u_time.value =\r\n                      clock.elapsedTime;\r\n                    meshRef.current.position.z -= 0.2;\r\n                    meshRef.current.position.y += 0.075;\r\n                    meshRef.current.position.x += 0.005;\r\n                    const intersections = raycast();\r\n\r\n                    if (intersections) {\r\n                      const hitPlanet = [\r\n                        ...intersections.filter(\r\n                          ({ object }) =>\r\n                            object.name === \"earth\" ||\r\n                            object.name === meshRef.current.name\r\n                        ),\r\n                      ];\r\n                      if (hitPlanet.length > 0) {\r\n                        console.log({raycast})\r\n                        state.spaceInvasion.BulletsHit = [\r\n                          ...snap.spaceInvasion.BulletsHit,\r\n                          {\r\n                            bulletName: meshRef.current.name,\r\n                          },\r\n                        ];\r\n                      }\r\n                    }\r\n                  }}\r\n                  // onUpdate={(e) => {}}\r\n                  position={bullet.startPoint}\r\n                  on\r\n                >\r\n                  <sphereGeometry args={[0.5, 0.5, 32]} attach={\"geometry\"} />\r\n                  <squareShaderMaterial attach={\"material\"} />\r\n                </AnimatedMesh>\r\n              ))}\r\n          </animated.group>\r\n\r\n          <Planet\r\n            name=\"earth\"\r\n            bumpScale={0.3}\r\n            args={[15, 15, 96]}\r\n            position={[0, space(8), space(-30)]}\r\n            {...TextureOptions(\"textures/earth\")}\r\n            animate={({ meshRef, delta, clock, raycast }) => {\r\n              if (meshRef?.current) {\r\n                meshRef.current.rotation.set(\r\n                  0,\r\n                  space(clock.oldTime / 90000),\r\n                  0\r\n                );\r\n              }\r\n            }}\r\n            // onUpdate={(e) => console.log({ e })}\r\n          />\r\n          {snap.spaceInvasion.status && snap.spaceInvasion.gameOver && (\r\n            <animated.group position={springs.won}>\r\n              <CreateText textstring=\"You Won\" {...textOptions} />\r\n            </animated.group>\r\n          )}\r\n          {!snap.spaceInvasion.status && snap.spaceInvasion.gameOver && (\r\n            <animated.group position={springs.lost}>\r\n              <CreateText textstring=\"You Lose\" {...textOptions} />\r\n            </animated.group>\r\n          )}\r\n          {!snap.thought && (\r\n            <CameraShake\r\n              maxYaw={0.01}\r\n              maxPitch={0.1}\r\n              maxRoll={0.1}\r\n              yawFrequency={0.05}\r\n              pitchFrequency={0.05}\r\n              rollFrequency={0.04}\r\n            />\r\n          )}\r\n        </LightMap>\r\n      </Canvas>\r\n      {children}\r\n    </Suspense>\r\n  );\r\n}\r\n","import SpaceInvadersContainer from \"../games/spaceInvaders\";\r\nimport SpaceInvadersCanvas from \"../games/spaceInvaders/spaceInvadersCanvas\";\r\nimport SpaceInvadersCanvasGame from \"../games/spaceInvaders/spaceInvadersCanvasGame\";\r\nexport default function Abduction() {\r\n  return (\r\n    <div className=\"moon bg-white fixed flex items-center justify-center w-screen h-screen top-0 left-0 z-20\">\r\n      <SpaceInvadersCanvas>\r\n        <SpaceInvadersContainer />\r\n      </SpaceInvadersCanvas>\r\n      {/*<SpaceInvadersCanvasGame/>*/}\r\n    </div>\r\n  );\r\n}\r\n","import * as THREE from \"three\";\r\nimport { extend } from \"@react-three/fiber\";\r\n\r\nclass SquareShaderMaterial extends THREE.ShaderMaterial {\r\n  constructor(texture) {\r\n    super({\r\n      vertexShader: `varying vec2 vUv;\r\n      void main() {\r\n        vUv = uv;\r\n        gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\r\n      }`,\r\n      fragmentShader: `#include <common>\r\n\r\n      uniform vec3 u_resolution;\r\n      uniform float u_time;\r\n      uniform sampler2D iChannel0;\r\n    \r\n      // By Daedelus: https://www.shadertoy.com/user/Daedelus\r\n      // license: Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License.\r\n      #define TIMESCALE 0.25 \r\n      #define TILES 8\r\n      #define COLOR 0.7, 1.6, 2.8\r\n    \r\n      void mainImage( out vec4 fragColor, in vec2 fragCoord )\r\n      {\r\n        float aspect_ratio = u_resolution.y/u_resolution.x;\r\n        vec2 uv = fragCoord.xy / u_resolution.x;\r\n        uv -= vec2(0.5, 0.5 * aspect_ratio);\r\n        float rot = radians(-30. -u_time); // radians(45.0*sin(u_time));\r\n        mat2 rotation_matrix = mat2(cos(rot), -sin(rot), sin(rot), cos(rot));\r\n        uv = rotation_matrix * uv;\r\n        vec2 scaled_uv = 20.0 * uv; \r\n        vec2 tile = fract(scaled_uv);\r\n        float tile_dist = min(min(tile.x, 1.0-tile.x), min(tile.y, 1.0-tile.y));\r\n        float square_dist = length(floor(scaled_uv));\r\n        \r\n        float edge = sin(u_time-square_dist*20.);\r\n        edge = mod(edge * edge, edge / edge);\r\n\r\n        float value = mix(tile_dist, 1.0-tile_dist, step(1.0, edge));\r\n        edge = pow(abs(1.0-edge), 2.2) * 0.5;\r\n        \r\n        value = smoothstep( edge-0.05, edge, 0.95*value);\r\n        \r\n        \r\n        value += square_dist*.1;\r\n        value *= 0.8 - 0.2;\r\n        fragColor = vec4(pow(value, 2.), pow(value, 1.5), pow(value, 1.2), 1.);\r\n      }\r\n    \r\n      varying vec2 vUv;\r\n    \r\n      void main() {\r\n        mainImage(gl_FragColor, vUv * u_resolution.xy);\r\n      }\r\n      `,\r\n      uniforms: {\r\n        iChannel0: { value: texture },\r\n        u_time: { type: \"f\", value: 0.05 },\r\n        u_speed: { type: \"f\", value: performance.now() },\r\n        u_mouse: { type: \"f\", value: { x: 0, y: 0 } },\r\n        u_resolution: {\r\n          type: \"v2\",\r\n          value: new THREE.Vector2(window.innerWidth, window.innerWidth),\r\n        },\r\n      },\r\n      transparent: true,\r\n      blending: THREE.NormalBlending,\r\n      depthWrite: false,\r\n    });\r\n  }\r\n}\r\n\r\nextend({  SquareShaderMaterial });\r\n","import React, { useRef } from \"react\";\r\nimport { useFrame } from \"@react-three/fiber\";\r\nimport { useForwardRaycast } from \"../hooks\";\r\nexport default function AnimatedMesh({ animate, children, ...props }) {\r\n  const meshRef = useRef();\r\n  const raycast = useForwardRaycast(meshRef);\r\n  const AnimateFrame = ({ meshRef }) => {\r\n    useFrame(({ clock }, delta) => {\r\n      meshRef?.current && animate({ meshRef, clock, delta, raycast });\r\n    });\r\n    return null;\r\n  };\r\n  return (\r\n    <mesh ref={meshRef} transparent={true}  {...props}>\r\n      {meshRef && animate && <AnimateFrame meshRef={meshRef} />}\r\n      {children}\r\n    </mesh>\r\n  );\r\n}\r\n","import React, { useRef } from \"react\";\r\nimport { useFrame } from \"@react-three/fiber\";\r\nimport { DoubleSide } from \"three\";\r\nimport {FormatTexture,useForwardRaycast} from \"../hooks\";\r\nconst Planet = ({\r\n  heightMapSrc,\r\n  AO,\r\n  bumpScale,\r\n  smokeScale,\r\n  textureMapSrc,\r\n  normalMapSrc,\r\n  smoothMapSrc,\r\n  metallicMapSrc,\r\n  edgeMapSrc,\r\n  args,\r\n  animate,\r\n  ...props\r\n}) => {\r\n  // not sure where to add this map will do rnd\r\n  // const smoothMap = FormatTexture(smoothMapSrc);\r\n\r\n  const heightMap = FormatTexture(heightMapSrc);\r\n  const AoTextureMap = FormatTexture(AO);\r\n  const textureMap = FormatTexture(textureMapSrc);\r\n  const normalMap = FormatTexture(normalMapSrc);\r\n  const metallicMap = FormatTexture(metallicMapSrc);\r\n  const edgeMap = FormatTexture(edgeMapSrc);\r\n  const TerrainMaterialRef = useRef();\r\n  const raycast = useForwardRaycast(TerrainMaterialRef);\r\n  const AnimateFrame = ({ meshRef }) => {\r\n    useFrame(({ clock }, delta) => {\r\n      animate({ meshRef, clock, delta,raycast });\r\n    });\r\n  };\r\n  return (\r\n      <mesh transparent={true}  {...props} ref={TerrainMaterialRef}>\r\n      {animate && <AnimateFrame meshRef={TerrainMaterialRef} />}\r\n        <sphereGeometry\r\n          attach=\"geometry\"\r\n          args={args}\r\n          receiveShadow\r\n          transparent={true}\r\n        />\r\n        <meshPhongMaterial\r\n          bumpScale={bumpScale}\r\n          attach=\"material\"\r\n          map={textureMap}\r\n          aoMap={AoTextureMap}\r\n          bumpMap={heightMap}\r\n          lightMap={edgeMap}\r\n          metalnessMap={metallicMap}\r\n          normalMap={normalMap}\r\n          side={DoubleSide}\r\n        />\r\n      </mesh>\r\n  );\r\n};\r\nexport default Planet;\r\n"],"names":["GlassButton","_ref","children","props","_objectWithoutProperties","_excluded","_jsx","_objectSpread","className","targetKey","_useState","useState","_useState2","_slicedToArray","keyPressed","setKeyPressed","downHandler","key","upHandler","_ref2","useEffect","window","addEventListener","removeEventListener","useMouseMoving","x","y","mousePosition","setMousePosition","getMouseEvent","event","clientX","clientY","callback","resizeHandler","useForwardRaycast","obj","raycaster","useMemo","Raycaster","pos","Vector3","dir","scene","useThree","state","current","set","getWorldPosition","getWorldDirection","intersectObjects","useResize","width","innerWidth","height","innerHeight","windowSize","setWindowSize","SpaceInvaders","snap","useSnapshot","spaceInvasion","alienIntervalId","useRef","gameTime","squares","returnArray","gridSize","leftArrow","useKeyPress","rightArrow","upArrow","gameOver","useCallback","aliens","length","pause","player","moveInvaders","leftBoundry","rightBoundry","i","console","log","includes","moverShots","shots","_loop","w","position","isNaN","filter","num","playgame","loaded","setInterval","clearInterval","map","hits","GiFission","GiDeathStar","_jsxs","GiSpaceship","GiFlamingSheet","MobileButtons","onClick","ImArrowLeft","ImArrowRight","Header","Nav","navigate","useNavigate","thought","_toConsumableArray","aliens_start","transitionViewIfSupported","SpaceInvadersContainer","LightMap","_ref$position","_ref$resolution","resolution","_ref$intensity","intensity","_ref$ambient","ambient","_ref$radius","radius","_ref$blend","blend","_ref$lights","lights","rGroup","rLightmap","gl","camera","dirLights","Array","_","dirLight","THREE","castShadow","shadow","near","far","right","top","left","bottom","mapSize","useLayoutEffect","lightmap","objects","traverse","child","isMesh","push","addObjectsToLightMap","blurringPlane","lightMapContainers","compiled","clear","useFrame","update","l","Math","random","lambda","acos","PI","phi","cos","abs","sin","_Fragment","ref","args","name","extend","ProgressiveLightMap","RainMaterial","_THREE$ShaderMaterial","_inherits","_super","_createSuper","texture","_classCallCheck","call","vertexShader","fragmentShader","uniforms","iChannel0","value","u_time","type","u_speed","performance","now","u_mouse","u_resolution","transparent","blending","depthWrite","_createClass","SquarePatternShaderMaterial","CloudShaderMaterial","SimpleShader","iChannel1","URL","concat","Ufo","animate","group","animateRefs","simRef","nodes","useGLTF","imageTexture","FormatTexture","AnimateFrame","meshRef","_ref3","delta","clock","forEach","elapsedTime","rotation","dispose","receiveShadow","geometry","dome","material","attach","ring","base","SpaceInvadersCanvas","isMobile","springs","useSpring","won","status","space","lost","ufo","textOptions","fontSize","fontHeight","color","BulletsHit","Bullets","Suspense","fallback","Loader","Canvas","min","onCreated","toneMapping","setClearColor","dpr","alpha","flat","linear","shadows","Stars","depth","animated","onPointerUp","_event$ray","bulletName","startPoint","ray","direction","z","bullet","index","b","AnimatedMesh","_ref4","raycast","intersections","_ref5","object","on","Planet","bumpScale","TextureOptions","_ref6","oldTime","CreateText","textstring","CameraShake","maxYaw","maxPitch","maxRoll","yawFrequency","pitchFrequency","rollFrequency","Abduction","SquareShaderMaterial","heightMapSrc","AO","textureMapSrc","smokeScale","normalMapSrc","metallicMapSrc","smoothMapSrc","edgeMapSrc","heightMap","AoTextureMap","textureMap","normalMap","metallicMap","edgeMap","TerrainMaterialRef","aoMap","bumpMap","lightMap","metalnessMap","side","DoubleSide"],"sourceRoot":""}